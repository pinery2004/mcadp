//==========================================================================================
//  Copyright (C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: MdHyo.cpp
//
//		ウィンドウ
//
//
//  K.Matsu           01/19/08    Created.
//==========================================================================================
#include "stdafx.h"
#include "MsBasic.h"
#include "MlLog.h"
#include "MgDefine.h"
#include "MgPoint.h"
#include "MgRect.h"
#include "MgPolygon.h"
#include "MgMat.h"

#include "MdModel.h"

namespace MC
{

//===========================================================================
//		ウィンドウの定義
//
//		ウィンドウの定義を行う。
//		座標値は管面の左上を原点とした値を指定する。（X,Y共に右下へ向かって＋方向）
//		既存（オープン中の）ウィンドウに対しては、即座に設定値は反映されない。
//		次回オープン時から有効になる。
//
MINT	MdhPoint (
						MDID		i_idHyo,	// 表NO
						CPoint		i_ptSt,		// 始点
						CPoint		i_ptSz		// 大きさ
				)
{
	return 0;
}

//===========================================================================
//		ウィンドウ定義のクリア
//
//		ウィンドウの定義を削除する
//		表NO上に存在する全ての定義がクリアされます。
//
MINT	MdhClearDefWindow(
						MDID		i_idHyo		// 表NO
				)
{
	return 0;
}

//===========================================================================
//		ウィンドウ位置・大きさの問い合わせ
//
//		表NOに対する位置・大きさの問い合わせ。
//		（DefWindowで定義された位置・大きさが返る。）
//
//		※注意
//		通常、ウィンドウ位置・大きさは、GetWindowPosで得ることができる。
//		但し、ユーザにより、表がリサイズされた場合
//		実際の大きさと、GetWindowPosで得られる大きさが異なることがある。
//		このような場合に、GetPhysicalWindowPosを使用して実際のサイズを得る。
//		表がリサイズされた場合は、GetPhysicalWindowPosでサイズを得たら、
//		そのサイズをDefWindowで再定義しておく必要がある。
//
MINT	MdhGetWindowPos(
						MDID		i_idHyo,	// 表NO
						CPoint*		o_ptSt,		// 始点
						CPoint*		o_ptSz		// 大きさ
				)
{
	return 0;
}

//===========================================================================
//		物理ウィンドウ位置・大きさの問い合わせ
//
//		表NOに対する、実際の位置・大きさの問い合わせ。
//
//		※注意
//		通常、ウィンドウ位置・大きさは、GetWindowPosで得ることができる。
//		但し、ユーザにより、表がリサイズされた場合
//		実際の大きさと、GetWindowPosで得られる大きさが異なることがある。
//		このような場合に、GetPhysicalWindowPosを使用して実際のサイズを得る。
//		表がリサイズされた場合は、GetPhysicalWindowPosでサイズを得たら、
//		そのサイズをDefWindowで再定義しておく必要がある。
//
MINT	MdhPointPickSnap (
						MDID		i_idHyo,	// 表NO
						CPoint*		o_ptSt,		// 始点
						CPoint*		o_ptSz		// 大きさ
				)
{
	return 0;
}

//===========================================================================
//		ウィンドウタイプの設定
//
//		表タイプ一覧
//		1:アプリケーションウィンドウ      （システム用。ユーザー使用不可）
//		2:ウィンドウ                      （システム用。ユーザー使用不可）
//		3:表１        移動なし,ﾎﾞﾀﾝUPなし
//		4:表２        移動なし,ﾎﾞﾀﾝUPあり
//		5:表３        移動あり,ﾎﾞﾀﾝUPなし
//		6:表４        移動あり,ﾎﾞﾀﾝUPあり
//		7:メニュー                        （システム用。ユーザー使用不可）
//
MINT	MdhDefWindowType(
						MDID		i_idHyo,	// 表NO
						MINT		i_iTp,		// 表タイプ（１〜７）下記参照
						MINT		i_iRs,		// サイズ変更フラグ（０:なし／１：あり）
						MINT		i_iTt,		// タイトルフラグ（０:なし／１：あり）
						MINT		i_iIc,		// アイコン化フラグ（０:なし／１：あり）
						MINT		i_iMx		// 最大化フラグ（０:なし／１：あり）
				)
{
	return 0;
}

//===========================================================================
//		ウィンドウタイプの問い合わせ
//
//		表タイプ一覧
//		1:アプリケーションウィンドウ      （システム用。ユーザー使用不可）
//		2:ウィンドウ                      （システム用。ユーザー使用不可）
//		3:表１        移動なし,ﾎﾞﾀﾝUPなし
//		4:表２        移動なし,ﾎﾞﾀﾝUPあり
//		5:表３        移動あり,ﾎﾞﾀﾝUPなし
//		6:表４        移動あり,ﾎﾞﾀﾝUPあり
//		7:メニュー                        （システム用。ユーザー使用不可）
//
MINT	MdhGetWindowType(
						MDID		i_idHyo,	// 表NO
						MINT*		o_piTp,		// 表タイプ（１〜７）下記参照
						MINT*		o_piRs,		// サイズ変更フラグ（０:なし／１：あり）
						MINT*		o_piTt,		// タイトルフラグ（０:なし／１：あり）
						MINT*		o_piIc,		// アイコン化フラグ（０:なし／１：あり）
						MINT*		o_piMx		// 最大化フラグ（０:なし／１：あり）
				)
{
	return 0;
}

//===========================================================================
//		ウィンドウタイトル文字列の定義
//
MINT	MdhDefWindowTitle(
						MDID		i_idHyo,	// 表NO
						MCHAR		i_sTtl[]	// タイトル文字列バッファ
				)
{
	return 0;
}

//===========================================================================
//		ウィンドウタイトル文字列の問い合わせ
//
MINT	MdhGetWindowTitle(
						MDID		i_idHyo,	// 表NO
						MCHAR		o_sTtl[],	// タイトル文字列バッファ
						MINT		i_nTtl		// タイトル文字列バッファサイズ
				)
{
	return 0;
}

//===========================================================================
//		サブウィンドウの定義
//
//		サブウィンドウの定義を行う。
//		座標値はウィンドウの左上を原点とした値を指定する。（X,Y共に右下へ向かって＋方向）
//		既存（オープン中の）ウィンドウに対しては、即座に設定値は反映されない。
//		次回オープン時から有効になる。
//
//		サブウィンドウタイプについて
//			１：キャンバスタイプ
//		Fieldを貼り付けることができる。
//		ウィンドウズのアイテムは貼り付けることができない。
//			２：パネルタイプ
//		Fieldを貼り付けることができない。
//		ウィンドウズのアイテムは貼り付けることができる
//
MINT	MdhDefSubWindow(
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_iTpSWin,	// サブウィンドウタイプ（1:キャンバス 2:パネル）
						CPoint		i_ptSt,		// サブウィンドウ始点
						CPoint		i_ptSz		// サブウィンドウの大きさ
				)
{
	return 0;
}

//===========================================================================
//		サブウィンドウ定義のクリア
//
//		サブウィンドウNO以下の定義データも全てクリアする
//
MINT	MdhClearDefSubWindow(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin	// サブウィンドウNO
				)
{
	return 0;
}

//===========================================================================
//		サブウィンドウ位置・大きさの問い合わせす
//
MINT	MdhGetSubWindowPos(
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_iTpSWin,	// サブウィンドウタイプ（1:キャンバス 2:パネル）
						CPoint*		o_pptSt,	// サブウィンドウ始点
						CPoint*		o_pptSz		// サブウィンドウの大きさ
				)
{
	return 0;
}

//===========================================================================
//		サブウィンドウにカラーマップ名を定義
//
//		サブウィンドウにカラーマップを定義する。
//		カラーマップを指定することにより、パレット番号による色指定が可能になる。
//
MINT	MdhGetKey(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MCHAR		i_sColMap	// カラーマップ名
				)
{
	return 0;
}

//===========================================================================
//		サブウィンドウのカラーマップ名を得る
//
MINT	MdhSetMouseMoveEventFlg (
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MCHAR		o_sColMap[],// カラーマップ名
						MINT		i_szColMap	// カラーマップ名バッファサイズ
				)
{
	return 0;
}

//===========================================================================
//		サブウィンドウに背景色コードを定義
//
//		色コードはカラーマップ名のパレットのインデックスを設定する。
//
MINT	MdhGetMouseUpEventFlg(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_icdCol	// 色コード
				)
{
	return 0;
}

//===========================================================================
//		サブウィンドウの背景色コードを得る
//
//		色コードはカラーマップ名のパレットのインデックスが得られる。
//
MINT	MdhGetSubWindowBackColor(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT*		o_picdCol	// 色コード
				)
{
	return 0;
}

//===========================================================================
//		サブウィンドウに罫線を定義
//
//		サブウィンドウに対して線を引く定義を行う。
//		サブウィンドウの左上を原点とした座標値で指定する。
//
//		線種については、別紙「線種一覧」を参照。
//
MINT	MdhDefSubWindowLine(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						CPoint		i_iptSt,	// 罫線始点
						CPoint		i_iptEn,	// 罫線終点
						MINT		i_iLW,		// 線幅（ピクセル値）
						MINT		i_iLTp,		// 線種
						MINT		i_iLN,		// 本数
						MINT		i_iLSpn,	// 間隔
						MINT		i_iLCol		// 色コード
				)
{
	return 0;
}


//
//===========================================================================
//		罫線データの問い合わせ
//
//		サブウィンドウに定義されている罫線データの全てを得る。
//		バッファは1つの罫線でlong[10]必要
//
//		[0]  /* 罫線開始線始点（Ｘ） */
//		[1]  /* 罫線開始線始点（Ｙ） */
//		[2]  /* 罫線開始線終点（Ｘ） */
//		[3]  /* 罫線開始線終点（Ｙ） */
//		[4]  /* 線種コード */
//		[5]  /* 線幅（ピクセル値） */
//		[6]  /* 本数 */
//		[7]  /* 間隔（Ｙ） */
//		[8]  /* 間隔（Ｘ） */
//		[9]  /* カラーコード */
//
//		線種については、別紙「線種一覧」を参照。
//
MINT	MdhGetSubWindowLine(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MgGInt		o_iDt		// 罫線データバッファ
				)
{
	return 0;
}

//
//===========================================================================
//		サブウィンドウに初期表示文字列を定義
//
//		サブウィンドウに対して文字を描く定義を行う。
//		サブウィンドウの左上を原点とした座標値で指定する。
//
MINT	MdhDefSubWindowText(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						CPoint		i_iptSt,	// 表示始点
						MINT		i_nFont,	// 文字フォントＮＯ
						MCHAR		i_sStr		// 初期表示文字列
				)
{
	return 0;
}

//
//===========================================================================
//		罫線定義・初期表示文字列定義のクリア
//
//		サブウィンドウに定義された罫線定義・文字定義を削除する。
//
MINT	MdhClearDefSubWindowData(				
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin	// サブウィンドウNO
				)
{
	return 0;
}

//
//===========================================================================
//		フィールドの定義
//
//		フィールドの定義を行う。
//		座標値はサブウィンドウの左上を原点とした値を指定する。（X,Y共に右下へ向かって＋方向）
//		既存（オープン中の）ウィンドウに対しては、即座に設定値は反映されない。
//		次回オープン時から有効になる。
//
MINT	MdhDefField(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint		i_iptFldSt,	// フィールド始点
						CPoint		i_iptFldSz,	// フィールドの大きさ
						MINT		i_nLine,	// 行数
						MINT		i_nColm,	// 列数
						CPoint		i_iptEcSt,	// エコーバック領域始点
						CPoint		i_iptEcSz,	// エコーバック領域の大きさ
						MINT		i_nFont		// 文字フォントNO
				)
{
	return 0;
}

//
//===========================================================================
//		アイテムの定義
//
//		アイテムの定義を行う。
//		座標値はサブウィンドウの左上を原点とした値を指定する。（X,Y共に右下へ向かって＋方向）
//		既存（オープン中の）ウィンドウに対しては、即座に設定値は反映されない。
//		次回オープン時から有効になる。
//
//		アイテムモードについては、別紙「アイテムモード一覧」を参照。
//
MINT	MdhDefItem(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nItem,	// 項目NO
						CPoint		i_iptItemSt,// アイテム始点
						CPoint		i_iptItemSz,// アイテムの大きさ
						MINT		i_mdItem,	// アイテムモード
						MINT		i_nFont		// 文字フォントNO
				)
{
	return 0;
}

//
//===========================================================================
//		フィールド（アイテム）定義のクリア
//
//		フィールド以下またはアイテム以下の定義をクリアする。
//
//
MINT	MdhClearDefField(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nF		// サブウィンドウタイプが
												//	キャンバスの場合：フィールドNO
												//	パネルの場合　　：アイテムNO
				)
{
	return 0;
}

//
//===========================================================================
//		フィールドデータの問い合わせ
//
//		定義されているフィールドデータを問い合わせる。
//
MINT	MdhGetField(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint*		o_piptFldSt,// フィールド始点
						CPoint*		o_piptFldSz,// フィールドの大きさ
						MINT*		o_pnLine,	// 行数
						MINT*		o_pnColm,	// 列数
						CPoint*		o_piptEcSt,	// エコーバック領域始点
						CPoint*		o_piptEcSz,	// エコーバック領域の大きさ
						MINT*		o_pnFont	// 文字フォントNO
				)
{
	return 0;
}

//
//===========================================================================
//		フィールド位置・大きさの問い合わせ
//
//		定義されているフィールドデータを問い合わせる。
//
MINT	MdhGetFieldPos(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint*		o_piptFldSt,// フィールド始点
						CPoint*		o_piptFldSz	// フィールドの大きさ
				)
{
	return 0;
}

//
//===========================================================================
//		フィールド行列数の問い合わせ
//
//		定義されているフィールドデータを問い合わせる。
//
MINT	MdhGetFieldLineColumn(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT*		o_pnLine,	// 行数
						MINT*		o_pnColm	// 列数
				)
{
	return 0;
}

//
//===========================================================================
//		エコーバック領域の問い合わせ
//
//		定義されているフィールドデータを問い合わせる。
//
MINT	MdhGetFieldEchoPos(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint*		o_piptEcSt,	// エコーバック領域始点
						CPoint*		o_piptEcSz	// エコーバック領域の大きさ
				)
{
	return 0;
}

//
//===========================================================================
//		フィールドの文字フォントを得る
//
//		定義されているフィールドデータを問い合わせる。
//
MINT	MdhGetFieldFont(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT*		o_pnFont	// 文字フォントNO
				)
{
	return 0;
}

//
//===========================================================================
//		フィールド（全セル）に文字表示位置を定義
//
//		全てのセルに対して文字表示位置を定義する。
//		文字を描く場合指定した位置から表示されることになる。
//
MINT	MdhDefFieldTextOffset(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint		i_iptFld	// 表示位置
				)
{
	return 0;
}

//
//===========================================================================
//		フィールド（全セル）の文字表示位置を得る
//
//		定義されているフィールドデータを問い合わせる。
//
MINT	MdhGetFieldTextOffset(
						MINT		i_mdRvrb,	// モード
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint*		o_piptFld	// 表示位置
				)
{
	return 0;
}

//
//===========================================================================
//		フィールドに背景色コードを定義
//
//		色コードはサブウィンドウで指定したカラーマップのインデックス
//
MINT	MdhDefFieldBackColor (
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT		i_icdCol	// 色コード
				)
{
	return 0;
}

//
//===========================================================================
//		フィールドの背景色コードを得る
//
//		色コードはサブウィンドウで指定したカラーマップのインデックス
//
MINT	MdhGetFieldBackColor(						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT*		o_picdCol	// 色コード
				)
{
	return 0;
}

//
//===========================================================================
//		アイテムデータの問い合わせ
//
//		定義されているアイテムデータを問い合わせる。
//		座標値はサブウィンドウの左上を原点とした値である。（X,Y共に右下へ向かって＋方向）

//		アイテムモードについては、別紙「アイテムモード一覧」を参照。

//
MINT	MdhGetItem(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nItem,	// 項目NO
						CPoint		i_iptItemSt,// アイテム始点
						CPoint		i_iptItemSz,// アイテムの大きさ
						MINT		i_mdItem,	// アイテムモード
						MINT		i_nFont		// 文字フォントNO
				)
{
	return 0;
}

//
//===========================================================================
//		セルに初期表示文字列を定義
//
//		セルに初期文字列を定義する。
//
MINT	MdhDefCellText(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT		i_nLine,	// 行数
						MINT		i_nColm,	// 列数
						CPoint		i_iptEcSt,	// 表示文字列
						MINT		i_nFont		// 色コード
				)
{
	return 0;
}

//
//===========================================================================
//		セルの初期表示文字列を得る
//
//		セルの初期文字列を問い合わせる。
//
MINT	MdhGetCellText(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT*		o_pnLine,	// 行数
						MINT*		o_pnColm,	// 列数
						CPoint*		o_piptEcSt,	// 表示文字列
						MINT*		o_pnFont	// 色コード
				)
{
	return 0;
}

//
//===========================================================================
//		セルの領域を得る（サブウィンドウ上の位置）
//
//		セルに定義されたデータを問い合わせる。
//
MINT	MdhGetCellPosInSubWindow(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT		i_nLine,	// 行数
						MINT		i_nColm,	// 列数
						MDID*		o_pidSWin,	// サブウィンドウID
						CPoint*		o_piptCelSt,// セル始点
						CPoint*		o_piptCelEn,// セル終点（Y）
						MDID*		i_pidFont	// 文字フォントID
				)
{
	return 0;
}

//
//===========================================================================
//		文字フォントの定義
//
//		文字フォントを定義する。
//
MINT	MdhDefFont(
						MDID		i_idFont,	// 文字フォントNO
						MCHAR		i_sflFont[]	// フォントファイル名文字列
				)
{
	return 0;
}

//
//===========================================================================
//		文字フォントを得る
//
//		定義されている文字フォントを得る。
//
MINT	MdhGetFont(
						MDID		i_idFont,	// 文字フォントNO
						MCHAR*		i_sflFont[],// フォントファイル名文字列
						MINT		i_szflFont	// フォントファイル名文字列バッファサイズ
				)
{
	return 0;
}

//
//===========================================================================
//		文字フォント定義のクリア
//
MINT	MdhClearDefFont(
						MDID		i_idFont	// 文字フォントNO
				)
{
	return 0;
}

//
//===========================================================================
//		イメージの定義
//
//		イメージ名称とイメージファイルのパスを指定してイメージを定義する。
//		定義したイメージはDispSubWindowImageおよびDispCellImageで使用できる。
//
//		イメージファイルとして使用できるファイル形式は下記の通り。
//		*.bmp
//		*.jpg
//		*.tif
//		*.png
//
MINT	MdhDefImage(
						MCHAR*		i_snmImg,	// イメージ名称
						MCHAR*		i_sflImg	// イメージファイル名文字列
				)
{
	return 0;
}

//
//===========================================================================
//		未使用の表NOを得る
//
//		新規に定義可能な表NOを得る。
//		取得できない場合は、戻り値=0が返る。
//
MINT	MdhGetUnUseedWindowNo()					// 表No
{
	return 0;
}

//
//===========================================================================
//		定義済みサブウィンドウの問い合わせ
//
//		表ＮＯ内に存在するサブウィンドウＮＯを検索する。
//
MINT	MdhGetSubWindowList(
						MDID		i_idHyo,	// 表ＮＯ
						MgGInt*		o_pgidSWin	// サブウィンドウNOリスト 
				)
{
	return 0;
}

//
//===========================================================================
//		定義済みフィールドの問い合わせ
//
//		サブウィンドウＮＯ内に存在するフィールドＮＯを検索する。
//
MINT	MdhGetFieldList(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_idSWin,	// サブウィンドウNO 
						MDGID*		o_pGidFld	// フィールドNO
				)
{
	return 0;
}

//
//===========================================================================
//		定義済みアイテムの問い合わせ
//
//		サブウィンドウＮＯ内に存在するフィールドＮＯを検索する。
//
MINT	MdhGetItemList(
						MDID		i_idFont,	// 文字フォントNO
						MCHAR*		i_sFontFl[],// フォントファイル名文字列
						MINT		i_szFontFl	// フォントファイル名文字列バッファサイズ
				)
{
	return 0;
}

//
//===========================================================================
//		表のオープン
//
//		指定された表をオープンする。
//		指定された表のサブウィンドウも全てオープンする。
//		表を表示させるためには、Openを呼んだ後にDispを呼ぶ必要がある。
//
//		※表のオープンについて
//		表のオープンには、２つの関数がある。
//			Open:　 表のウィンドウフレームと、その表に属するサブウィンドウ全てをオープンする。
//			OpenWindowFrame:　 表のウィンドウフレームのみオープンする。
//
MINT	MdhOpen(
						MDID		i_idHyo		// 表ＮＯ
				)
{
	return 0;
}

//
//===========================================================================
//		表のクローズ
//
//		指定された表をクローズする。
//		指定された表のサブウィンドウも全てクローズする。
//
MINT	MdhClose(
						MDID		i_idHyo		// 表ＮＯ
				)
{
	return 0;
}

//
//===========================================================================
//		ウィンドウフレームのオープン
//
//		指定された表のウィンドウフレームのみをオープンする。
//
//		※表のオープンについて
//		表のオープンには、２つの関数がある。
//			Open:　 表のウィンドウフレームと、その表に属するサブウィンドウ全てをオープンする。
//			OpenWindowFrame:　 表のウィンドウフレームのみオープンする。
//
//		この関数では、指定された表のサブウィンドウはオープンしないので、
//		　　　　　　OpenSubWindow
//		を呼んで、必要なサブウィンドウを自分でオープンする必要がある。
//		また、表を表示させるためには、各種オープンを呼んだ後にDispを呼ぶ必要がある。
//
MINT	MdhOpenWindowFrame(
						MDID		i_idHyo		// 表ＮＯ
				)
{
	return 0;
}

//
//===========================================================================
//		サブウィンドウのオープン
//
//		指定されたサブウィンドウをオープンする。
//
//		※表のオープンについて
//		表のオープンには、２つの関数がある。
//			Open:　 表のウィンドウフレームと、その表に属するサブウィンドウ全てをオープンする。
//			OpenWindowFrame:　 表のウィンドウフレームのみオープンする。
//
//		サブウィンドウのオープンをコントロールしたい場合は、
//		　　　　　　OpenWindowFrame
//		を呼んでから、当関数で必要なサブウィンドウを自分でOpenする。
//		表を表示させるためには、Openを呼んだ後にDispを呼ぶ必要がある。
//
MINT	MdhOpenSubWindow(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_idSWin	// サブウィンドウNO
				)
{
	return 0;
}

//
//===========================================================================
//		サブウィンドウのクローズ
//
//		指定されたサブウィンドウをクローズする。
//
MINT	MdhCloseSubWindow(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_idSWin	// サブウィンドウNO
				)
{
	return 0;
}

//
//===========================================================================
//		ウィンドウの表示
//
//		指定された表を表示する。
//
MINT	MdhDisp(
						MDID		i_idHyo		// 表ＮＯ
				)
{
	return 0;
}

//
//===========================================================================
//		ウィンドウの消去
//
//		指定された表を非表示にする。
//
//		非表示の表を再度表示する場合は、Dispを呼ぶ。
//
MINT	MdhHide(
						MDID		i_idHyo		// 表ＮＯ
				)
{
	return 0;
}

//
//===========================================================================
//		ウィンドウの始点位置の設定
//
//		指定された表の始点位置を設定する。
//
//		指定された表がオープンされていれば、表が移動する。
//		指定された表がオープンされていない場合は、その位置が記録され、次にオープンしたら、
//		その位置に表示される。
//
MINT	MdhSetWindowPosition(
						MDID		i_idHyo,	// 表ＮＯ
						CPoint		i_iptFontSt	// 始点
				)
{
	return 0;
}

//
//===========================================================================
//		ウィンドウのオープン状態の問い合わせ
//
//		指定された表のオープン状態を問い合わせる。
//
MINT	MdhGetWindowOpenState(
						MDID		i_idHyo,	// 表ＮＯ
						MINT*		i_piCond	// オープン状態
												//	 0:オープンされていない
												//	 1:オープンされている
												//	-1:オープンされているが非表示
				)
{
	return 0;
}

//
//===========================================================================
//		ウィンドウIDの問い合わせ
//
//		指定された表のウィンドウIDを得る。
//
//		ウィンドウIDは、Windowsのウィンドウハンドル。
//
MINT	MdhGetWindowID(
						MDID		i_idHyo,	// 表ＮＯ
						MDID*		i_pidWin	// ウィンドウID
				)
{
	return 0;
}

//
//===========================================================================
//		サブウィンドウIDの問い合わせ
//
//		指定されたサブウィンドウのサブウィンドウIDを得る。
//
//		サブウィンドウIDは、Windowsのウィンドウハンドル。
//
MINT	MdhGetSubWindowID(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_nSWin,	// サブウィンドウNO
						MDID*		i_pidWin	// サブウィンドウID
				)
{
	return 0;
}

//
//===========================================================================
//		アイテムIDの問い合わせ
//
//		指定されたアイテムのアイテムIDを得る。
//
//		アイテムIDは、Windowsのコントロールハンドル。
//
MINT	MdhGetItemID(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_nSWin,	// サブウィンドウNO
						MINT		i_nItem,	// アイテムNO
						MDID*		i_pidItem	// アイテムID
				)
{
	return 0;
}

//
//===========================================================================
//		文字フォントIDの問い合わせ
//
//		指定された文字フォントの文字フォントIDを得る。
//
//		文字フォントIDは、Windowsのフォントハンドル。
//
MINT	MdhGetFontID(
						MINT		i_nFont,	// 文字フォントNO
						MDID*		o_pidFont	// 文字フォントId
				)
{
	return 0;
}

//
//===========================================================================
//		サブウィンドウの塗りつぶし
//
//		指定されたサブウィンドウの領域を背景色で塗りつぶす。
//
//		サブウィンドウに背景色が設定されていない場合は、０番のカラーで塗りつぶされる。
//
MINT	MdhFillSubWindow(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_nSWin		// サブウィンドウNO
				)
{
	return 0;
}

//
//===========================================================================
//		サブウィンドウに罫線を表示
//
//		指定されたサブウィンドウに線を描く。
//
//		指定された線がサブウィンドウの領域より大きいかはチェックをしない。
//		サブウィンドウより大きな線を指定したら、サブウィンドウの領域で切られて表示される。
//
//		線種については、別紙「線種一覧」を参照。
//
MINT	MdhDispSubWindowLine(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_nSWin,	// サブウィンドウNO
						CPoint		i_ilnSt,	// 罫線始点
						CPoint		i_ilnEd,	// 罫線終点
						MINT		i_idWdt,	// 線幅（ピクセル値）
						MINT		i_idTyp,	// 線種
						MINT		i_nLn,		// 本数
						CPoint		i_nSpn,		// 線間隔
						MINT		i_icdCl		// 色コード
				)
{
	return 0;
}

//
//===========================================================================
//		サブウィンドウに文字列を表示
//
//		指定されたサブウィンドウに文字列を表示する。
//
//		指定された文字列がサブウィンドウの領域より大きいかはチェックをしない。
//		サブウィンドウより大きな文字を指定したら、サブウィンドウの領域で切られて表示される。
//
MINT	MdhDispSubWindowText(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						CPoint		i_iSt,		// 表示始点
						MDID		i_idFont,	// 文字フォントNO
						MCHAR*		i_sStr,		// 表示文字列
						MINT		i_icdCl		// 色コード
				)
{
	return 0;
}

//
//===========================================================================
//		サブウィンドウにイメージを表示
//
//		指定されたサブウィンドウに指定されたイメージを表示する。
//
//		イメージがサブウィンドウ領域より大きいかはチェックをしない。
//		サブウィンドウより大きなイメージを指定したら、サブウィンドウ領域で切られて表示される
//
//		イメージ名称とは、DefImageで登録したイメージ名称を指定する。
//
MINT	MdhDispSubWindowImage(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						CPoint		i_iSt,		// 始点
						MCHAR*		i_sNmImg	// イメージ名称
				)
{
	return 0;
}

//
//===========================================================================
//		フィールドの塗りつぶし
//
//		指定されたフィールドの領域を背景色で塗りつぶす。
//
//		フィールドに背景色が設定されていない場合は、そのサブウィンドウの背景色で塗りつぶされる。
//		サブウィンドウにも背景色が設定されていない場合は、０番のカラーで塗りつぶされる。
//
MINT	MdhFillField(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld		// フィールドNO
				)
{
	return 0;
}

//
//===========================================================================
//		セルに文字列を表示
//
//		指定されたセルに文字列を表示する。
//
//		文字は、文字表示位置が指定されていれば、その位置表示される。
//		文字表示位置が設定されていなければ、エコーバック領域の左上を基点に表示される。
//		指定された文字列がセルの領域より大きいかはチェックをしない。
//		セルより大きな文字を指定したら、セル領域をはみ出して表示される。
//
MINT	MdhDispCellText(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR*		i_sStr,		// 表示文字列
						MINT		i_icdCl		// 色コード
				)
{
	return 0;
}

//
//===========================================================================
//		セルにイメージを表示
//
//		指定されたセルにイメージを表示する。
//		セルのエコーバック領域の左上の点を指定して表示する。
//		イメージがセルのエコーバック領域より大きいかはチェックをしない。
//		セルより大きなイメージを指定したら、セル領域をはみ出して表示される。
//
//		イメージ名称とは、DefImageで登録したイメージ名称を指定する。
//
MINT	MdhDispCellImage(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR*		i_sStr,		// 表示文字列
						MINT		i_icdCl,	// 色コード
						MCHAR*		i_sNmImg	// イメージ名称
				)
{
	return 0;
}

//
//===========================================================================
//		セルの反転表示
//
//		指定されたセルの表示を反転する。
//		反転表示されたセルに対して、再度反転させると、もとの表示に戻る。
//
MINT	MdhDispCellRevt(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm		// 列
				)
{
	return 0;
}

//
//===========================================================================
//		セルのボタンON表示（表示文字指定）
//
//		指定されたセルに指定された文字を表示し、ボタンONの線を描く。
//
//		文字は、文字表示位置が指定されていれば、その位置表示される。
//		文字表示位置が設定されていなければ、エコーバック領域の左上を基点に表示される。
//		指定された文字列がセルの領域より大きいかはチェックをしない。
//		セルより大きな文字を指定したら、セル領域をはみ出して表示される。
//		ボタンの線は、セルのエコーバック領域の内側に描く。
//
MINT	MdhDispCellTextButtonOn(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MINT		i_iclFil,	// セル塗りつぶし色
						MCHAR*		i_sStr,		// 表示文字列
						MINT		i_iclStr,	// 文字色
						MINT		i_iclBtL,	// ボタンの明影色
						MINT		i_iclBtD,	// ボタンの暗影色
						MINT		i_iclOLn	// 外枠線の色
				)
{
	return 0;
}

//
//===========================================================================
//		セルのボタンOFF表示（表示文字指定）
//
//		指定されたセルに指定された文字を表示し、ボタンOFFの線を描く。
//
//		文字は、文字表示位置が指定されていれば、その位置表示される。
//		文字表示位置が設定されていなければ、エコーバック領域の左上を基点に表示される。
//		指定された文字列がセルの領域より大きいかはチェックをしない。
//		セルより大きな文字を指定したら、セル領域をはみ出して表示される。
//		ボタンの線は、セルのエコーバック領域の内側に描く。
//
MINT	MdhDispCellTextButtonOff(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MINT		i_iclFil,	// セル塗りつぶし色
						MCHAR*		i_sStr,		// 表示文字列
						MINT		i_iclStr,	// 文字色
						MINT		i_iclBtL,	// ボタンの明影色
						MINT		i_iclBtD,	// ボタンの暗影色
						MINT		i_iclOLn	// 外枠線の色
				)
{
	return 0;
}

//
//===========================================================================
//		セルのボタンON表示
//
//		指定されたセルにボタンONの線を描く。
//		ボタンの線は、セルのエコーバック領域の内側に描く。
//
MINT	MdhDispCellButtonOn(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MINT		i_iclBtL,	// ボタンの明影色
						MINT		i_iclBtD,	// ボタンの暗影色
						MINT		i_iclOLn	// 外枠線の色
				)
{
	return 0;
}

//
//===========================================================================
//		セルのボタンOFF表示
//
//		指定されたセルにボタンOFFの線を描く。
//		ボタンの線は、セルのエコーバック領域の内側に描く。
//
MINT	MdhDispCellButtonOff(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MINT		i_iclBtL,	// ボタンの明影色
						MINT		i_iclBtD,	// ボタンの暗影色
						MINT		i_iclOLn	// 外枠線の色
				)
{
	return 0;
}

//
//===========================================================================
//		アイテムに文字列を表示
//
//		指定されたアイテムに文字列を表示する。
//
MINT	MdhDispItemText(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iItm,		// アイテムNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR*		i_sStr		// 表示文字列
				)
{
	return 0;
}

//
//===========================================================================
//		セルの文字列入力
//
//		指定されたセルの表示を反転する。
//		反転表示されたセルに対して、再度反転させると、もとの表示に戻る。
//
MINT	MdhInpCellText(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR*		i_sOStr,	// 初期表示文字列
						MCHAR*		o_sInStr,	// 入力文字列
						MINT		i_szInStr,	// バッファーサイズ
						MDID*		o_pidWin,	// ウィンドウID
						MINT*		o_piEvent	// イベント
				)
{
	return 0;
}

//
//===========================================================================
//		セルの数値入力
//
//		指定されたセルの数値入力を行う。
//		電卓モードがＯＮになっている場合は、簡易電卓表が表示され、そこから数値を入力する。
//		ＯＦＦの場合はキーボードから数値を入力する。
//
//		ウィンドウIDとイベントについては、Inp::Pointで返されるものと同じ。
//
MINT	MdhInpCellNumber(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR*		i_sStr,		// 初期表示文字列
						MCHAR*		o_sStr,		// 入力文字列
						MINT		i_szStr,	// バッファーサイズ
						MDID*		o_pidWin,	// ウィンドウID
						MINT*		o_piEvent	// イベント
				)
{
	return 0;
}

//
//===========================================================================
//		電卓ウィンドウ有効フラグの設定
//
//		InpCellNumber実行時に電卓ウィンドウの有効／無効を設定する。
//		フラグが無効の場合は、指定セルに直接キーイン入力となる。
//		フラグが有効の場合は、電卓ウィンドウがオープンされ、電卓ウィンドウへの入力となる。
//
MINT	MdhSetCalcWindowFlg(
						MINT		i_iFlg		// フラグ
												//　0:無効
												//　1:有効
				)
{
	return 0;
}

//
//===========================================================================
//		電卓ウィンドウ有効フラグの問い合わせ
//
//		InpCellNumber実行時に電卓ウィンドウの有効／無効フラグを問い合わせる。
//		フラグが無効の場合は、指定セルに直接キーイン入力となる。
//		フラグが有効の場合は、電卓ウィンドウがオープンされ、電卓ウィンドウへの入力となる。
//
MINT	MdhGetCalcWindowFlg(
						MINT*		o_piFlg		// フラグ
												//　0:無効
												//　1:有効
				)
{
	return 0;
}

//
//===========================================================================
//		入力セル（アイテム）の問い合わせ
//
//		直前のInp::Point等で入力されたセルの位置値を得る。
//
//		サブウィンドウＮＯがキャンバスタイプの場合は、fno=フィールドNO、
//		パネルタイプの場合は、fno＝アイテムＮＯが返る。
//		fno＝アイテムＮＯの時には、linおよびcolには0が返る。
//
//		直前に入力関数Inp::Point等を実行すること。
//		widおよびeventにはInp::Point等からの返却値を渡す。
//
//		当関数は下記の入力直後に実行されることが前提。これ以外の状態で当関数を実行した場合、値は保障しない。
//		グラフィックウィンドウ以外（wid>0）のウィンドウへの入力時。
//		マウスボタンのUP/DOWN、移動、およびアイテムへの入力時。
//
MINT	MdhGetInpCell(
						MDID		i_idWin,	// 入力ウィンドウID（Inp::Point等の返却値）
						MINT		i_iEvent,	// 入力イベント 　　（Inp::Point等の返却値）
						MDID*		o_pidHyo,	// 表ＮＯ
						MDID*		o_piSWin,	// サブウィンドウNO
						MDID*		o_piFld,	// フィールドNO
						MINT*		o_piLn,		// 行
						MINT*		o_piClm		// 列
				)
{
	return 0;
}

//
//===========================================================================
//		入力位置の問い合わせ（マウスイベント時）
//
//		直前のInp::Point等で入力された座標値を、その表のサブウィンドウの座標値として得る。
//
//		直前に入力関数Inp::Point等を実行すること。
//		widおよびeventにはInp::Point等からの返却値を渡す。
//
//		当関数は下記の入力直後に実行されることが前提。これ以外の状態で当関数を実行した場合、値は保障しない。
//		グラフィックウィンドウ以外（wid>0）のウィンドウへの入力時。
//		マウスボタンのUP/DOWN、移動の入力時。
//
MINT	MdhGetInpPosition(
						MDID		i_idWin,	// 入力ウィンドウID（Inp::Point等の返却値）
						MINT		i_iEvent,	// 入力イベント 　　（Inp::Point等の返却値）
						MDID*		o_pidHyo,	// 表ＮＯ
						MDID*		o_piSWin,	// サブウィンドウNO
						CPoint*		o_pptInp	// サブウィンドウ内の座標値
				)
{
	return 0;
}

} // namespace MC
