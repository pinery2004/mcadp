//==========================================================================================
//  Copyright (C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: MdBuhin.cpp
//
//		ウィンドウ
//
//
//  K.Matsu           01/06/08    Created.
//==========================================================================================
#include "stdafx.h"
#include "MsBasic.h"
#include "MlLog.h"
#include "MgDefine.h"
#include "MgPoint.h"
#include "MgRect.h"
#include "MgMat.h"

#include "MdModel.h"

namespace MC
{

//===========================================================================
//		初期設定（ミニ部品）
//
//		仕  様
//		ミニ部品の初期設定を行う。
//		ミニ部品関係の処理を行う場合は必ず最初にこの関数を呼ぶ。
//		終了時には終了処理　Termを呼ぶ。
//		ミニ部品はモデルデータベースの中にあるため、データベースを切り替える度に初期設定が必要です。
//
MINT	MdbInit ()
{
	return 0;
}

//===========================================================================
//		初期設定（汎用部品）
//
//		仕  様
//		汎用部品の初期設定を行う。
//		汎用部品関係の処理を行う場合は必ず最初にこの関数を呼ぶ。
//		終了時には終了処理　TermOuterを呼ぶ。
//
//		この関数が呼ばれた時に、別のファイルがオープンされていると、そのファイルは「キャンセル」
//		でクローズされる。
//
MINT	MdbInitOuter (
						MCHAR		i_snmFile[],	// 汎用部品ファイル名
						MCHAR		i_smdOpen[]		// オープンのモード
													//	OLD　      既存（READ/WRITEでアクセス）
													//	READ       既存（READ-ONLYでアクセス）

				)
{
	return 0;
}

//===========================================================================
//		終了処理（ミニ部品）
//
//		ミニ部品の終了処理を行う。
//
//		※Init参照
//
MINT	MdbTerm ()
{
	return 0;
}

//===========================================================================
//		終了処理（汎用部品）
//
//		汎用部品の終了処理を行う。
//
MINT	MdbTermOuter (
						MCHAR		i_smdClose[]	// 汎用部品ファイル名クローズモード
													//	CANCEL   キャンセルクローズ
													//  OVER　　　上書きクローズ
				)
{
	return 0;
}

//===========================================================================
//		分類名から分類Idを得る（ミニ部品）
//
//		仕  様
//		分類名を指定して分類Idを得る。
//		指定された分類名が存在しない場合は０が返る。
//
MINT	MdbGetClassFromName (
						MCHAR		i_snmBr[],	// 分類名
						MDID*		o_pidBr		// 分類Id
												// （指定された分類名が存在しない場合は０が返る）
				)
{
	return 0;
}

//===========================================================================
//		分類名から分類Idを得る（汎用部品）
//
//		仕  様
//		分類名を指定して分類Idを得る。
//		指定された分類名が存在しない場合は０が返る。
//
MINT	MdbGetClassFromNameOuter (
						MCHAR		i_snmBr[],	// 分類名
						MDID*		o_pidBr		// 分類Id
												// （指定された分類名が存在しない場合は０が返る）
				)
{
	return 0;
}

//===========================================================================
//		分類Idから分類名を得る（ミニ部品）
//
MINT	MdbGetNameFromClass (
						MDID*		i_idBr,		// 分類Id
						MCHAR		o_snmBr[],	// 分類名
						MINT		i_szBr		// 分類名サイズ
				)
{
	return 0;
}

//===========================================================================
//		分類Idから分類名を得る（汎用部品）
//
MINT	MdbGetNameFromClassOuter (
						MDID*		i_idBr,		// 分類Id
						MCHAR		o_snmBr[],	// 分類名
						MINT		i_szBr		// 分類名サイズ
				)
{
	return 0;
}

//===========================================================================
//		分類の登録（ミニ部品）
//
//		仕  様
//		分類名を指定して分類Idを登録（生成）する。
//		指定された分類名が存在したらエラー。
//		分類名は最大２４バイトまで。
//
MINT	MdbRegClass (
						MCHAR		i_snmBr[],	// 分類名
						MDID*		o_pidBr		// 分類Id
				)
{
	return 0;
}

//===========================================================================
//		分類の登録（汎用部品）
//
//		仕  様
//		分類名を指定して分類Idを登録（生成）する。
//		指定された分類名が存在したらエラー。
//		分類名は最大２４バイトまで。
//
MINT	MdbRegClassOuter (
						MCHAR		i_snmBr[],	// 分類名
						MDID*		o_pidBr		// 分類Id
				)
{
	return 0;
}

//===========================================================================
//		分類名の変更（ミニ部品）
//
//		仕  様
//		指定された分類Idの分類名を変更する。
//		指定された分類名が存在する場合はエラー。
//		分類名は最大２４バイトまで。
//
MINT	MdbChangeNameClass (
						MDID		i_idBr,		// 分類Id
						MCHAR		i_snmBr[]	// 分類名
				)
{
	return 0;
}

//===========================================================================
//		分類名の変更（汎用部品）
//
//		仕  様
//		指定された分類Idの分類名を変更する。
//		指定された分類名が存在する場合はエラー。
//		分類名は最大２４バイトまで。
//
MINT	MdbChangeNameClassOuter (
						MDID		i_idBr,		// 分類Id
						MCHAR		i_snmBr[]	// 分類名
				)
{
	return 0;
}

//===========================================================================
//		分類の削除（ミニ部品）
//
//		指定された分類Id以下を全て削除する。
//		分類Idとその分類に属する部品も全て削除する。
//		削除される部品を参照するものがないかを調べてからこの関数を呼ぶこと。
//		（この関数では削除する部品を参照しているものがあるか等のチェックは一切行わない。）
//
MINT	MdbDeleteClass (
						MDID		i_idBr		// 分類Id
				)
{
	return 0;
}

//===========================================================================
//		分類の削除（汎用部品）
//
//		指定された分類Id以下を全て削除する。
//		分類Idとその分類に属する部品も全て削除する。
//		削除される部品を参照するものがないかを調べてからこの関数を呼ぶこと。
//		（この関数では削除する部品を参照しているものがあるか等のチェックは一切行わない。）
//
MINT	MdbDeleteClassOuter (
						MDID		i_idBr		// 分類Id
				)
{
	return 0;
}

//===========================================================================
//		カレントの分類Idを得る（ミニ部品）
//
//		カレント分類Idを得る。
//		カレント分類Idが設定されていない場合は０が返る。
//
MINT	MdbGetCurCls ()							// カレント分類Id
												// （設定されていない場合は０が返る）
{
	return 0;
}

//===========================================================================
//		カレントの分類Idを得る（汎用部品）
//
//		カレント分類Idを得る。
//		カレント分類Idが設定されていない場合は０が返る。
//
MINT	MdbGetCurClsOuter ()					// カレント分類Id
												// （設定されていない場合は０が返る）
{
	return 0;
}

//===========================================================================
//		カレントの分類Idを設定する（ミニ部品）
//
MINT	MdbSetCurCls (
						MDID		i_idBr		// 分類Id
				)
{
	return 0;
}

//===========================================================================
//		カレントの分類Idを設定する（汎用部品）
//
MINT	MdbSetCurClsOuter (
						MDID		i_idBr		// 分類Id
				)
{
	return 0;
}

//===========================================================================
//		部品名から部品Idを得る（ミニ部品）
//
//		カレント分類Idに対して、部品名を指定して部品Idを得る。
//		指定された部品名が存在しない場合は０が返る。
//
//		※カレント分類Idに対して部品を検索するので、該当する分類Idをカレントに設定しておく必要がある。
//
MINT	MdbGetPartFromName (
						MCHAR		i_snmBhn,	// 部品名
						MDID*		o_pidBhn	// 部品Id
												// （指定された部品名が存在しない場合は０が返る）
				)
{
	return 0;
}

//===========================================================================
//		部品名から部品Idを得る（汎用部品）
//
//		カレント分類Idに対して、部品名を指定して部品Idを得る。
//		指定された部品名が存在しない場合は０が返る。
//
//		※カレント分類Idに対して部品を検索するので、該当する分類Idをカレントに設定しておく必要がある。
//
MINT	MdbGetPartFromNameOuter (
						MCHAR		i_snmBhn[],	// 部品名
						MDID*		o_pidBhn	// 部品Id
												// （指定された部品名が存在しない場合は０が返る）
				)
{
	return 0;
}

//===========================================================================
//		部品Idから部品名を得る（ミニ部品）
//
MINT	MdbGetNameFromPart (
						MDID		i_idBhn,	// 部品Id
						MCHAR		o_snmBhn[],	// 部品名
						MINT		i_sznmBhn	// 部品名サイズ
				)
{
	return 0;
}

//===========================================================================
//		部品Idから部品名を得る（汎用部品）
//
MINT	MdbGetNameFromPartOuter (
						MDID		i_idBhn,	// 部品Id
						MCHAR		o_snmBhn[],	// 部品名
						MINT		i_sznmBhn	// 部品名サイズ
				)
{
	return 0;
}

//===========================================================================
//		部品の登録（ミニ部品）
//
//		仕  様
//		カレント分類Idに対して、部品名を指定して部品Idを登録（生成）する。
//		指定された部品名が存在したらエラー。
//		部品名は最大２４バイトまで。
//
//		※カレント分類Idに対して部品が登録されるので、該当する分類Idをカレントに設定しておく必要がある。
//
MINT	MdbRegPart (
						MCHAR		i_snmBhn[],	// 部品名
						MDID*		o_pidBhn	// 部品Id
				)
{
	return 0;
}

//===========================================================================
//		部品の登録（汎用部品）
//
//		仕  様
//		カレント分類Idに対して、部品名を指定して部品Idを登録（生成）する。
//		指定された部品名が存在したらエラー。
//		部品名は最大２４バイトまで。
//
//		※カレント分類Idに対して部品が登録されるので、該当する分類Idをカレントに設定しておく必要がある。
//
MINT	MdbRegPartOuter (
						MCHAR		i_snmBhn[],	// 部品名
						MDID*		o_pidBhn	// 部品Id
				)
{
	return 0;
}

//===========================================================================
//		部品名の変更（ミニ部品）
//
//		仕  様
//		指定された部品Idの部品名を変更する。
//		指定された部品名が存在する場合はエラー。
//		部品名は最大２４バイトまで。
//
MINT	MdbChangeNamePart (
						MDID		i_idBhn,	// 部品Id
						MCHAR		i_snmBhn[]	// 部品名
				)
{
	return 0;
}

//===========================================================================
//		部品名の変更（汎用部品）
//
//		仕  様
//		指定された部品Idの部品名を変更する。
//		指定された部品名が存在する場合はエラー。
//		部品名は最大２４バイトまで。
//
MINT	MdbChangeNamePartOuter (
						MDID		i_idBhn,	// 部品Id
						MCHAR		i_snmBhn[]	// 部品名
				)
{
	return 0;
}

//===========================================================================
//		部品の削除（ミニ部品）
//
//		仕  様
//		指定された部品Idを削除する。
//		削除する部品を参照するものがないかを調べてからこの関数を呼ぶこと。
//		（この関数では削除する部品を参照しているものがあるか等のチェックは一切行わない。）
//
MINT	MdbDeletePart (
						MDID		i_idBhn		// 部品Id
				)
{
	return 0;
}

//===========================================================================
//		部品の削除（汎用部品）
//
//		仕  様
//		指定された部品Idを削除する。
//		削除する部品を参照するものがないかを調べてからこの関数を呼ぶこと。
//		（この関数では削除する部品を参照しているものがあるか等のチェックは一切行わない。）
//
MINT	MdbDeletePartOuter (
						MDID		i_idBhn		// 部品Id
				)
{
	return 0;
}

//===========================================================================
//		機能図形の登録（非構造化）
//
//		仕  様
//		指定された部品の機能図形を
//		指定された座標変換テーブルで変換して部品として登録する。
//		既に指定機能番号で図形が登録されている場合はエラー
//		変更した部品を参照している物の再描画していません。
//		再描画が必要な場合は　Refresh( ･･･ )　を呼んで下さい。
//
//		機能番号については、別紙参照
//
MINT	MdbAddZukei (
						MDID		i_idBhn,	// 部品Id
						MDID		i_iBfn,		// 機能番号
						MDID		i_iZDpr,	// 図形Dpr
						MgMat3DE		i_matCnv	// 変換する座標テーブル
				)
{
	return 0;
}

//===========================================================================
//		機能図形の問い合わせ（非構造化）
//
//		仕  様
//		指定された部品の機能図形を得る。
//		指定機能番号に図形がない場合は０が返る。
//
//		機能番号については、別紙参照
//
MINT	MdbGetZukei (
						MDID		i_idBhn,	// 部品Id
						MDID		i_iBfn,		// 機能番号
						MDID*		o_piZDpr	// 図形Dpr
				)
{
	return 0;
}

//===========================================================================
//		機能図形の削除（非構造化）
//
//		仕  様
//		指定された部品の機能図形と部品の関係を切る。
//		削除フラグが１の場合は、その図形を削除する。
//		変更した部品を参照している物の再描画していません。
//		再描画が必要な場合は　Refresh( ･･･ )　を呼んで下さい。
//
//		機能番号については、別紙参照
//
MINT	MdbRemoveZukei (
						MDID		i_idBhn,	// 部品Id
						MDID		i_iBfn,		// 機能番号
						MINT		i_ifDel		// 削除フラグ
												//	0:指定した機能図形を部品から関係切りするのみ
												//	1:指定した機能図形を部品から関係切り削除する
				)
{
	return 0;
}

//===========================================================================
//		構造化部品構成要素の追加登録
//
//		仕  様
//		指定された構造化部品の構成要素としてエンティティを追加登録する。
//		図形は、指定された座標変換テーブルで変換して部品として登録する。
//		変更した部品を参照している物の再描画していません。
//		再描画が必要な場合は　Refresh( ･･･ )　を呼んで下さい。
//
//		※追加登録するエンティティリストに以下のものを含めてはいけない。
//		　　　通り芯
//		　　　メモ
//		　　　工程と関連付いた物
//		　　　第１引数で渡した部品を参照するエンティティ
//		　これらを含めたリストを渡した時の動作は保障しない。
//
MINT	MdbAddEnt (
						MDID		i_idBhn,	// 部品Id
						MDIDSET&	i_GidEnt,	// 追加登録するエンティティセット
						MINT		i_mdAdd,	// 追加モード
												//　0:指定されたエンティティは残る
												//	1:指定されたエンティティは残らない
						MgMat3DE&		i_matCng	// 変換する座標テーブル
				)
{
	return 0;
}

//===========================================================================
//		構造化部品構成要素の問い合わせ
//
//		指定された構造化部品を構成する要素エンティティを得る。
//
MINT	MdbGetEnt (
						MDID		i_idBhn,	// 部品Id
						MDIDSET*	o_pGidEnt	// 部品を構成するエンティティセット
				)
{
	return 0;
}

//===========================================================================
//		ミニ部品の削除（構造化）
//
//		仕  様
//		指定された構造化部品の構成要素と部品の関係を切る。
//		削除フラグが１の場合は、その構成要素を削除する。
//
//		変更した部品を参照している物の再描画していません。
//		再描画が必要な場合は　Refresh( ･･･ )　を呼んで下さい。
//
MINT	MdbRemoveEnt (
						MDID		i_idBhn,	// 部品Id
						MDIDSET&	i_GidEnt,	// 削除する部品を構成するエンティティセット
						MINT		i_ifDel		// 削除フラグ
												//	0:指定したエンティティを部品から関係切りするのみ
												//	1:指定したエンティティを部品から関係切り削除する
				)
{
	return 0;
}

//===========================================================================
//		部品化（チェックなし）
//
//		仕  様
//		指定されたエンティティリストから、部品を作成する。
//		図形は、指定された座標変換テーブルで変換して部品として登録する。
//		指定されたエンティティは、登録時の置き換えモードがONになっていれば、
//		カレントレイヤーの部品参照に変更する。
//		※エンティティリストに以下のものを含めてはいけない。
//		　　　通り芯
//		　　　メモ
//		　　　工程と関連付いた物
//		　　　第１引数で渡した部品を参照するエンティティ
//		　これらを含めたリストを渡した時の動作は保障しない。
//
//		機能番号については、別紙参照
//
MINT	MdbPack (
						MDID		i_idBhn,	// 部品Id
						MINT		i_ifStrct,	// フラグ　0:構造化　1:非構造化
						MDID		i_idFn,		// 機能番号（flg=0の時は無効）
						MDID&		i_idEnt,	// 部品化するエンティティリスト
						MgMat3DE&		i_matCng	// 変換する座標テーブル
				)
{
	return 0;
}

//===========================================================================
//		登録時の置き換えフラグの問い合わせ
//
//		仕  様
//		部品化（部品の登録）時の置き換えフラグの問い合わせ。
//
MINT	MdbGetReplaceFlg ()						// 置き換えフラグ
												//	0:そのまま
												//	1:部品参照エンティティに置き換え
{
	return 0;
}

//===========================================================================
//		登録時の置き換えフラグの設定
//
//		仕  様
//		部品化（部品の登録）時の置き換えフラグを設定する。
//
MINT	MdbSetReplaceFlg (
						MINT		i_ifRep		// 置き換えフラグ
												//　0:そのまま
												//	1:部品参照エンティティに置き換え

				)
{
	return 0;
}

//===========================================================================
//		実体化
//
//		仕  様
//		指定された点部材Dprを実体化する。（部品の分解）
//
//		生成されたエンティティリストについては、表示していません。
//		必要があれば、MdeCmdAfterCreate() を呼んで表示して下さい。
//
MINT	MdbUnPack (
						MINT		i_ifRep,	// 点部材Dpr
						MDIDSET*	o_pGidEnt	// 生成されたエンティティリスト
												//　0:そのまま
												//　1:部品参照エンティティに置き換え
				)
{
	return 0;
}

//===========================================================================
//		部品の分類を変更する（ミニ部品）
//
//		仕  様
//		指定された部品の分類を指定されたエンティティに変更する。
//
MINT	MdbChangeClass (
						MDID		i_idBh,		// 部品Id
						MDID		i_idBr		// 分類Id
				)
{
	return 0;
}

//===========================================================================
//		部品の分類を変更する（汎用部品）
//
//		仕  様
//		指定された部品の分類を指定されたエンティティに変更する。
//
MINT	MdbChangeClassOuter (
						MDID		i_idBh,		// 部品Id
						MDID		i_idBr		// 分類Id
				)
{
	return 0;
}

//===========================================================================
//		ミニ−＞汎用部品の複写
//
//		仕  様
//		指定されたミニ部品を汎用部品にコピーする。
//
//		あらかじめRegPartOuterで作成した汎用部品を指定すると、指定されたミニ部品以下の
//		構造を複写する。
//		bker2=0にすると、指定したミニ部品と同じ分類名、部品名の汎用部品を複写して返す。
//
MINT	MdbCopyToOuter (
						MDID		i_idBh,		// 複写元ミニ部品Id
						MDID		io_idOBh	// 複写された汎用部品
				)
{
	return 0;
}

//===========================================================================
//		汎用−＞ミニ部品の複写
//
//		仕  様
//		指定された汎用部品をミニ部品にコピーする。
//
//		あらかじめRegPartで作成したミニ部品を指定すると、指定された汎用部品以下の構造を複写する。
//		bker2=0にすると、指定した汎用部品と同じ分類名、部品名のミニ部品を複写して返す。
//
MINT	MdbCopyToInner (
						MDID		i_idOBh,	// 複写元汎用部品Id
						MDID		io_idBh		// 複写されたミニ部品Id
				)
{
	return 0;
}

//===========================================================================
//		分類Id一覧を得る（ミニ部品）
//
//		仕  様
//		分類Idの一覧を得る。
//
MINT	MdbGetClassList (
						MDIDSET*	o_pGidBr	// 分類Idセット
				)
{
	return 0;
}

//===========================================================================
//		分類Idの一覧を得る（汎用部品）
//
//		仕  様
//		分類Idの一覧を得る。
//
MINT	MdbGetClassListOuter (
						MDIDSET*	o_pGidBr	// 分類Idセット
				)
{
	return 0;
}

//===========================================================================
//		部品Idの一覧を得る（ミニ部品）
//
//		仕  様
//		分類Idを指定して、それに属する部品Idの一覧を得る。
//
MINT	MdbGetPartList (
						MDID		i_idBr,		// 分類Id
						MDIDSET*	o_pGidBh	// 部品Idセット
				)
{
	return 0;
}

//===========================================================================
//		部品Idの一覧を得る（汎用部品）
//
//		仕  様
//		分類Idを指定して、それに属する部品Idの一覧を得る。
//
MINT	MdbGetPartListOuter (
						MDID		i_idBr,		// 分類Id
						MDIDSET*	o_pGidBh	// 部品Idセット
				)
{
	return 0;
}

//===========================================================================
//		部品Idから分類Idを得る（ミニ部品）
//
//		仕  様
//		部品Idを指定してその部品が属する分類Idを得る。
//		指定された部品Idが不正な場合は０が返る。
//
MINT	MdbGetClass (
						MDID		i_idBh,		// 部品Id
						MDID*		o_pidBr		// 分類Id
												//（部品Idが不正な場合は０が返る）
				)
{
	return 0;
}

//===========================================================================
//		部品Idから分類Idを得る（汎用部品）
//
//		仕  様
//		部品Idを指定してその部品が属する分類Idを得る。
//		指定された部品Idが不正な場合は０が返る。
//
MINT	MdbGetClassOuter (
						MDID		i_idBh,		// 部品Id
						MDID*		o_pidBr		// 分類Id
												//（部品Idが不正な場合は０が返る）
				)
{
	return 0;
}

//===========================================================================
//		指定された部品を参照する実体一覧を得る
//
MINT	MdbGetOwnerList (
						MDID		i_idBh,		// 部品Id
						MDID*		o_pidBhU	// 部品を参照する実体Id
				)
{
	return 0;
}

//===========================================================================
//		指定されたIdが部品Idかを調べる
//
MINT	MdbCheckPart (
						MDID		i_idBh,		// 部品Id
						MINT*		o_piCond	// コンディション
												//	0:部品ではない
												//	1:部品
				)
{
	return 0;
}

//===========================================================================
//		指定されたIdが部品参照Idかを調べる
//
MINT	MdbCheckPartPlc (
						MDID		i_idBh,		// 部品Id
						MINT*		o_piCond	// コンディション
												//	0:部品参照ではない
												//	1:部品参照
				)
{
	return 0;
}

//===========================================================================
//		指定した部品を参照しているエンティティの再描
//
MINT	MdbRefresh (
						MDID		i_idBh		// 部品Id
				)
{
	return 0;
}

//===========================================================================
//		点部材の図形情報より機能図形を取り出す
//
//		点部材の図形情報から指定された機能番号の図形情報を取り出す。
//
MINT	MdbConvPartZukei (
						MDFIG&		i_pFig,		// 点部材図形情報
						MDID		i_ifFn,		// 機能番号
						MDFIG*		o_pFig		// 機能図形情報
				)
{
	return 0;
}

} // namespace MC
