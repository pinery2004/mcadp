//==========================================================================================
//  Copyright (C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: MdInp.cpp
//
//		ウィンドウ
//
//
//  K.Matsu           01/06/08    Created.
//==========================================================================================
#include "stdafx.h"
#include "MsBasic.h"
#include "MgDefine.h"
#include "MlLog.h"
#include "MgPoint.h"
#include "MgRect.h"
#include "MgPolygon.h"
#include "MgMatA.h"

#include "MdModel.h"

namespace MC
{

//
//===========================================================================
//		点の入力（ＰＩＣＫ−ＩＤ無し　補正無し）
//
//		マウスまたはキーボードから点を入力する。
//
//		widには入力されたウィンドウの番号が返る。
//		本システムで取り扱うウィンドウには、Windowクラスで生成するグラフィックウィンドウと、
//		Hyoクラスで生成される表（グラフィック以外のウィンドウ）が有り、それぞれでユニークな
//		論理番号が付けられる。
//		wid > 0 の場合は、表への入力が行われた事を示し、入力された表の表番号（hno）を返す。
//		wid < 0 の場合は、グラフィックウィンドウへの入力が行われた事を示し、
//		入力されたグラフィックウィンドウのIDを負の値で返す。
//		注）wid が負の値でその番号をWindowクラスの各関数へ渡すウィンドウIDとして使用する
//		場合は、正の値に修正して渡す必要がある。
//
//		eventは、別紙イベント一覧を参照
//
MINT	MdiPoint (
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MgPoint3D*	o_ptInp		// 入力した点の座標値（カレント座標系）
				)
{
	return 0;
}

//
//===========================================================================
//		点の入力（ＰＩＣＫ−ＩＤ無し　補正有り）
//
//		マウスまたはキーボードから点を入力する。
//		補正は各補正（スナップ）タイプのフラグ値に従う。（GetSnapFlg参照）
//
//		wid < 0 の場合はグラフィックウィンドウへの入力が行われた事を示し、
//		入力されたグラフィックウィンドウのIDを負の値で反す。
//		wid > 0 の場合はグラフィック以外のウィンドウ（表）への入力が行われた事を示し、
//		入力された表の表番号を反す。
//
//		eventは、別紙イベント一覧を参照
//
MINT	MdiPointSnap (
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MgPoint3D*	o_ptInp		// 入力した点の座標値（カレント座標系）
				)
{
	return 0;
}

//
//===========================================================================
//		点の入力（ＰＩＣＫ−ＩＤ有り　補正無し）
//
//		マウスまたはキーボードから点を入力する。
//
//		wid < 0 の場合はグラフィックウィンドウへの入力が行われた事を示し、
//		入力されたグラフィックウィンドウのIDを負の値で反す。
//		wid > 0 の場合はグラフィック以外のウィンドウ（表）への入力が行われた事を示し、
//		入力された表の表番号を反す。
//
//		eventは、別紙イベント一覧を参照
//
MINT	MdiPointPick (
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MgPoint3D*	o_ptInp,	// 入力した点の座標値（カレント座標系）
						MDIDSET*	o_pGid		// ピックした図形プリミティブDPRセット
				)
{
	return 0;
}

//
//===========================================================================
//		点の入力（ＰＩＣＫ−ＩＤ有り　補正有り）
//
//		マウスまたはキーボードから点を入力する。
//		補正は各補正（スナップ）タイプのフラグ値に従う。（GetSnapFlg参照）
//
//		wid < 0 の場合はグラフィックウィンドウへの入力が行われた事を示し、
//		入力されたグラフィックウィンドウのIDを負の値で反す。
//		wid > 0 の場合はグラフィック以外のウィンドウ（表）への入力が行われた事を示し、
//		入力された表の表番号を反す。
//
//		eventは、別紙イベント一覧を参照
//
MINT	MdiPointPickSnap (
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MgPoint3D*	o_ptInp,	// 入力した点の座標値（カレント座標系）
						MDIDSET*	o_pGid		// ピックした図形プリミティブDPRセット
				)
{
	return 0;
}

//
//===========================================================================
//		ピックor範囲指定による図形Dprの選択入力
//
//		ピック または、ドラッグによる範囲指定による図形の選択入力を行う。
//		選択図形のエコーバック等は行わない。
//
//		wid、eventについては、点の入力（Point等）を参照
//		eventは、別紙イベント一覧を参照
//
MINT	MdiSel (
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MDIDSET*	o_pGid		// ピックした図形プリミティブDPRセット
				)
{
	return 0;
}

//
//===========================================================================
//		ＫＥＹＩＮウィンドウによる文字入力
//
//		指定された位置にウィンドウをオープンして、文字を入力する。
//
MINT	MdikeyBoard (
						CPoint		i_ipt,		// ウィンドウの始点Ｘ,（ = -1 : 画面の中央 ）
												// ウィンドウの始点Y（ = -1 : 画面の中央 ）
						MCHAR		i_sMsg[],	// メッセージ文字列
						MCHAR		i_sPrmpt[],	// プロンプト文字列
						MCHAR		i_sInit[],	// 初期表示文字列
						MCHAR		o_sInp[],	// 入力された文字列
						MINT		i_szInp	// o_sInp バッファサイズ
				)
{
	return 0;
}

//
//===========================================================================
//		コマンド投入
//
//		指定されたコマンドを投入する。
//
MINT	MdiCommand (
						MCHAR		i_sCmd[]	// コマンド
				)
{
	return 0;
}

//
//===========================================================================
//		図形入力（操作）
//
//		指定されたコマンドの各図形の入力操作を行う。
//		図形Dprを生成してそのDpr-IDを返す。
//
MINT	MdiOperation (
						MCHAR		i_sCmd[],	// 入力する図形のコマンド
						MDIDSET*	o_pGidDpr,	// 図形プリミティブDPR-ID
						MDID*		o_pWin,		// ウィンドウID
						MINT		o_iEvent	// イベント
				)
{
	return 0;
}

//
//===========================================================================
//		スナップ状態の問い合わせ
//
//		直前にPointSnap、PointPickSnapで入力された点が、どのようなスナップ（補正）状態
//		かを問い合わせる。
//
MINT	MdiGetSnap (
						MINT*		o_piSnap	// スナップ状態
												//	0:free
												//	1:端点
												//	2:線上点
												//	3:中点
												//	4:交点
												//	5:面上点
												//	6:作業面
												//	7:中心
												//	8:面上（裏）
				)
{
	return 0;
}

//
//===========================================================================
//		ピックされた面分情報を返す
//
//		直前のPointPickSnapでスナップされた面情報を問い合わせる。
//		PointPickSnapで返された、図形プリミティブDPR-IDと点を指定する。
//		面にスナップされていなければ、
//		　　　　　.n = 0
//		となる。
//
MINT	MdiGetSnapPlane (
						MDID		i_idWin,	// ウィンドウＩＤ
						MDID		i_idDpr,	// 図形プリミティブDPR-ID
						MgPoint3D	i_pt,		// 点	
						MDFIG*		o_pFig		// 面図形情報
				)
{
	return 0;
}

//
//===========================================================================
//		スナップされた線分情報を返す
//
//		直前のPointSnap、PointPickSnapでスナップされた線分情報を問い合わせる。
//		線分にスナップされていなければ、
//		　　　　　.n = 0
//		となる。
//		線分図形情報figは、バッファーサイズ７以上が前提。
//
MINT	MdiGetSnapLine (
						MDID		i_idWin,	// ウィンドウＩＤ
						MDID		i_idDpr,	// 図形プリミティブDPR-ID
						MDFIG*		o_pFig		// 線分図形情報
				)
{
	return 0;
}

//
//===========================================================================
//		押されたキー情報を返す
//
//		直前のPoint、PointSnap、等の入力関数で押されたキー情報を問い合わせる。
//		キーボートが押されていない時に呼んだ場合の値は保証しない。
//
MINT	MdiGetKey ()							// キー情報
{
	return 0;
}

//
//===========================================================================
//		マウス移動イベントの必要フラグの問い合わせ
//
//		マウス移動イベントの必要フラグを問い合わせる。
//		マウス移動イベントが不要に設定されている時は、点の入力関数　MdiPointXX　から
//		マウス移動のイベントが返らない。
//
MINT	MdiGetMouseMoveEventFlg ()				// マウス移動イベントフラグ
												//	0:移動イベント不要
												//	1:移動イベント必要
{
	return 0;
}

//
//===========================================================================
//		マウス移動イベントの必要フラグの設定
//
//		マウス移動イベントの必要フラグを設定する。
//		マウス移動イベントを不要に設定すると、点の入力関数　MdiPointXX　から
//		マウス移動のイベントが返らなくなる。
//
MINT	MdiSetMouseMoveEventFlg (
						MINT		i_ifMMvEvt	// マウス移動イベントフラグ
												//	0:移動イベント不要
												//	1:移動イベント必要
				)
{
	return 0;
}

//
//===========================================================================
//		マウスアップイベントの必要フラグの問い合わせ
//
//		マウスアップイベントの必要フラグを問い合わせる。
//		マウスアップイベントが不要に設定されている時は、点の入力関数　MdiPointXX　から
//		マウスアップのイベントが返らない。
//
MINT	MdiGetMouseUpEventFlg ()				// マウスアップイベントフラグ
												//	0:アップイベント不要
												//	1:アップイベント必要
{
	return 0;
}

//
//===========================================================================
//		マウスアップイベントの必要フラグの設定
//
//		マウスアップイベントの必要フラグを設定する。
//		マウスアップイベントを不要に設定すると、点の入力関数　MdiPointXX　から
//		マウスアップのイベントが返らなくなる。
//
MINT	MdiSetMouseUpEventFlg (
						MINT		i_ifMUpEvt	// マウスアップイベントフラグ
												//	0:アップイベント不要
												//	1:アップイベント必要
				)
{
	return 0;
}

//
//===========================================================================
//		３Ｄカーソル表示／非表示の問い合わせ
//
//		グラフィックウィンドウに表示するﾏｳｽｶｰｿﾙの位置（X、Y、Z各３軸の点線）を
//		表示するか／否かの設定値を問い合わせる。
//
MINT	MdiGet3DCursorDispFlg ()				// ３Ｄカーソル表示フラグ
												//	0:描かない
												//	1:描く
{
	return 0;
}


//
//===========================================================================
//		３Ｄカーソル表示／非表示の設定
//
//		グラフィックウィンドウに表示するﾏｳｽｶｰｿﾙの位置（X、Y、Z各３軸の点線）を
//		表示するか／否かを設定する。
//
MINT	MdiSet3DCursorDispFlg (
						MINT	i_if3DCsrDisp	// ３Ｄカーソル表示フラグ
												//	0:描かない
												//	1:描く
				)
{
	return 0;
}

//
//===========================================================================
//		３Ｄカーソル移動モードの問い合わせ
//
//		点の入力(PointSnap等)時のﾏｳｽｶｰｿﾙの移動ﾓｰﾄﾞを参照する｡
//
//		ｶｰｿﾙ移動ﾓｰﾄﾞが1の時:ﾏｳｽｶｰｿﾙは3次元的に動く｡(高さのある図形に補正可能)
//		ｶｰｿﾙ移動ﾓｰﾄﾞが2の時:ﾏｳｽｶｰｿﾙは平面上を動く｡(設定された平面上にある図形､または
//		                    その平面と交差した図形の交点/交線上に補正可能)
//		ｶｰｿﾙ移動ﾓｰﾄﾞが3の時:ﾏｳｽｶｰｿﾙは線上を動く｡(設定された線上にある図形､または
//		                    その線と交差した図形の交点に補正可能)
//
//		※このﾓｰﾄﾞ２、３の面や線情報は関数GetCursorMoveModeDataで参照する｡
//
MINT	MdiGet3DCursorMoveMode ()				// ｶｰｿﾙ移動ﾓｰﾄﾞ
												//	1:3次元
												//	2:平面上
												//	3:線上
{
	return 0;
}

//
//===========================================================================
//		３Dカーソル移動モードの設定
//
//		点の入力(PointSnap等)時のﾏｳｽｶｰｿﾙの移動ﾓｰﾄﾞを設定する｡
//
//		ｶｰｿﾙ移動ﾓｰﾄﾞが1の時:ﾏｳｽｶｰｿﾙは3次元的に動く｡(高さのある図形に補正可能)
//		ｶｰｿﾙ移動ﾓｰﾄﾞが2の時:ﾏｳｽｶｰｿﾙは平面上を動く｡(設定された平面上にある図形､または
//		                    その平面と交差した図形の交点/交線上に補正可能)
//		ｶｰｿﾙ移動ﾓｰﾄﾞが3の時:ﾏｳｽｶｰｿﾙは線上を動く｡(設定された線上にある図形､または
//		                    その線と交差した図形の交点に補正可能)
//
//		※このﾓｰﾄﾞ２、３の面や線情報は関数SetCursorMoveModeDataで設定する｡
//		※プログラムでこのﾓｰﾄﾞ２または３に設定しても、画面（GUI）で[SHIFT]キーを押すと
//		　モードが解除され、３次元上自由に動かすことが可能になる。
//		　ユーザに必ず指定面or線上点を指定させたい場合は、SetShiftKeyFlgで、
//		「shift」キーフラグを「無効」に設定する必要がある。
//
MINT	MdiSet3DCursorMoveMode (				
						MINT	i_md3DCsrMv		// ｶｰｿﾙ移動ﾓｰﾄﾞ
												//	1:3次元
												//	2:平面上
												//	3:線上
				)
{
	return 0;
}

//
//===========================================================================
//		カーソル移動面（線）モードとデータの問い合わせ
//
//		点の入力（PointSnap等）時のﾏｳｽｶｰｿﾙの移動面(線)ﾓｰﾄﾞ及びﾃﾞｰﾀを参照する｡
//
//		（注）移動面(線)ﾓｰﾄﾞについて
//		Get3DCursorMoveModeの戻り値が1の時:
//		 図形に補正されなかった時の点の投影面を得る
//		Get3DCursorMoveModeの戻り値が2の時:
//		 ﾏｳｽｶｰｿﾙが移動する平面を得る｡
//		Get3DCursorMoveModeの戻り値が3の時:
//		 ﾏｳｽｶｰｿﾙが移動する線を得る｡
//
//		※	Set3DcursorMoveMode参照
//
MINT	MdiGetCursorMoveModeData (
						MINT*	o_pmdMvSfc,		// 移動面(線)ﾓｰﾄﾞ（注）
												// Get3DCursorMoveModeの戻り値が1or2の時
												//	1:作業面
												//	2:作業面に平行な面
												//	3:任意の面
												// Get3DCursorMoveModeの戻り値が3の時
												//	2:作業面に垂直な線
												//	3:任意の線
						MREAL	o_rDt[]			// mode=1の時
												//	使用しない
												// mode=2の時
												//	基準点(添字数は3)
												// mode=3の時
												//	面(原点+法線ﾍﾞｸﾄﾙ) または
												//	線(原点+線の方向ﾍﾞｸﾄﾙ)
				)
{
	return 0;
}

//
//===========================================================================
//		カーソル移動面（線）モードとデータの設定
//
//		点の入力（PointSnap等）時のﾏｳｽｶｰｿﾙの移動面(線)ﾓｰﾄﾞ及びﾃﾞｰﾀを設定する｡
//
//		（注）移動面(線)ﾓｰﾄﾞについて
//		Get3DCursorMoveModeの戻り値が1の時:
//		 図形に補正されなかった時の点の投影面を設定する｡
//		Get3DCursorMoveModeの戻り値が2の時:
//		 ﾏｳｽｶｰｿﾙが移動する平面を設定する｡
//		Get3DCursorMoveModeの戻り値が3の時:
//		 ﾏｳｽｶｰｿﾙが移動する線を設定する｡
//
//		※	Get3DcursorMoveMode参照
//
MINT	MdiSetCursorMoveModeData (
						MINT	o_mdMvSfc,		// 移動面(線)ﾓｰﾄﾞ（注）
												// Get3DCursorMoveModeの戻り値が1or2の時
												//	1:作業面
												//	2:作業面に平行な面
												//	3:任意の面
												// Get3DCursorMoveModeの戻り値が3の時
												//	2:作業面に垂直な線
												//	3:任意の線
						MREAL	o_rDt[]			// mode=1の時
												//	使用しない
												// mode=2の時
												//	基準点(添字数は3)
												// mode=3の時
												//	面(原点+法線ﾍﾞｸﾄﾙ) または
												//	線(原点+線の方向ﾍﾞｸﾄﾙ)
				)
{
	return 0;
}

//
//===========================================================================
//		「shift」キーフラグの問い合わせ
//
//		[SHIFT]キーの有効／無効を問い合わせる。
//
//		※[SHIFT]キーについて
//		点の入力（PointSnap）時、[SHIFT]キーを押すことにより（or画面からクリック）
//		マウスカーソルの高さ移動
//		マウスカーソルの移動モードのキャンセル
//		　　（Get3DCursorMoveModeの戻り値が2 or 3の時に１にする）
//		を行うことができる。
//		この[SHIFT]キーを有効／無効にする　を設定できる。
//		[SHIFT]キーを無効にするということは、ユーザが[SHIFT]キーを押しても無視すること、
//		つまり、ユーザに任意点を入力させたくないような場合に無効にして使用する。
//
//
MINT	MdiGetShiftKeyFlg ()					// [SHIFT]キー有効／無効フラグ
												//　0:無効
												//　1:有効
{
	return 0;
}

//
//===========================================================================
//		「shift」キーフラグの設定
//
//		[SHIFT]キーの有効／無効を設定する。
//
//		※[SHIFT]キーについて
//		点の入力（PointSnap）時、[SHIFT]キーを押すことにより（or画面からクリック）
//		マウスカーソルの高さ移動
//		マウスカーソルの移動モードのキャンセル
//		　　（Get3DCursorMoveModeの戻り値が2 or 3の時に１にする）
//		を行うことができる。
//		この[SHIFT]キーを有効／無効にする　を設定できる。
//		[SHIFT]キーを無効にするということは、ユーザが[SHIFT]キーを押しても無視すること、
//		つまり、ユーザに任意点を入力させたくないような場合に無効にして使用する。
//
//
MINT	MdiSetShiftKeyFlg (
						MINT	i_ifSftValid	// [SHIFT]キー有効／無効フラグ
												//　0:無効
												//　1:有効
				)
{
	return 0;
}

//
//===========================================================================
//		スナップエコー表示モードの問い合わせ
//
//		スナップエコー表示モードの値の問い合わせ。
//
//		※　スナップエコー表示モード
//		点の入力（PointSnap）時、ﾏｳｽｶｰｿﾙを動かしている時に図形にスナップ（補正）されると、
//		スナップされたことがわかるように画面上に
//		　　　　　　スナップマーク（ 　等）
//		　　　　　　スナップした線のエコー表示（面の場合は境界線）
//		を表示している。
//		これらのマークと図形の表示するウィンドウは、ﾏｳｽｶｰｿﾙのあるウィンドウまたは、
//		全ウィンドウのどちらかに設定できる。このモードのことを言う。
//
MINT	MdiGetSnapEchoMode (
						MINT*	o_pifSftValid,	// スナップマーク表示モード
												//	1:全ウィンドウに表示
												//　2:：入力ウィンドウのみに表示
						MINT*	o_pmdEcho		// スナップ線エコー表示モード
												//  1:全ウィンドウに表示
												//　2:入力ウィンドウのみに表示

				)
{
	return 0;
}

//
//===========================================================================
//		スナップエコー表示モードの設定
//
//		スナップエコー表示モードの値の設定。
//
//		※　スナップエコー表示モード
//		点の入力（PointSnap）時、ﾏｳｽｶｰｿﾙを動かしている時に図形にスナップ（補正）されると、
//		スナップされたことがわかるように画面上に
//		　　　　　　スナップマーク（ 　等）
//		　　　　　　スナップした線のエコー表示（面の場合は境界線のエコー表示）
//		を表示している。
//		これらのマークと図形の表示するウィンドウは、ﾏｳｽｶｰｿﾙのあるウィンドウまたは、全ウィンドウのどちらかに設定できる。このモードのことを言う。
//
//
MINT	MdiSetSnapEchoMode (
						MINT	i_ifSftValid,	// スナップマーク表示モード
												//	1:全ウィンドウに表示
												//　2:：入力ウィンドウのみに表示
						MINT	i_mdEcho		// スナップ線エコー表示モード
												//  1:全ウィンドウに表示
												//　2:入力ウィンドウのみに表示

				)
{
	return 0;
}

//
//===========================================================================
//		各スナップフラグの問い合わせ
//
//		各補正（スナップ）タイプのフラグ値を問い合わせる。
//		無効になっていれば、その補正は行わない。
//		システム起動時の値は全て「有効」になっている。
//
MINT	MdiGetSnapFlg (
						MINT*	o_pitpSnap,		// スｽﾅｯﾌﾟﾀｲﾌﾟ
												//	1:端点    2:線上点    3:中点    4:交点
												//	5:面上点  6:中心線    7:作業面
						MINT*	o_pifSnapValid	// ﾌﾗｸﾞ
												//	0:無効
												//	1:有効
				)
{
	return 0;
}

//
//===========================================================================
//		各スナップフラグの設定
//
//		各補正（スナップ）タイプのフラグ値を設定する。
//		無効になっていれば、その補正は行わない。
//		システム起動時の値は全て「有効」になっている。
//
MINT	MdiSetSnapFlg (
						MINT	i_itpSnap,		// スｽﾅｯﾌﾟﾀｲﾌﾟ
												//	1:端点    2:線上点    3:中点    4:交点
												//	5:面上点  6:中心線    7:作業面
						MINT	i_ifSnapValid	// ﾌﾗｸﾞ
												//	0:無効
												//	1:有効
				)
{
	return 0;
}

//
//===========================================================================
//		ラバーバンドモードの問い合わせ
//
//		点の入力(PointSnap等)時のラバーバンドモードを問い合わせる｡
//		ラバーバンドの始点はバッファーサイズが不足している場合は、サイズ分だけ返す。
//
//		※ラバーバンド
//		　ラバーバンドは、指定された点から、ﾏｳｽｶｰｿﾙの位置までの線を
//		ﾏｳｽｶｰｿﾙを動かす度に、描きなおされる線のこと。
//
MINT	MdiGetRubberbandMode (
						MINT*		o_pmdRvrb,	// モード
												//	0:描かない
												//	1:線分
												//	2:box （作業面）
												//	3:box （視平面）
						MgGPoint3D*	o_pGpt		// ラバーバンド始点セット
				)
{
	return 0;
}

//
//===========================================================================
//		ラバーバンドモードの設定
//
//		点の入力(PointSnap等)時のラバーバンドモードを設定する。
//
//		※ラバーバンド
//		　ラバーバンドは、指定された点から、ﾏｳｽｶｰｿﾙの位置までの線を
//		ﾏｳｽｶｰｿﾙを動かす度に、描きなおされる線のこと。
//
MINT	MdiSetRubberbandMode (
						MINT		i_mdRvrb,	// モード
												//	0:描かない
												//	1:線分
												//	2:box （作業面）
												//	3:box （視平面）
						MgGPoint3D	i_Gpt		// ラバーバンド始点セット
				)
{
	return 0;
}

//
//===========================================================================
//		２点（ＵＰ、ＤＯＷＮ）を渡し、同一点かどうか判別する
//
//		範囲と点を指定して、その点が同一点とみなせるかどうかをチェックする。
//		範囲rrを負の値で指定すると、システムのドラッグ範囲の値（GetDragSensで参照）で
//		チェックする。
//
//		APPを作成する際、ピックとドラッグで操作を切り分けるような場合に使用する。
//
MINT	MdiCheckSamePoint (
						MINT		i_mdRvrb,	// ウィンドウＩＤ
						MgPoint3D	i_pt[2],	// カレント座標値２点
						MREAL		i_rTol,		// 範囲(画面上でのmmサイズ)
						MINT		i_iCond		// コンディション
												//	0:同一点
												//	1:異なる２点
				)
{
	return 0;
}

//
//===========================================================================
//		入力時ドラッグ範囲の問い合わせ
//
//		ドラッグ範囲の値を問い合わせる。
//
//		APPを作成する際、ピックかドラッグかの判定する距離に使用する。
//
MINT	MdiGetDragSens ()						// ドラッグ範囲(画面上でのmmサイズ)
{
	return 0;
}

//
//===========================================================================
//		入力時ドラッグ範囲の設定
//
//		ドラッグ範囲の値を設定する。
//
//		APPを作成する際、ピックかドラッグかの判定する距離に使用する。
//
MINT	MdiSetDragSens (
						MINT		i_rJdgDrg	// ドラッグ範囲(画面上でのmmサイズ)
				)
{
	return 0;
}

//
//===========================================================================
//		入力時ピック範囲の問い合わせ
//
//		ピック範囲の値を問い合わせる。
//
//		PICK-ID付き点の入力(PointPick、PointPickSnap)時にこの範囲で図形を検索する。
//
MINT	MdiGetPickSens ()						// ピック範囲(画面上でのmmサイズ)
{
	return 0;
}

//
//===========================================================================
//		入力時ピック範囲の設定
//
//		ピック範囲の値を設定する。
//
//		PICK-ID付き点の入力(PointPick、PointPickSnap)時にこの範囲で図形を検索する。
//
MINT	MdiSetPickSens (
						MINT		i_rJdgPick	// ピック範囲(画面上でのmmサイズ)
				)
{
	return 0;
}

} // namespace MC
