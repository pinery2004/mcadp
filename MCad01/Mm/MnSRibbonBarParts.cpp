//==========================================================================================
//  Copyright (C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: MmsRibbonBarParts.cpp
//
//		
//	1.4	部品選択
//
//  K.Matsu           08/01/04    Created.
//==========================================================================================
#include "stdafx.h"
#include "MsMCAD.h"
#include "MainFrm.h"

#define DLL_EXPORT_MC_INPATTR_DO
#include "MmLib.h"
#include "MhDefParts.h"
#include "MhInp.h"
#include "MhLib.h"
#include "MmPrompt.h"

namespace MC
{

// 部品選択用コンボボックス
static MINT z_nComboIdPartsSpec;								// 表示項目数
static MINT	z_iComboIdPartsSpec[MX_CMB_PARTSNM];				// 表示項目対応部品ID
static MINT z_iComboKmIdPartsTp;								// カレント選択項目番号

// 寸法型式選択用コンボボックス
static MINT z_nComboMbrId;										// 表示項目数
static MINT	z_iComboMbrId[MX_CMB_CDMEMBER];						// 表示項目対応寸法型式ID
static MINT z_iComboKmIdMbr;									// カレント選択項目番号

///////////////////////////////////////////////////////////////////////////////
//	部品選択用コンポボックスにカレントの組と分類の部材名一覧を設定し
//	対応する部材ＩＤテーブルを作成する
//
//	カレントの構成(組)コード( 屋根、小屋、天井、耐力壁、壁、床、基礎) と
//	分類コード("部材", "金物", "パネル", "屋根", "壁", "線分", "区画", "開口", "注記", "その他") とが
//	一致する部材のみ設定する

void mnInpAttr::InitComboPartsTp()
{
	int		ist;
	int		ic1;
	int		ip = 0;
	int		iKCdGp = z_mn.GetKCdGp();			// カレント	構造　構成(組)コード
	int		iKCdBr = z_mn.GetKCdBr();			// カレント	部材　分類コード
	mhPartsTp	*pPartsTp;						// 部材テーブル 部材
	int		iPTCdGp;							// 部材テーブル	部材　構成(組)コード
	int		iPTCdBr;							// 部材テーブル 部材　分類コード
	MCHAR*	pPTNmParts1;						// 部材テーブル 部材　部材名

	CMFCRibbonComboBox* pCmbBox = MnpComboBuzai();
	pCmbBox->RemoveAllItems();

	MINT mxPartsNm = BuzaiCode::MhGetNoOfPartsTp();
	for ( ic1=0; ic1<mxPartsNm; ic1++) {
		pPartsTp = BuzaiCode::MhGetpPartsTp( ic1);
		iPTCdGp = pPartsTp->GetPTCdGp();
		if ( iKCdGp != iPTCdGp)									// 構成(組)コードがカレントと不一致は無視
			continue;
		iPTCdBr = pPartsTp->GetPTCdBr();
		if ( iKCdBr == MP_BR_OTHER) {							// 選択した分類がその他の場合
			if ( iPTCdBr == MP_BR_BUZAI ||						// "部材"、
				iPTCdBr == MP_BR_KANAGU ||						// "金物"、
				iPTCdBr == MP_BR_PANEL)							// "パネル"は無視
				continue;
		} else {												// 選択した分類が"部材", "金物", "パネル"の場合は
			if ( iPTCdBr != iKCdBr)								//		分類コードコードがカレントと不一致は無視
				 continue;
		}
		ASSERT( ip < MX_CMB_PARTSNM - 1);						// 部材コンボボックス項目　オーバフロー　<ERROR>
		z_iComboIdPartsSpec[ip] = ic1;								// 部材ＩＤをテーブルに設定
		pPTNmParts1 = pPartsTp->GetPTNmParts1();						// 部材名を項目に追加
		ist = pCmbBox->AddItem( pPTNmParts1);
		ip++;
	}
	z_nComboIdPartsSpec = ip;
	if ( ip == 0) {
		pCmbBox->AddItem( Mstr( "none"));
	}
	z_iComboKmIdPartsTp = -1;
	z_mn.SetKCdBrB( false, false, false);					//	部材、金物、パネル、その他のラジオボタンを未選択に設定

//	MmSetComboMbr();
}

///////////////////////////////////////////////////////////////////////////////
//	部材名より部品選択項目番号を取得する
//	コンボボックスの項目より指定された部材の部品IDを検索し、
//	該当の部品選択項目番号を返す
//	返値
//							≧ 0: 部品ID
//							＝-1: 該当なし
static MINT MmGetKmIdPartsTp( MCHAR* i_sNmParts1)
{
	MINT		iKmIdPartsTp;
	MINT		ic1;
	MINT		iIdPartsTp;
	mhPartsTp	*pPartsTp;
	
	for ( ic1=0; ic1<z_nComboIdPartsSpec; ic1++) {
		iIdPartsTp = z_iComboIdPartsSpec[ic1];
		pPartsTp = BuzaiCode::MhGetpPartsTp( iIdPartsTp);
		if ( Mstrcmp( pPartsTp->GetPTNmParts1(), i_sNmParts1) == 0)
			break;
	}
	if ( ic1 < z_nComboIdPartsSpec)
		iKmIdPartsTp = ic1;
	else
		iKmIdPartsTp = -1;
	return iKmIdPartsTp;
}

///////////////////////////////////////////////////////////////////////////////
//	コンボボックスに指定した部品選択項目番号の部材名を表示し
//	カレントの部品選択項目番号を設定する

void mnInpAttr::SetComboKmIdPartsTp(
						MINT	iKmIdPartsTp		// (I  ) 部品選択項目番号
				)
{
	System::GetpMainFrame()->SetCombo1( iKmIdPartsTp);
	z_iComboKmIdPartsTp = iKmIdPartsTp;

	// 部材入力属性の設定
	MINT iIdPartsTp = z_iComboIdPartsSpec[z_iComboKmIdPartsTp];
	mtPlcInp::SetIdPartsTp( iIdPartsTp);
	mhPartsTp *pPartsTp = BuzaiCode::MhGetpPartsTp( iIdPartsTp);
	mtPlcInp::SetpPartsTp( pPartsTp);

	MINT iCdPlc = pPartsTp->GetPTCdPlc();
	z_mn.SetComboCdPlc( iCdPlc);
}

///////////////////////////////////////////////////////////////////////////////
//	コンボボックスに指定した部材名を表示しその部品IDを取得する
//	カレントの部品選択項目番号を設定する
//	返値
//							≧ 0: 部品ID
//							＝-1: 該当なし
MINT mnInpAttr::SetComboCdPartsTp( MCHAR* i_sNmParts1)
{
	MINT 	iIdPartsTp = -1;
	MINT	iKmIdPartsTp;

	iKmIdPartsTp = MmGetKmIdPartsTp( i_sNmParts1);
	if ( iKmIdPartsTp < 0) {
		Msg::ErrorMsg( i_sNmParts1, MC_ERR_NOTSET_PARTS_TABLE);	// "が部材テーブルに未設定です．"
		MQUIT;
	}
	z_mn.SetComboKmIdPartsTp( iKmIdPartsTp);

	iIdPartsTp = z_iComboIdPartsSpec[iKmIdPartsTp];
exit:
	return iIdPartsTp;
}

///////////////////////////////////////////////////////////////////////////////
//	部材名より部品IDを取得する
//							＝-1: 未選択
//							≧ 0: 部品ID
MINT mnInpAttr::GetIdPartsTp( MCHAR* i_sNmParts1)
{
	MINT		ist;
	MINT		ic1;
	mhPartsTp	*pPartsTp;

	MINT	mxPartsNm = BuzaiCode::MhGetNoOfPartsTp();
	for ( ic1=0; ic1<mxPartsNm; ic1++) {
		pPartsTp = BuzaiCode::MhGetpPartsTp( ic1);
		if ( Mstrcmp( pPartsTp->GetPTNmParts1(), i_sNmParts1) == 0)
			break;
	}
	if ( ic1 < mxPartsNm)
		ist = ic1;
	else
		ist = -1;
	return ist;
}

///////////////////////////////////////////////////////////////////////////////
//	カレントの部品IDを取得する
//							＝-1: 該当なし
//							≧ 0: 部品ID
MINT mnInpAttr::GetCurIdPartsTp()
{
	MINT iIdPartsTp;

	if ( z_iComboKmIdPartsTp >= 0 && z_iComboKmIdPartsTp < z_nComboIdPartsSpec) {
		iIdPartsTp = z_iComboIdPartsSpec[z_iComboKmIdPartsTp];
	} else {
		iIdPartsTp = -1;
	}
	return iIdPartsTp;
}

///////////////////////////////////////////////////////////////////////////////
//	寸法型式選択用コンポボックスに寸法型式の項目(一覧)を設定し
//	対応する寸法型式ＩＤテーブルを作成する
//
//	カレントの部材の寸法型式使用部位コードを持つ寸法型式のみ設定

void mnInpAttr::InitComboPartsMbr()
{
	MhMbr	*pMbr;
	int		ic1;
	int		ic;
	int		ip = 0;

	CMFCRibbonComboBox* pCmbBox = MmpComboMbr();
	pCmbBox->RemoveAllItems();

	MINT		iIdPartsTp = z_mn.GetCurIdPartsTp();
	if ( iIdPartsTp == -1) {
//		pCmbBox->>EnableToolTips(0);			NG
		goto exit;
	}

	MCHAR		cMTp1 = BuzaiCode::MhGetpPartsTp( iIdPartsTp)->GetPTTpMbr()[0];
	MCHAR		cMTp2;

	MINT mxMbr = BuzaiCode::MhGetNoOfMbr();
	for ( ic1=0; ic1<mxMbr; ic1++) {
		pMbr = BuzaiCode::MhGetpMbr( ic1);

		for ( ic=0; cMTp2=pMbr->GetMbrType()[ic]; ic++) {		// 一致する寸法型式使用部位コードがあるかnullまで調べる
			if ( cMTp1 == cMTp2) break;
		}
		if ( cMTp2 == 0) continue;								// 一致しない場合次の寸法型式に移る

		ASSERT( ip < MX_CMB_CDMEMBER - 1);						// 寸法型式選択コンボボックス項目　オーバフロー　<ERROR>
		z_iComboMbrId[ip] = ic1;
		pCmbBox->AddItem( pMbr->GetMbrCode());
		ip++;
	}
exit:
	z_nComboMbrId = ip;
	if ( ip == 0) {
		pCmbBox->AddItem( Mstr( "none"));
	}

	z_iComboKmIdMbr = -1;
}

///////////////////////////////////////////////////////////////////////////////
//	コンボボックスに寸法型式選択項目番号の寸法型式を表示し
//	カレントの寸法型式選択項目番号を設定する

void mnInpAttr::SetComboKmIdMbr(
						MINT	iKmIdMbr			// (I  ) 寸法型式選択項目番号
				)
{
	System::GetpMainFrame()->SetCombo2( iKmIdMbr);
	z_iComboKmIdMbr = iKmIdMbr;

	// 部材入力属性の設定
	MINT iMbrId = z_iComboMbrId[iKmIdMbr];
	mtPlcInp::SetIdMbr( iMbrId); 
	MhMbr *pMbr = BuzaiCode::MhGetpMbr( iMbrId);
	mtPlcInp::SetpMbr( pMbr);
}

///////////////////////////////////////////////////////////////////////////////
//	寸法型式選択項目番号を取得する
//							＝-1: 該当なし
//							≧ 0: 部品ID
MINT mnInpAttr::GetComboKmIdMbr( MCHAR* sCdMbr)
{
	MINT		ist;
	MINT		ic1;
	MINT		iMbrId;
	MhMbr	*pMbr;
	
	for ( ic1=0; ic1<z_nComboMbrId; ic1++) {
		iMbrId = z_iComboMbrId[ic1];
		pMbr = BuzaiCode::MhGetpMbr( iMbrId);
		if ( Mstrcmp( pMbr->GetMbrCode(), sCdMbr) == 0)
			break;
	}
	if ( ic1 < z_nComboMbrId)
		ist = ic1;
	else
		ist = -1;
	return ist;
}

///////////////////////////////////////////////////////////////////////////////
//	寸法型式を設定する
//							＝-1: 該当なし
//							≧ 0: 寸法型式ID
MINT mnInpAttr::SetComboCdMbr( MCHAR* sCdMbr)
{
	MINT		iMbrId = -1;
	MINT		iKmIdMbr;

	iKmIdMbr = z_mn.GetComboKmIdMbr( sCdMbr);
	if ( iKmIdMbr < 0) {
		Msg::ErrorMsg( sCdMbr, MC_ERR_NOTSET_MEMBER_TABLE);	// "が寸法型式テーブルに未設定です．"
		MQUIT;
	}
	z_mn.SetComboKmIdMbr( iKmIdMbr);

	iMbrId = z_iComboMbrId[iKmIdMbr];
exit:
	return iMbrId;
}

///////////////////////////////////////////////////////////////////////////////
//	寸法型式IDを取得する
//							＝-1: 該当なし
//							≧ 0: 寸法型式ID
static MINT GetComboIdMbr( MCHAR* sCdMbr)
{
	MINT		ist;
	MINT		ic1;
	MhMbr	*pMbr;

	MINT mxMbr = BuzaiCode::MhGetNoOfMbr();
	for ( ic1=0; ic1<mxMbr; ic1++) {
		pMbr = BuzaiCode::MhGetpMbr( ic1);
		if ( Mstrcmp( pMbr->GetMbrCode(), sCdMbr) == 0)
			break;
	}
	if ( ic1 < mxMbr)
		ist = ic1;
	else
		ist = -1;
	return ist;
}

///////////////////////////////////////////////////////////////////////////////
//	カレントの寸法型式IDを取得する
//							＝-1: 未選択
//							≧ 0: 寸法型式ID
MINT mnInpAttr::GetComboIdMbr()
{
	MINT		iMbrId;

	if ( z_iComboKmIdMbr >= 0 && z_iComboKmIdMbr < z_nComboMbrId) {
		iMbrId = z_iComboMbrId[z_iComboKmIdMbr];
	} else {
		iMbrId = -1;
	}
	return iMbrId;
}

} // namespace MC