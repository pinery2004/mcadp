#pragma once
//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: MdmDB.h
//
//		データベース
//
//
//  K.Matsu           02/03/08    Created.
//==========================================================================================
namespace MC
{

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DAttr.h
//
//		属性
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DATTR_DO
	#pragma message( "<<< DAttr・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DAttr・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DAttr
{
public:
//===========================================================================
//		初期設定
//
//		属性の初期設定を行う。
//		データベースをオープン後、属性の処理を行う場合は必ず最初にこの関数を呼ぶ。
//
static MINT	Init(
				);

//===========================================================================
//		項目の生成
//
//		項目名とデータ種別を指定して、属性項目を生成する。
//		渡された項目名が既に使用されている場合（戻り値=10）は、生成済みの項目IDが返る。
//
//		PutData関数で属性データ（値）を記録するには、予め本関数で項目を生成しておく必要が有る。
//
//		「データ種別一覧」
//			 1	整数（long）
//			 2	実数（float）
//			 3	倍制度（double）
//			 4	テキスト（char）
//			 5	テキストファイル（パス文字列）
//			 6	イメージ
//			 7	イメージファイル（パス文字列）
//			 8	音声
//			 9	音声ファイル（パス文字列）
//			10	APP
//			11	WWW
//
static MINT	CreateItem(
						MCHAR		i_snmAtr[],	// 項目名
						MINT		i_itpAtr,	// データ種別
						MDID*		o_pidAtr	// 項目ID
				);

//===========================================================================
//		項目の削除
//
//		属性項目を削除する。
//		渡された項目IDが何れかの属性Dprで使用されている場合は削除できない。
//
static MINT	DeleteItem(
						MDID		i_idAtr	// 項目ID
				);

//===========================================================================
//		項目名の変更
//
//		項目名を変更する。
//		渡された項目名が既に使用されている場合はエラーとなる。
//
static MINT	ChangeItemName(
						MDID		i_idAtr,	// 項目ID
						MCHAR		i_snmAtr[]	// 項目名
				);

//===========================================================================
//		項目ＩＤよりデータ種別を得る
//
//		項目のデータ種別を問い合わせる。
//
//		データ種別については、別紙「データ種別一覧」を参照。
//
static MINT	GetItemType(
						MDID		i_idAtr,	// 項目ID
						MINT*		o_pitpAtr	// データ種別
				);

//===========================================================================
//		項目ＩＤより項目名を得る
//
static MINT	GetItemName(
						MINT		i_itpAtr,	// データ種別
						MCHAR		o_snmAtr[],	// 項目名
						MINT		i_sznmAtr	// 項目名サイズ
				);

//===========================================================================
//		項目名より項目ＩＤを得る
//
static MINT	GetItem(
						MCHAR		i_snmAtr[],	// 項目名
						MDID*		o_pidAtr	// 項目ID
				);

//===========================================================================
//		項目IDの一覧を得る
//
//		生成済み項目IDの一覧を得る。
//
static MINT	GetItemList(
						MDIDSET*	o_pGidAtr	// 項目IDセット
				);

//===========================================================================
//		属性データの記録（上書き／追加）
//
//		属性Dprに指定項目の値（属性データ）を記録する。
//		本関数の実行前に、CreateDpr関数で予め属性Dprを生成しておく必要が有る。
//		本関数の実行前に、CreateItem関数で予め項目を生成しておく必要が有る。
//
//		１つの属性Dprに対し、同じ項目IDで異なる値を複数個記録する事が出来る。
//		項目ID内の追番（no）はこの順番を示し、=0の場合は追加となる。
//		no≠0の場合は、その位置の値を指定属性データ（dat）で上書きする。
//
//		属性データ（dat）のデータ型は、項目IDのデータ種別で特定されるが、
//		本関数へはCharポインタ型にキャストして呼び出す。
//		データサイズはバイト長を渡す。
//
static MINT	PutData(
						MDID		i_idAtrDpr,	// 属性Dpr
						MDID		i_idAtr,	// 項目ID
						MDID		i_idnAtr,	// 項目ID内の追番( =0：追加 )
						MCHAR		i_sAtr[]	// 属性データ
				);

//===========================================================================
//		属性データの削除
//
//		属性Dprに記録されている指定項目の属性データを削除する。
//		指定された項目の属性データが存在しない場合は、エラーにはならずステータス＝０で返る。
//
//		１つの属性Dprに対し、同じ項目IDで異なる値を複数個記録する事が出来る。
//		項目ID内の追番（no）はこの順番を示し、
//		=0の場合は最初に記録された属性データを示すものとして、=1が渡された時と同じ処理を行う。
//
static MINT	RemoveData(
						MDID		i_idAtrDpr,	// 属性Dpr
						MDID		i_idAtr,	// 項目ID
						MDID		i_idnAtr	// 項目ID内の追番( =0：追加 )
				);

//===========================================================================
//		属性データの取得
//
//		属性Dprに記録されている指定項目の値（属性データ）を参照する。
//
//		１つの属性Dprに対し、同じ項目IDで異なる値を複数個記録する事が出来る。
//		項目ID内の追番（no）はこの順番を示し、=0の場合は最後のデータを参照する。
//		no≠0の場合は、その位置の値を参照する。
//
//		属性データ（dat）のデータ型は、項目IDのデータ種別で特定されるが、
//		本関数へはCharポインタ型にキャストして呼び出す。
//		データサイズはバイト長を渡す。
//
static MINT	GetData(
						MDID		i_idAtrDpr,	// 属性Dpr
						MDID		i_idAtr,	// 項目ID
						MDID		i_idnAtr,	// 項目ID内の追番( =0：追加 )
						MCHAR		o_sAtr[],	// 属性データ
						MINT		i_szAtr		// 属性データサイズ
				);

//===========================================================================
//		属性データサイズの問い合わせ
//
//		属性Dprに記録されている属性データのデータサイズを得る。
//
//		１つの属性Dprに対し、同じ項目IDで異なる値を複数個記録する事が出来る。
//		項目ID内の追番（no）はこの順番を示し、=0の場合は最後のデータのサイズを得る。
//		no>0の場合は、その位置のデータサイズを得る。
//		no=-1の場合は、指定項目ID全てのトータルデータサイズを得る。
//
//		項目ID=-1の場合は、属性Dprに記録されている全項目が対象となり、
//		項目個数およびデータサイズは得られるトータル数となる。
//
static MINT	GetDataSize(
						MDID		i_idAtrDpr,	// 属性Dpr
						MDID		i_idAtr,	// 項目ID
						MDID		i_idnAtr,	// 項目ID内の追番( =0：追加 )
						MINT*		o_pnAtr,	// 項目個数
						MINT*		o_piszAtr	// 属性データサイズ（バイト長）
				);

////===========================================================================
////		属性データを記録順に参照する
////
////		属性Dprに記録されている属性データを記録順に1つずつ得る。
////
////		属性データ（dat）のデータ型は、項目IDのデータ種別で特定されるが、
////		本関数へはCharポインタ型にキャストして呼び出す。
////		データサイズはバイト長を返す。
////
//static MINT GetDataSeq(
//						MDID		i_idAtrDpr,	// 属性Dpr
//						MDID*		o_pidAtr,	// 項目ID
//						MDATR		o_sAtr[]	// 属性データ
//				);

//===========================================================================
//		属性Dprに記録されている項目ＩＤの一覧を得る
//
//		属性Dprに記録されている項目IDのリストを得る。
//
static MINT	GetItemListInDpr(
						MDID		i_idAtrDpr,	// 属性Dpr
						MDIDSET*	o_pGidAtr	// 項目IDセット
				);

//===========================================================================
//		項目ＩＤを使用している属性Dprの一覧を得る
//
//		渡された項目IDが記録されている属性Dprの一覧を得る。
//
static MINT	GetDprHasItem(
						MDID		i_idAtrDpr,		// 属性Dpr
						MDIDSET*	o_pGidAtrDpr	// 項目DprIDセット
				);
};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DBhn.h
//
//		部品
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DBHN_DO
	#pragma message( "<<< DBhn・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DBhn・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DBhn
{
public:
//===========================================================================
//		初期設定（ミニ部品）
//
//		仕  様
//		ミニ部品の初期設定を行う。
//		ミニ部品関係の処理を行う場合は必ず最初にこの関数を呼ぶ。
//		終了時には終了処理　Termを呼ぶ。
//		ミニ部品はモデルデータベースの中にあるため、データベースを切り替える度に初期設定が必要です。
//
static MINT	Init();

//===========================================================================
//		初期設定（汎用部品）
//
//		仕  様
//		汎用部品の初期設定を行う。
//		汎用部品関係の処理を行う場合は必ず最初にこの関数を呼ぶ。
//		終了時には終了処理　TermOuterを呼ぶ。
//
//		この関数が呼ばれた時に、別のファイルがオープンされていると、そのファイルは「キャンセル」
//		でクローズされる。
//
static MINT	InitOuter(
						MCHAR		i_snmFile[],	// 汎用部品ファイル名
						MCHAR		i_smdOpen[]		// オープンのモード
													//	OLD　      既存（READ/WRITEでアクセス）
													//	READ       既存（READ-ONLYでアクセス）

				);

//===========================================================================
//		終了処理（ミニ部品）
//
//		ミニ部品の終了処理を行う。
//
//		※Init参照
//
static MINT	Term();

//===========================================================================
//		終了処理（汎用部品）
//
//		汎用部品の終了処理を行う。
//
static MINT	TermOuter(
						MCHAR		i_smdClose[]	// 汎用部品ファイル名クローズモード
													//	CANCEL   キャンセルクローズ
													//  OVER　　　上書きクローズ
				);

//===========================================================================
//		分類名から分類を得る（ミニ部品）
//
//		仕  様
//		分類名を指定して分類を得る。
//		指定された分類名が存在しない場合は０が返る。
//
static MINT	GetClassFromName(
						MCHAR		i_snmBr[],	// 分類名
						MDID*		o_pidBr		// 分類Id
												// （指定された分類名が存在しない場合は０が返る）
				);

//===========================================================================
//		分類名から分類を得る（汎用部品）
//
//		仕  様
//		分類名を指定して分類を得る。
//		指定された分類名が存在しない場合は０が返る。
//
static MINT	GetClassFromNameOuter(
						MCHAR		i_snmBr[],	// 分類名
						MDID*		o_pidBr		// 分類Id
												// （指定された分類名が存在しない場合は０が返る）
				);

//===========================================================================
//		分類から分類名を得る（ミニ部品）
//
static MINT	GetNameFromClass(
						MDID*		i_idBr,		// 分類Id
						MCHAR		o_snmBr[],	// 分類名
						MINT		i_szBr		// 分類名サイズ
				);

//===========================================================================
//		分類から分類名を得る（汎用部品）
//
static MINT	GetNameFromClassOuter(
						MDID*		i_idBr,		// 分類Id
						MCHAR		o_snmBr[],	// 分類名
						MINT		i_szBr		// 分類名サイズ
				);

//===========================================================================
//		分類の登録（ミニ部品）
//
//		仕  様
//		分類名を指定して分類を登録（生成）する。
//		指定された分類名が存在したらエラー。
//		分類名は最大２４バイトまで。
//
static MINT	RegClass(
						MCHAR		i_snmBr[],	// 分類名
						MDID*		o_pidBr		// 分類Id
				);

//===========================================================================
//		分類の登録（汎用部品）
//
//		仕  様
//		分類名を指定して分類を登録（生成）する。
//		指定された分類名が存在したらエラー。
//		分類名は最大２４バイトまで。
//
static MINT	RegClassOuter(
						MCHAR		i_snmBr[],	// 分類名
						MDID*		o_pidBr		// 分類Id
				);

//===========================================================================
//		分類名の変更（ミニ部品）
//
//		仕  様
//		指定された分類の分類名を変更する。
//		指定された分類名が存在する場合はエラー。
//		分類名は最大２４バイトまで。
//
static MINT	ChangeNameClass(
						MDID		i_idBr,		// 分類Id
						MCHAR		i_snmBr[]	// 分類名
				);

//===========================================================================
//		分類名の変更（汎用部品）
//
//		仕  様
//		指定された分類の分類名を変更する。
//		指定された分類名が存在する場合はエラー。
//		分類名は最大２４バイトまで。
//
static MINT	ChangeNameClassOuter(
						MDID		i_idBr,		// 分類Id
						MCHAR		i_snmBr[]	// 分類名
				);

//===========================================================================
//		分類の削除（ミニ部品）
//
//		指定された分類以下を全て削除する。
//		分類とその分類に属する部品も全て削除する。
//		削除される部品を参照するものがないかを調べてからこの関数を呼ぶこと。
//		（この関数では削除する部品を参照しているものがあるか等のチェックは一切行わない。）
//
static MINT	DeleteClass(
						MDID		i_idBr		// 分類Id
				);

//===========================================================================
//		分類の削除（汎用部品）
//
//		指定された分類以下を全て削除する。
//		分類とその分類に属する部品も全て削除する。
//		削除される部品を参照するものがないかを調べてからこの関数を呼ぶこと。
//		（この関数では削除する部品を参照しているものがあるか等のチェックは一切行わない。）
//
static MINT	DeleteClassOuter(
						MDID		i_idBr		// 分類Id
				);

//===========================================================================
//		カレントの分類Idを得る（ミニ部品）
//
//		カレント分類Idを得る。
//		カレント分類Idが設定されていない場合は０が返る。
//
static MINT	GetCurCls();					// カレント分類Id
										// （設定されていない場合は０が返る）

//===========================================================================
//		カレントの分類Idを得る（汎用部品）
//
//		カレント分類Idを得る。
//		カレント分類Idが設定されていない場合は０が返る。
//
static MINT	GetCurClsOuter();				// カレント分類Id
											// （設定されていない場合は０が返る）

//===========================================================================
//		カレントの分類Idを設定する（ミニ部品）
//
static MINT	SetCurCls(
						MDID		i_idBr		// 分類Id
				);

//===========================================================================
//		カレントの分類Idを設定する（汎用部品）
//
static MINT	SetCurClsOuter(
						MDID		i_idBr		// 分類Id
				);

//===========================================================================
//		部品名から部品Idを得る（ミニ部品）
//
//		カレント分類Idに対して、部品名を指定して部品Idを得る。
//		指定された部品名が存在しない場合は０が返る。
//
//		※カレント分類に対して部品を検索するので、該当する分類をカレントに設定しておく必要がある。
//
static MINT	GetPartFromName(
						MCHAR		i_snmBhn[],	// 部品名
						MDID*		o_pidBhn	// 部品Id
												// （指定された部品名が存在しない場合は０が返る）
				);

//===========================================================================
//		部品名から部品Idを得る（汎用部品）
//
//		カレント分類Idに対して、部品名を指定して部品Idを得る。
//		指定された部品名が存在しない場合は０が返る。
//
//		※カレント分類に対して部品を検索するので、該当する分類をカレントに設定しておく必要がある。
//
static MINT	GetPartFromNameOuter(
						MCHAR		i_snmBhn[],	// 部品名
						MDID*		o_pidBhn	// 部品Id
												// （指定された部品名が存在しない場合は０が返る）
				);

//===========================================================================
//		部品Idから部品名を得る（ミニ部品）
//
static MINT	GetNameFromPart(
						MDID		i_idBhn,	// 部品Id
						MCHAR		o_snmBhn[],	// 部品名
						MINT		i_sznmBhn	// 部品名サイズ
				);

//===========================================================================
//		部品Idから部品名を得る（汎用部品）
//
static MINT	GetNameFromPartOuter(
						MDID		i_idBhn,	// 部品Id
						MCHAR		o_snmBhn[],	// 部品名
						MINT		i_sznmBhn	// 部品名サイズ
				);

//===========================================================================
//		部品の登録（ミニ部品）
//
//		仕  様
//		カレント分類に対して、部品名を指定して部品を登録（生成）する。
//		指定された部品名が存在したらエラー。
//		部品名は最大２４バイトまで。
//
//		※カレント分類に対して部品が登録されるので、該当する分類をカレントに設定しておく必要がある。
//
static MINT	RegPart(
						MCHAR		i_snmBhn[],	// 部品名
						MDID*		o_pidBhn	// 部品Id
				);

//===========================================================================
//		部品の登録（汎用部品）
//
//		仕  様
//		カレント分類に対して、部品名を指定して部品を登録（生成）する。
//		指定された部品名が存在したらエラー。
//		部品名は最大２４バイトまで。
//
//		※カレント分類に対して部品が登録されるので、該当する分類をカレントに設定しておく必要がある。
//
static MINT	RegPartOuter(
						MCHAR		i_snmBhn[],	// 部品名
						MDID*		o_pidBhn	// 部品Id
				);

//===========================================================================
//		部品名の変更（ミニ部品）
//
//		仕  様
//		指定された部品Idの部品名を変更する。
//		指定された部品名が存在する場合はエラー。
//		部品名は最大２４バイトまで。
//
static MINT	ChangeNamePart(
						MDID		i_idBhn,	// 部品Id
						MCHAR		i_snmBhn[]	// 部品名
				);

//===========================================================================
//		部品名の変更（汎用部品）
//
//		仕  様
//		指定された部品Idの部品名を変更する。
//		指定された部品名が存在する場合はエラー。
//		部品名は最大２４バイトまで。
//
static MINT	ChangeNamePartOuter(
						MDID		i_idBhn,	// 部品Id
						MCHAR		i_snmBhn[]	// 部品名
				);

//===========================================================================
//		部品の削除（ミニ部品）
//
//		仕  様
//		指定された部品を削除する。
//		削除する部品を参照するものがないかを調べてからこの関数を呼ぶこと。
//		（この関数では削除する部品を参照しているものがあるか等のチェックは一切行わない。）
//
static MINT	DeletePart(
						MDID		i_idBhn		// 部品Id
				);

//===========================================================================
//		部品の削除（汎用部品）
//
//		仕  様
//		指定された部品を削除する。
//		削除する部品を参照するものがないかを調べてからこの関数を呼ぶこと。
//		（この関数では削除する部品を参照しているものがあるか等のチェックは一切行わない。）
//
static MINT	DeletePartOuter(
						MDID		i_idBhn		// 部品Id
				);

//===========================================================================
//		機能図形の登録（非構造化）
//
//		仕  様
//		指定された部品の機能図形を
//		指定された座標変換テーブルで変換して部品として登録する。
//		既に指定機能番号で図形が登録されている場合はエラー
//		変更した部品を参照している物の再描画していません。
//		再描画が必要な場合は　Refresh( ･･･ )　を呼んで下さい。
//
//		機能番号については、別紙参照
//
static MINT	AddZukei(
						MDID		i_idBhn,	// 部品Id
						MDID		i_iBfn,		// 機能番号
						MDID		i_iZDpr,	// 図形Dpr
						MgMat3E		i_matCnv	// 変換する座標テーブル
				);

//===========================================================================
//		機能図形の問い合わせ（非構造化）
//
//		仕  様
//		指定された部品の機能図形を得る。
//		指定機能番号に図形がない場合は０が返る。
//
//		機能番号については、別紙参照
//
static MINT	GetZukei(
						MDID		i_idBhn,	// 部品Id
						MDID		i_iBfn,		// 機能番号
						MDID*		o_piZDpr	// 図形Dpr
				);

//===========================================================================
//		機能図形の削除（非構造化）
//
//		仕  様
//		指定された部品の機能図形と部品の関係を切る。
//		削除フラグが１の場合は、その図形を削除する。
//		変更した部品を参照している物の再描画していません。
//		再描画が必要な場合は　Refresh( ･･･ )　を呼んで下さい。
//
//		機能番号については、別紙参照
//
static MINT	RemoveZukei(
						MDID		i_idBhn,	// 部品Id
						MDID		i_iBfn,		// 機能番号
						MINT		i_ifDel		// 削除フラグ
												//	0:指定した機能図形を部品から関係切りするのみ
												//	1:指定した機能図形を部品から関係切り削除する
				);

//===========================================================================
//		構造化部品構成要素の追加登録
//
//		仕  様
//		指定された構造化部品の構成要素としてエンティティを追加登録する。
//		図形は、指定された座標変換テーブルで変換して部品として登録する。
//		変更した部品を参照している物の再描画していません。
//		再描画が必要な場合は　Refresh( ･･･ )　を呼んで下さい。
//
//		※追加登録するエンティティセットに以下のものを含めてはいけない。
//		　　　通り芯
//		　　　メモ
//		　　　工程と関連付いたエンティティ
//		　　　第１引数で渡した部品を参照するエンティティ
//		　これらを含めたリストを渡した時の動作は保障しない。
//
static MINT	AddEnt(
						MDID		i_idBhn,	// 部品Id
						MDIDSET&	i_GidEnt,	// 追加登録するエンティティセット
						MINT		i_mdAdd,	// 追加モード
												//　0:指定されたエンティティは残る
												//	1:指定されたエンティティは残らない
						MgMat3E*		i_matCng	// 変換する座標テーブル
				);

//===========================================================================
//		構造化部品構成要素の問い合わせ
//
//		指定された構造化部品を構成する要素であるエンティティを得る。
//
static MINT	GetEnt(
						MDID		i_idBhn,	// 部品Id
						MDIDSET*	o_pGidEnt	// 部品を構成するエンティティセット
				);

//===========================================================================
//		ミニ部品の削除（構造化）
//
//		仕  様
//		指定された構造化部品の構成要素と部品の関係を切る。
//		削除フラグが１の場合は、その構成要素を削除する。
//
//		変更した部品を参照している物の再描画していません。
//		再描画が必要な場合は　Refresh( ･･･ )　を呼んで下さい。
//
static MINT	RemovePart(
						MDID		i_idBhn,	// 部品Id
						MDIDSET&	i_GidEnt,	// 削除する部品を構成するエンティティセット
						MINT		i_ifDel		// 削除フラグ
												//	0:指定したエンティティを部品から関係切りするのみ
												//	1:指定したエンティティを部品から関係切り削除する
				);

//===========================================================================
//		部品化（チェックなし）
//
//		仕  様
//		指定されたエンティティリストから、部品を作成する。
//		図形は、指定された座標変換テーブルで変換して部品として登録する。
//		指定されたエンティティは、登録時の置き換えモードがONになっていれば、
//		カレントレイヤーの部品参照に変更する。
//		※エンティティリストに以下のものを含めてはいけない。
//		　　　通り芯
//		　　　メモ
//		　　　工程と関連付いた物
//		　　　第１引数で渡した部品を参照するエンティティ
//		　これらを含めたリストを渡した時の動作は保障しない。
//
//		機能番号については、別紙参照
//
static MINT	Pack(
						MDID		i_idBhn,	// 部品Id
						MINT		i_ifStrct,	// フラグ　0:構造化　1:非構造化
						MDID		i_idFn,		// 機能番号（flg=0の時は無効）
						MDID&		i_idEnt,	// 部品化するエンティティリスト
						MgMat3E&		i_matCng	// 変換する座標テーブル
				);

//===========================================================================
//		登録時の置き換えフラグの問い合わせ
//
//		仕  様
//		部品化（部品の登録）時の置き換えフラグの問い合わせ。
//
static MINT	GetReplaceFlg();						// 置き換えフラグ
												//	0:そのまま
												//	1:部品参照エンティティに置き換え

//===========================================================================
//		登録時の置き換えフラグの設定
//
//		仕  様
//		部品化（部品の登録）時の置き換えフラグを設定する。
//
static MINT	SetReplaceFlg(
						MINT		i_ifRep		// 置き換えフラグ
												//　0:そのまま
												//	1:部品参照エンティティに置き換え

				);

//===========================================================================
//		実体化
//
//		仕  様
//		指定された点部材Dprを実体化する。（部品の分解）
//
//		生成されたエンティティリストについては、表示していません。
//		必要があれば、MEnt::CmdAfterCreate() を呼んで表示して下さい。
//
static MINT	UnPack(
						MINT		i_ifRep,	// 点部材Dpr
						MDIDSET*	o_pGidEnt	// 生成されたエンティティリスト
												//　0:そのまま
												//　1:部品参照エンティティに置き換え
				);

//===========================================================================
//		部品の分類を変更する（ミニ部品）
//
//		仕  様
//		指定された部品の分類を指定された分類に変更する。
//
static MINT	ChangeClass(
						MDID		i_idBh,		// 部品Id
						MDID		i_idBr		// 分類Id
				);

//===========================================================================
//		部品の分類を変更する（汎用部品）
//
//		仕  様
//		指定された部品の分類を指定された分類に変更する。
//
static MINT	ChangeClassOuter(
						MDID		i_idBh,		// 部品Id
						MDID		i_idBr		// 分類Id
				);

//===========================================================================
//		ミニ−＞汎用部品の複写
//
//		仕  様
//		指定されたミニ部品を汎用部品にコピーする。
//
//		あらかじめRegPartOuterで作成した汎用部品Idを指定すると、指定されたミニ部品以下の
//		構造を複写する。
//		bker2=0にすると、指定したミニ部品と同じ分類名、部品名の汎用部品Idを複写して返す。
//
static MINT	CopyToOuter(
						MDID		i_idBh,		// 複写元ミニ部品Id
						MDID		io_idOBh	// 複写された汎用部品Id
				);

//===========================================================================
//		汎用−＞ミニ部品の複写
//
//		仕  様
//		指定された汎用部品をミニ部品にコピーする。
//
//		あらかじめRegPartで作成したミニ部品Idを指定すると、指定された汎用部品以下の構造を複写する。
//		bker2=0にすると、指定した汎用部品と同じ分類名、部品名のミニ部品Idを複写して返す。
//
static MINT	CopyToInner(
						MDID		i_idOBh,	// 複写元汎用部品Id
						MDID		io_idBh		// 複写されたミニ部品Id
				);

//===========================================================================
//		分類の一覧を得る（ミニ部品）
//
//		仕  様
//		分類の一覧を得る。
//
static MINT	GetClassList(
						MDIDSET*	o_pGidBr	// 分類Idセット
				);

//===========================================================================
//		分類の一覧を得る（汎用部品）
//
//		仕  様
//		分類の一覧を得る。
//
static MINT	GetClassListOuter(
						MDIDSET*	o_pGidBr	// 分類Idセット
				);

//===========================================================================
//		部品の一覧を得る（ミニ部品）
//
//		仕  様
//		分類Idを指定して、それに属する部品Idの一覧を得る。
//
static MINT	GetPartList(
						MDID		i_idBr,		// 分類Id
						MDIDSET*	o_pGidBh	// 部品Idセット
				);

//===========================================================================
//		部品の一覧を得る（汎用部品）
//
//		仕  様
//		分類Idを指定して、それに属する部品Idの一覧を得る。
//
static MINT	GetPartListOuter(
						MDID		i_idBr,		// 分類Id
						MDIDSET*	o_pGidBh	// 部品Idセット
				);

//===========================================================================
//		部品から分類を得る（ミニ部品）
//
//		仕  様
//		部品Idを指定してその部品が属する分類を得る。
//		指定された部品Idが不正な場合は０が返る。
//
static MINT	GetClass(
						MDID		i_idBh,		// 部品Id
						MDID*		o_pidBr		// 分類Id
												//（部品Idが不正な場合は０が返る）
				);

//===========================================================================
//		部品から分類を得る（汎用部品）
//
//		仕  様
//		部品Idを指定してその部品が属する分類を得る。
//		指定された部品Idが不正な場合は０が返る。
//
static MINT	GetClassOuter(
						MDID		i_idBh,		// 部品Id
						MDID*		o_pidBr		// 分類Id
												//（部品Idが不正な場合は０が返る）
				);

//===========================================================================
//		指定された部品を参照する実体一覧を得る
//
static MINT	GetOwnerList(
						MDID		i_idBh,		// 部品Id
						MDID*		o_pidBhU	// 部品を参照する実体Id
				);

//===========================================================================
//		指定されたIdが部品Idかを調べる
//
static MINT	CheckPart(
						MDID		i_idBh,		// 部品Id
						MINT*		o_piCond	// コンディション
												//	0:部品ではない
												//	1:部品
				);

//===========================================================================
//		指定されたIdが部品参照Idかを調べる
//
static MINT	CheckPartPlc(
						MDID		i_idBh,		// 部品Id
						MINT*		o_piCond	// コンディション
												//	0:部品参照ではない
												//	1:部品参照
				);

//===========================================================================
//		指定した部品を参照しているIdの再描
//
static MINT	Refresh(
						MDID		i_idBh		// 部品Id
				);

//===========================================================================
//		点部材の図形情報より機能図形を取り出す
//
//		点部材の図形情報から指定された機能番号の図形情報を取り出す。
//
static MINT	ConvPartZukei(
						MDFIG&		i_stFig,		// 点部材図形情報
						MDID		i_ifFn,		// 機能番号
						MDFIG*		o_pFig		// 機能図形情報
				);

};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DDspCt.h
//
//		ディスプレイ制御
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DDSPCT_DO
	#pragma message( "<<< DDspCt・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DDspCt・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DDspCt
{
public:
//===========================================================================
//		テンポラリ表示
//
//		指定された図形情報のテンポラリ表示を行う。
//
static MINT	DispTemp(
						MINT		i_ifPick,		// ピック可能フラグ
													//	0:ピックなし
													//	1:ピックあり
						MDID		i_idWin,		// 表示するウィンドウ
													//	0:全てのウィンドウ
													//	0以外:ウィンドウID
						MDFIG&		i_stFig,			// 図形情報
						MDID*		o_pidDisp		// 表示ＩＤ
				);

//===========================================================================
//		テンポラリ表示削除
//
//		指定されたテンポラリ表示を削除する。
//
static MINT EraseTemp(
						MDIDSET i_GidDisp//表示ＩＤセット
				);

//===========================================================================
//		ラバーバンドの表示
//
//		指定された図形情報のラバーバンド表示を行う。
//
//		ラバーバンド表示は、XORで表示を行う。
//		そのため、指定する図形情報の中で重なる線分があると（ウィンドウの視点から見た場合）
//		その線分が消えてしまう。
//		そのような図形情報をラバーバンド表示する場合は、重複チェックありを指定する必要が
//		ある。
//		ラバーバンド表示は、ワイヤーフレームによる表示のみで塗り潰しは不可。
//
static MINT	DispRubberband(
						MDIDSET&		i_GidDisp,	// フラグ
												//	0:重複チェックなし
												//	1:重複チェックあり
						MDID		i_idWin,	// 表示するウィンドウ
												//	0:全てのウィンドウ
												//	0以外:ウィンドウID
						MDFIG&		i_stFig,		// 図形情報
						MDID*		o_pidDisp	// 表示ＩＤ
				);

//===========================================================================
//		ラバーバンドの表示削除
//
//		指定された図形情報のラバーバンド表示を行う。
//
//		指定されたラバーバンド表示を削除する。
//
static MINT	EraseRubberband(
						MDID		i_idDisp	// 表示ＩＤ
				);

//===========================================================================
//		ラバーバンド遅延モードの問い合わせ
//
//		ラバーバンド遅延モードを問い合わせる。
//		ラバーバンド表示する場合には下記のように遅延モードを設定すること。
//
//		ex)
//
//		mode = DispControl:: GetRubberbandDelayMode(  )  // 遅延モードの問い合わせ
//
//		　while（・・）{
//		　if( mode == 0 ) DispControl:: SetRubberbandDelayMode( 1 )  // 遅延モード=ON
//		  Inp::PointSnap( ・・・)
//		　DispControl:: DispRubberband(・・・)  // ラバーバンドの表示
//		　if( mode == 0 ) DispControl:: SetRubberbandDelayMode( 0 )  // 遅延モード=OFF
//
//		 }
//
static MINT	GetRubberbandDelayMode();			// 遅延モード
												//	0:off
												//　1:on

//===========================================================================
//		ラバーバンド遅延モードの設定
//
//		ラバーバンド遅延モードを設定する。
//
static MINT	SetRubberbandDelayMode(
						MDID		i_idDisp	// 表示ＩＤ
				);

//===========================================================================
//		表示図形の取り出し
//
//		指定されたウィンドウに表示されているＤｐｒの図形を
//		そのウィンドウの視点系での座標値で得る。（２次元）
//
static MINT	GetViewZukei(
						MDIDSET&	i_pGidDisp,	// ウィンドウＩＤ
						MDID		i_idDpr,	// 図形DPR
						MDFIG*		o_pFig		// 図形情報
				);

//===========================================================================
//		物の表示のON/OFFを設定する
//
//		指定されたウィンドウに表示されている図形Ｄｐｒの表示ＯＮ／ＯＦＦを設定する。
//
//		　この関数ではＯＮ／ＯＦＦを設定するだけなので、画面に反映したい場合は、
//		　Window::Refresh　を呼ぶ必要がある。
//
//		※注意
//		現状の「あ！動く図面」の窓、扉以外のレイヤーでは、アクソメ、透視図、立面等の
//		3次元ウィンドウの表示情報を共有にしている。そのため上記レイヤーを３次元ウィンドウに
//		指定すると、３次元ウィンドウ全て共通に作用する。
//
static MINT	SetDprDispMode(
						MDID		i_idWin,	// ウィンドウId
						MDID		i_idLyr,	// レイヤーId
						MDID		i_idDpr,	// 図形Dpr
						MINT		i_ifDisp	// 表示フラグ
												//　0:表示OFF
												//　1:表示ON
				);

//===========================================================================
//		ウィンドウ範囲に含まれるレイヤー一覧を得る
//
//		指定されたウィンドウ範囲に含まれる表示されている物のレイヤー一覧を得る。
//
//		※ウィンドウ範囲より若干大きめの範囲を保持しているため、実際の表示されている物より
//		多めのリストが返ることがある。
//
//		※表示されている物（Dpr）はこの関数で得られたレイヤーを指定して、
//		GetDprList　から得る。
//
static MINT	GetLyrList(
						MDID		i_idWin,	// ウィンドウＩＤ
						MDIDSET*	o_pGidLyr	// レイヤーId
				);

//===========================================================================
//		ウィンドウ範囲に含まれる物一覧を得る
//
//		指定されたウィンドウ範囲に含まれ、指定されたレイヤーに属する、
//		表示されている物の一覧を得る。
//
//		※ウィンドウ範囲より若干大きめの範囲を保持しているため、
//		実際の表示されている物より多めのリストが返ることがある。
//
//		※指定するレイヤーは、GetLyrList　から得る。
//
static MINT	GetDprList(
						MDID		i_idWin,	// ウィンドウＩＤ
						MDID		i_idLyr,	// レイヤーId
						MDFIG*		o_pFig		// 図形Dpr

				);

//===========================================================================
//		指定図形の視点系でのＢＯＸ情報を得る
//
//		指定されたウィンドウでの図形DprのBOXを得る。
//
static MINT	GetBoxDpr(
						MDID		i_idWin,	// ウィンドウＩＤ
						MDID		i_idLyr,	// レイヤーId
						MDFIG*		o_pFig,		// 図形Dpr
						MgRect3*	o_pRect		// BOX（左下点、右上点）
												// （指定されたウィンドウの視点座標系での座標値）
				);

//===========================================================================
//		指定されたウィンドウの表示物全体の視点系でのＢＯＸを得る
//
//		指定されたウィンドウでの図形DprのBOXを得る。
//
static MINT	GetBoxAllDpr(
						MDID		i_idWin,	// ウィンドウＩＤ
						MgRect3*	o_pRect		// BOX（左下点、右上点）
												// （指定されたウィンドウの視点座標系での座標値）
				);

};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DExIo.h
//
//		外部IO
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DEXIO_DO
	#pragma message( "<<< DExIO・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DExIO・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DExIO
{
public:
//===========================================================================
//		DXF入力処理
//
//		指定されたファイル名のDXFファイルを入力する。
//
//		flenを０で渡すと本関数内でDXFファイル名を問い合わせる。（コモンダイアログ表示）
//
static MINT	DxfIn(
						MCHAR*		i_sFName		// DXFファイル名　または　０
				);

//===========================================================================
//		DXF出力処理
//
//		指定されたファイル名でDXFファイルを出力する。
//
//		flenを０で渡すと本関数内でADFファイル名を問い合わせる。（コモンダイアログ表示）
//
static MINT	DxfOut(
						MCHAR*		i_sFName		// DXFファイル名　または　０
				);

//===========================================================================
//		DXF入力パラメータを参照する
//
//		※　ival値について
//		mode＝1
//			ival: 0: ミリメートル、1: インチ、2: メートル
//		mode＝2
//			ival: 0: 閉じた線分を面にする、1: 閉じた線分は線にする
//		mode＝3
//			ival: 0: 複合図形を部品登録する、1: 複合図形を部品登録しない
//		mode＝4
//			ival: 1: TrueTypeフォントで表示、2: ベクターフォントで表示
//		mode＝5
//			ival: 0: 多面化しない、1: 多面化する
//		mode＝6
//			ival: 0: 256色、 1: 16色、 2: 8色
//
static MINT	GetDxfInParamLong(
						MINT		i_mdPar,		// パラメータの種類
													//	1:入力時単位の設定
													//	2:閉じた線分の設定
													//	3:複合図形の設定
													//	4:文字の種類
													//	5:隣り合う面の設定
													//	6:色数の設定
						MINT*		o_iPar			//	パラメータ値（modeによって異なる）
				);

//===========================================================================
//		DXF入力パラメータを設定する
//
//		※　ival値について
//		mode＝1
//			ival: 0: ミリメートル、1: インチ、2: メートル
//		mode＝2
//			ival: 0: 閉じた線分を面にする、1: 閉じた線分は線にする
//		mode＝3
//			ival: 0: 複合図形を部品登録する、1: 複合図形を部品登録しない
//		mode＝4
//			ival: 1: TrueTypeフォントで表示、2: ベクターフォントで表示
//		mode＝5
//			ival: 0: 多面化しない、1: 多面化する
//		mode＝6
//			ival: 0: 256色、 1: 16色、 2: 8色
//
static MINT	SetDxfInParamLong(
						MINT		i_mdPar,		// パラメータの種類
													//	1:入力時単位の設定
													//	2:閉じた線分の設定
													//	3:複合図形の設定
													//	4:文字の種類
													//	5:隣り合う面の設定
													//	6:色数の設定
						MINT		i_iPar			//	パラメータ値（modeによって異なる）
				);

//===========================================================================
//		DXF入力パラメータを設定する
//
//		※　ival値について
//		mode＝1
//			i_PtVal : MgPoint3	相対座標値を格納
//		DXF内の座標値にop[3]を足し算した結果で、取り込まれることになる。
//
static MINT	SetDxfInParamDoubleP(
						MINT		i_mdPar,		// パラメータの種類
													//	1:入力時単位の設定
						MgPoint3	i_PtVal			// パラメータ値（modeによって異なる）
				);

//===========================================================================
//		DXF出力パラメータを参照する
//
//		※　ival値について
//		mode＝1
//			ival: 0: ミリメートル、1: インチ、2: メートル
//		mode＝2の場合
//			ival: 0: 面を面として出力、 1: 面を線として出力
//		mode＝3の場合
//			ival: 0: 寸法線を寸法線として出力、1: 寸法線を要素分解して出力
//		mode＝4
//			ival: 0: 複合図形を出力しない、1: 部品を複合図形で出力、2: 全図形を複合図形として出力
//		mode＝5
//			ival: 0: テクスチャ名をレイヤ名としない、 1: テクスチャ名をレイヤ名とする
//
static MINT	GetDxfOutParamLong(
						MINT		i_mdPar,		// パラメータの種類
													//	1:出力時単位の設定
													//	2:面の設定
													//	3:寸法線の設定
													//	4:複合図形の設定
													//	5:テクスチャ図形の出力
						MINT*		o_iPar			//	パラメータ値（modeによって異なる）
				);

//===========================================================================
//		DXF出力パラメータを設定する
//
//		※　ival値について
//		mode＝1
//			ival: 0: ミリメートル、1: インチ、2: メートル
//		mode＝2の場合
//			ival: 0: 面を面として出力、 1: 面を線として出力
//		mode＝3の場合
//			ival: 0: 寸法線を寸法線として出力、1: 寸法線を要素分解して出力
//		mode＝4
//			ival: 0: 複合図形を出力しない、1: 部品を複合図形で出力、2: 全図形を複合図形として出力
//		mode＝5
//			ival: 0: テクスチャ名をレイヤ名としない、 1: テクスチャ名をレイヤ名とする
//
static MINT	SetDxfOutParamLong(
						MINT		i_mdPar,		// パラメータの種類
													//	1:出力時単位の設定
													//	2:面の設定
													//	3:寸法線の設定
													//	4:複合図形の設定
													//	5:テクスチャ図形の出力
						MINT		i_iPar			//	パラメータ値（modeによって異なる）
				);

//===========================================================================
//		JWW入力処理
//
//		指定されたファイル名のJWWファイルを入力する。
//
//		flenを０で渡すと本関数内で入力するファイル名を問い合わせる。（コモンダイアログ表示）
//
static MINT	JwwIn(
						MCHAR*		i_sFNameDxf	// DXFファイル名　または　０
				);

//===========================================================================
//		JWW入力パラメータを参照する
//
//		※　ival値について
//		mode＝1
//			ival : 0 : 立面図を起こさない、1 : 立面図を起こす
//		mode＝2
//			ival : 0 : JWWに背景色を合わせる、1 : JWWに背景色を合わせない
//		mode＝3
//			ival : 0 : ワイヤーで表示する、1 : 面で表示する、2 : 面とエッジで表示
//
static MINT	GetJwwInParamLong(
						MINT		i_mdPar,		// パラメータの種類
													//	1:起こし絵の設定
													//	2:背景色の設定
													//	3:管の表示設定
						MINT*		o_iPar			//	パラメータ値（modeによって異なる）
				);

//===========================================================================
//		JWW入力パラメータを設定する
//
//		※　ival値について
//		mode＝1
//			ival : 0 : 立面図を起こさない、1 : 立面図を起こす
//		mode＝2
//			ival : 0 : JWWに背景色を合わせる、1 : JWWに背景色を合わせない
//		mode＝3
//			ival : 0 : ワイヤーで表示する、1 : 面で表示する、2 : 面とエッジで表示
//
static MINT	SetJwwInParamLong(
						MINT		i_mdPar,		// パラメータの種類
													//	1:起こし絵の設定
													//	2:背景色の設定
													//	3:管の表示設定
						MINT		i_iPar			//	パラメータ値（modeによって異なる）
				);

//===========================================================================
//		ADF入力処理
//
//		指定されたファイル名のADFファイルを入力する。
//
//		flenを０で渡すと本関数内で入力するファイル名を問い合わせる。（コモンダイアログ表示）
//
static MINT	ADFIn(
						MCHAR*		i_sFNameAdf	// ADFファイル名　または　０
						);

//===========================================================================
//		ADF出力処理
//
//		指定されたファイル名でADFファイルを出力する。
//
//		flenを０で渡すと本関数内でADFファイル名を問い合わせる。（コモンダイアログ表示）
//
static MINT	ADFOut(
						MCHAR*		i_sFNameAdf	// ADFファイル名　または　０
				);

//===========================================================================
//		Pov-Rayファイルを作成する
//
//		ウィンドウIDに表示されているすべての物をそのウィンドウの視点で、Pov-Rayファイルに出力する。
//
//		flenを０で渡すと本関数内で入力するファイル名を問い合わせる。（コモンダイアログ表示）
//
static MINT	PovRayOut(
						MINT		i_idWin,		// ウィンドウID
						MCHAR*		i_sFnamePov	// Pov-Rayファイル名　または　０
				);

//===========================================================================
//		Pov-Rayを起動しイメージファイルを作成する
//
//		Pov-Rayを起動して、指定されたPov-Rayファイル名のイメージファイルを作成する。
//
static MINT	PovRayExecute(
						MCHAR*		i_sFNamePov,	// Pov-Rayファイル名
						MCHAR*		i_sFNameImg	// イメージファイル名

				);

//===========================================================================
//		Pov-Ray出力パラメータを参照する
//
//		※　mode＝3のival値について
//		ival : 0 〜　１１　(大きくなるほどきれいになる。)
//
static MINT	GetPovRayOutParamLong(
						MINT		i_mdPar,		// パラメータの種類
													//	1:出力イメージの幅
													//	2:出力イメージの高さ
													//	3:クォリティ設定
						MINT*		o_iPar			// パラメータ値（modeによって異なる）
				);

//===========================================================================
//		Pov-Ray出力パラメータを設定する
//
//		※　mode＝3のival値について
//		ival : 0 〜　１１　(大きくなるほどきれいになる。)
//
static MINT	SetPovRayOutParamLong(
						MINT		i_mdPar,		// パラメータの種類
													//	1:出力イメージの幅
													//	2:出力イメージの高さ
													//	3:クォリティ設定
						MINT		i_iPar			//	パラメータ値（modeによって異なる）
				);

};

//===========================================================================
//		モデルへのポインタを得る
//
MdModel* MdGetIeModel();							// 家モデルへのポインタ

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DGrp.h
//
//		グループ
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DGRP_DO
	#pragma message( "<<< DGrp・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DGrp・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DGrp
{
public:
//===========================================================================
//		グループの生成
//
static MINT	CreateGrp(							//
						MCHAR		i_sName[],	// グループ名
						MREAL		i_rKt,		// 階高さ
						MREAL		i_rFl,		// 床高さ
						MDID*		o_pidGrp,	// グループId
						MINT		i_sz		// 初期グループIdバッファサイズ /*=10*/
				);

//===========================================================================
//		グループの削除
//
static MINT	DeleteGrp(								//
						MDID		i_idGrp		// グループId
				);

//===========================================================================
//		グループの階高とFLの問い合わせ
//
static MINT	GetGrpParam(
						MDID		i_idGrp,	// グループId
						MREAL*		o_prKt,		// 階高さ
						MREAL*		o_prFl		// 床高さ
				);

//===========================================================================
//		グループの階高とFLを設定
//
static MINT	SetGrpParam(
						MDID		i_idGrp,	// グループId
						MREAL		i_rKt,		// 階高さ
						MREAL		i_rFl		// 床高さ
				);

//===========================================================================
//		カレントグループIdを得る
//
static MDID	GetCurGrpId();

//===========================================================================
//		カレントグループIdを設定する
//
static MDID	SetCurGrpId(
						MDID		i_idGrp		// グループId
				);

//===========================================================================
//		グループIdのグループ名を得る
//
static MINT	GetGrpNameFromId(
						MDID		i_idGrp,	// グループId
						MCHAR*		o_sGName,	// グループ名
						int			i_nGName	// グループ名最大文字数
				);

//===========================================================================
//	xx	グループIdのグループ名を設定する
//
static MINT	SetGrpNameFromId(
						MDID		i_idGrp,	// グループId
						int			i_nGName,	// グループ名最大文字数
						MCHAR*		i_sGName	// グループ名
				);

//===========================================================================
//		グループ名よりグループIdを得る
//
static MINT	GetGrpIdFromName(
						MCHAR*		i_sName,	// グループ名
						MDID*		o_pidGrp	// グループId
				);

//===========================================================================
//		グループ数を得る
//
static MINT	GetGrpCount();

//===========================================================================
//		全グループIdのセットを得る
//

static MINT	GetGrpIdAll(
//						MdGrpS<MINT>	*m_pGidGrp	// グループIdセット
						MDIDSET*		o_pGidGrp	// グループIdセット
				);

//===========================================================================
//		スキーマの生成
//
static MINT	CreateScm(							//
						MCHAR		i_sName[],	// レイヤー名
						MDID*		o_pidLyr,	// スキーマId
						MINT		i_sz		// 初期スキーマIdバッファサイズ /*=10*/
				);

//===========================================================================
//		スキーマの削除
//
static MINT	DeleteScm(							//
						MDID		i_idScm		// スキーマId
				);

//===========================================================================
//		カレントスキーマIdを得る
//
static MDID	GetCurScmId();

//===========================================================================
//		カレントスキーマIdを設定する
//
static MDID	SetCurScmId(
						MDID		i_idLyr		// スキーマId
				);

//===========================================================================
//		スキーマIdのレイヤー名を得る
//
static MINT	GetScmNameFromId(
						MDID		i_idLyr,	// スキーマId
						MCHAR*		o_sLName,	// レイヤー名
						int			i_nLName	// レイヤー名最大文字数
				);

//===========================================================================
//	xx	スキーマIdのレイヤー名を設定する
//
static MINT	SetScmNameFromId(
						MDID		i_idLyr,	// スキーマId
						int			i_nLName,	// レイヤー名最大文字数				)
						MCHAR*		i_psName	// レイヤー名
				);

//===========================================================================
//		レイヤー名よりスキーマIdを得る
//
static MINT	GetScmIdFromName(
						MCHAR*		i_sName,	// レイヤー名
						MDID*		o_pidLyr	// スキーマId
				);

//===========================================================================
//		スキーマ数を得る
//
static MINT	GetScmCount();


//===========================================================================
//		全スキーマIdのセットを得る
//

static MINT GetScmIdAll (
//						MdGrpS<MINT>*	o_pGidScm	// スキーマIdセット
						MDIDSET*		o_pGidScm	// スキーマIdセット
				);

};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DHyo.h
//
//		レイヤー
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DHYO_DO
	#pragma message( "<<< DHyo・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DHyo・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DHyo
{
public:
//===========================================================================
//		ウィンドウの定義
//
//		ウィンドウの定義を行う。
//		座標値は管面の左上を原点とした値を指定する。（X,Y共に右下へ向かって＋方向）
//		既存（オープン中の）ウィンドウに対しては、即座に設定値は反映されない。
//		次回オープン時から有効になる。
//
static MINT	DefWindow(
						MDID		i_idHyo,	// 表NO
						CPoint		i_ptSt,		// 始点
						CPoint		i_ptSz		// 大きさ
				);

//===========================================================================
//		ウィンドウ定義のクリア
//
//		ウィンドウの定義を削除する
//		表NO上に存在する全ての定義がクリアされます。
//
static MINT	ClearDefWindow(
						MDID		i_idHyo		// 表NO
				);

//===========================================================================
//		ウィンドウ位置・大きさの問い合わせ
//
//		表NOに対する位置・大きさの問い合わせ。
//		（DefWindowで定義された位置・大きさが返る。）
//
//		※注意
//		通常、ウィンドウ位置・大きさは、GetWindowPosで得ることができる。
//		但し、ユーザにより、表がリサイズされた場合
//		実際の大きさと、GetWindowPosで得られる大きさが異なることがある。
//		このような場合に、GetPhysicalWindowPosを使用して実際のサイズを得る。
//		表がリサイズされた場合は、GetPhysicalWindowPosでサイズを得たら、
//		そのサイズをDefWindowで再定義しておく必要がある。
//
static MINT	GetWindowPos(
						MDID		i_idHyo,	// 表NO
						CPoint*		o_ptSt,		// 始点
						CPoint*		o_ptSz		// 大きさ
				);

//===========================================================================
//		物理ウィンドウ位置・大きさの問い合わせ
//
//		表NOに対する、実際の位置・大きさの問い合わせ。
//
//		※注意
//		通常、ウィンドウ位置・大きさは、GetWindowPosで得ることができる。
//		但し、ユーザにより、表がリサイズされた場合
//		実際の大きさと、GetWindowPosで得られる大きさが異なることがある。
//		このような場合に、GetPhysicalWindowPosを使用して実際のサイズを得る。
//		表がリサイズされた場合は、GetPhysicalWindowPosでサイズを得たら、
//		そのサイズをDefWindowで再定義しておく必要がある。
//
static MINT	PointPickSnap(
						MDID		i_idHyo,	// 表NO
						CPoint*		o_ptSt,		// 始点
						CPoint*		o_ptSz		// 大きさ
				);

//===========================================================================
//		ウィンドウタイプの設定
//
//		表タイプ一覧
//		1:アプリケーションウィンドウ      （システム用。ユーザー使用不可）
//		2:ウィンドウ                      （システム用。ユーザー使用不可）
//		3:表１        移動なし,ﾎﾞﾀﾝUPなし
//		4:表２        移動なし,ﾎﾞﾀﾝUPあり
//		5:表３        移動あり,ﾎﾞﾀﾝUPなし
//		6:表４        移動あり,ﾎﾞﾀﾝUPあり
//		7:メニュー                        （システム用。ユーザー使用不可）
//
static MINT	DefWindowType(
						MDID		i_idHyo,	// 表NO
						MINT		i_iTp,		// 表タイプ（１〜７）下記参照
						MINT		i_iRs,		// サイズ変更フラグ（０:なし／１：あり）
						MINT		i_iTt,		// タイトルフラグ（０:なし／１：あり）
						MINT		i_iIc,		// アイコン化フラグ（０:なし／１：あり）
						MINT		i_iMx		// 最大化フラグ（０:なし／１：あり）
				);

//===========================================================================
//		ウィンドウタイプの問い合わせ
//
//		表タイプ一覧
//		1:アプリケーションウィンドウ      （システム用。ユーザー使用不可）
//		2:ウィンドウ                      （システム用。ユーザー使用不可）
//		3:表１        移動なし,ﾎﾞﾀﾝUPなし
//		4:表２        移動なし,ﾎﾞﾀﾝUPあり
//		5:表３        移動あり,ﾎﾞﾀﾝUPなし
//		6:表４        移動あり,ﾎﾞﾀﾝUPあり
//		7:メニュー                        （システム用。ユーザー使用不可）
//
static MINT	GetWindowType(
						MDID		i_idHyo,	// 表NO
						MINT*		o_piTp,		// 表タイプ（１〜７）下記参照
						MINT*		o_piRs,		// サイズ変更フラグ（０:なし／１：あり）
						MINT*		o_piTt,		// タイトルフラグ（０:なし／１：あり）
						MINT*		o_piIc,		// アイコン化フラグ（０:なし／１：あり）
						MINT*		o_piMx		// 最大化フラグ（０:なし／１：あり）
				);

//===========================================================================
//		ウィンドウタイトル文字列の定義
//
static MINT	DefWindowTitle(
						MDID		i_idHyo,	// 表NO
						MCHAR		i_sTtl[]	// タイトル文字列バッファ
				);

//===========================================================================
//		ウィンドウタイトル文字列の問い合わせ
//
static MINT	GetWindowTitle(
						MDID		i_idHyo,	// 表NO
						MCHAR		o_sTtl[],	// タイトル文字列バッファ
						MINT		i_nTtl		// タイトル文字列バッファサイズ
				);

//===========================================================================
//		サブウィンドウの定義
//
//		サブウィンドウの定義を行う。
//		座標値はウィンドウの左上を原点とした値を指定する。（X,Y共に右下へ向かって＋方向）
//		既存（オープン中の）ウィンドウに対しては、即座に設定値は反映されない。
//		次回オープン時から有効になる。
//
//		サブウィンドウタイプについて
//			１：キャンバスタイプ
//		Fieldを貼り付けることができる。
//		ウィンドウズのアイテムは貼り付けることができない。
//			２：パネルタイプ
//		Fieldを貼り付けることができない。
//		ウィンドウズのアイテムは貼り付けることができる
//
static MINT	DefSubWindow(
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_iTpSWin,	// サブウィンドウタイプ（1:キャンバス 2:パネル）
						CPoint		i_ptSt,		// サブウィンドウ始点
						CPoint		i_ptSz		// サブウィンドウの大きさ
				);

//===========================================================================
//		サブウィンドウ定義のクリア
//
//		サブウィンドウNO以下の定義データも全てクリアする
//
static MINT	ClearDefSubWindow(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin	// サブウィンドウNO
				);

//===========================================================================
//		サブウィンドウ位置・大きさの問い合わせす
//
static MINT	GetSubWindowPos(
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_iTpSWin,	// サブウィンドウタイプ（1:キャンバス 2:パネル）
						CPoint*		o_pptSt,	// サブウィンドウ始点
						CPoint*		o_pptSz		// サブウィンドウの大きさ
				);

//===========================================================================
//		サブウィンドウにカラーマップ名を定義
//
//		サブウィンドウにカラーマップを定義する。
//		カラーマップを指定することにより、パレット番号による色指定が可能になる。
//
static MINT	GetKey(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MCHAR		i_sColMap[]	// カラーマップ名
				);

//===========================================================================
//		サブウィンドウのカラーマップ名を得る
//
static MINT	SetMouseMoveEventFlg(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MCHAR		o_sColMap[],// カラーマップ名
						MINT		i_szColMap	// カラーマップ名バッファサイズ
				);

//===========================================================================
//		サブウィンドウに背景色コードを定義
//
//		色コードはカラーマップ名のパレットのインデックスを設定する。
//
static MINT	GetMouseUpEventFlg(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_icdCol	// 色コード
				);

//===========================================================================
//		サブウィンドウの背景色コードを得る
//
//		色コードはカラーマップ名のパレットのインデックスが得られる。
//
static MINT	GetSubWindowBackColor(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT*		o_picdCol	// 色コード
				);

//===========================================================================
//		サブウィンドウに罫線を定義
//
//		サブウィンドウに対して線を引く定義を行う。
//		サブウィンドウの左上を原点とした座標値で指定する。
//
//		線種については、別紙「線種一覧」を参照。
//
static MINT	DefSubWindowLine(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						CPoint		i_iptSt,	// 罫線始点
						CPoint		i_iptEn,	// 罫線終点
						MINT		i_iLW,		// 線幅（ピクセル値）
						MINT		i_iLTp,		// 線種
						MINT		i_iLN,		// 本数
						MINT		i_iLSpn,	// 間隔
						MINT		i_iLCol		// 色コード
				);

//===========================================================================
//		罫線データの問い合わせ
//
//		サブウィンドウに定義されている罫線データの全てを得る。
//		バッファは1つの罫線でlong[10]必要
//
//		[0]  /* 罫線開始線始点（Ｘ） */
//		[1]  /* 罫線開始線始点（Ｙ） */
//		[2]  /* 罫線開始線終点（Ｘ） */
//		[3]  /* 罫線開始線終点（Ｙ） */
//		[4]  /* 線種コード */
//		[5]  /* 線幅（ピクセル値） */
//		[6]  /* 本数 */
//		[7]  /* 間隔（Ｙ） */
//		[8]  /* 間隔（Ｘ） */
//		[9]  /* カラーコード */
//
//		線種については、別紙「線種一覧」を参照。
//
static MINT	GetSubWindowLine(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MgGInt		o_iDt		// 罫線データバッファ
				);

//===========================================================================
//		サブウィンドウに初期表示文字列を定義
//
//		サブウィンドウに対して文字を描く定義を行う。
//		サブウィンドウの左上を原点とした座標値で指定する。
//
static MINT	DefSubWindowText(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						CPoint		i_iptSt,	// 表示始点
						MINT		i_nFont,	// 文字フォントＮＯ
						MCHAR		i_sStr[]	// 初期表示文字列
				);

//===========================================================================
//		罫線定義・初期表示文字列定義のクリア
//
//		サブウィンドウに定義された罫線定義・文字定義を削除する。
//
static MINT	ClearDefSubWindowData(				
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin	// サブウィンドウNO
				);

//===========================================================================
//		フィールドの定義
//
//		フィールドの定義を行う。
//		座標値はサブウィンドウの左上を原点とした値を指定する。（X,Y共に右下へ向かって＋方向）
//		既存（オープン中の）ウィンドウに対しては、即座に設定値は反映されない。
//		次回オープン時から有効になる。
//
static MINT	DefField(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint		i_iptFldSt,	// フィールド始点
						CPoint		i_iptFldSz,	// フィールドの大きさ
						MINT		i_nLine,	// 行数
						MINT		i_nColm,	// 列数
						CPoint		i_iptEcSt,	// エコーバック領域始点
						CPoint		i_iptEcSz,	// エコーバック領域の大きさ
						MINT		i_nFont		// 文字フォントNO
				);

//===========================================================================
//		アイテムの定義
//
//		アイテムの定義を行う。
//		座標値はサブウィンドウの左上を原点とした値を指定する。（X,Y共に右下へ向かって＋方向）
//		既存（オープン中の）ウィンドウに対しては、即座に設定値は反映されない。
//		次回オープン時から有効になる。
//
//		アイテムモードについては、別紙「アイテムモード一覧」を参照。
//
static MINT	DefItem(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nItem,	//// 項目NO
						CPoint		i_iptItemSt,// アイテム始点
						CPoint		i_iptItemSz,// アイテムの大きさ
						MINT		i_mdItem,	// アイテムモード
						MINT		i_nFont		// 文字フォントNO
				);

//===========================================================================
//		フィールド（アイテム）定義のクリア
//
//		フィールド以下またはアイテム以下の定義をクリアする。
//
//
static MINT	ClearDefField(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nF		// サブウィンドウタイプが
												//	キャンバスの場合：フィールドNO
												//	パネルの場合　　：アイテムNO
				);

//===========================================================================
//		フィールドデータの問い合わせ
//
//		定義されているフィールドデータを問い合わせる。
//
static MINT	GetField(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint*		o_piptFldSt,// フィールド始点
						CPoint*		o_piptFldSz,// フィールドの大きさ
						MINT*		o_pnLine,	// 行数
						MINT*		o_pnColm,	// 列数
						CPoint*		o_piptEcSt,	// エコーバック領域始点
						CPoint*		o_piptEcSz,	// エコーバック領域の大きさ
						MINT*		o_pnFont	// 文字フォントNO
				);

//===========================================================================
//		フィールド位置・大きさの問い合わせ
//
//		定義されているフィールドデータを問い合わせる。
//
static MINT	GetFieldPos(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint*		o_piptFldSt,// フィールド始点
						CPoint*		o_piptFldSz	// フィールドの大きさ
				);

//===========================================================================
//		フィールド行列数の問い合わせ
//
//		定義されているフィールドデータを問い合わせる。
//
static MINT	GetFieldLineColumn(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT*		o_pnLine,	// 行数
						MINT*		o_pnColm	// 列数
				);

//===========================================================================
//		エコーバック領域の問い合わせ
//
//		定義されているフィールドデータを問い合わせる。
//
static MINT	GetFieldEchoPos(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint*		o_piptEcSt,	// エコーバック領域始点
						CPoint*		o_piptEcSz	// エコーバック領域の大きさ
				);

//===========================================================================
//		フィールドの文字フォントを得る
//
//		定義されているフィールドデータを問い合わせる。
//
static MINT	GetFieldFont(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT*		o_pnFont	// 文字フォントNO
				);

//===========================================================================
//		フィールド（全セル）に文字表示位置を定義
//
//		全てのセルに対して文字表示位置を定義する。
//		文字を描く場合指定した位置から表示されることになる。
//
static MINT	DefFieldTextOffset(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint		i_iptFld	// 表示位置
				);

//===========================================================================
//		フィールド（全セル）の文字表示位置を得る
//
//		定義されているフィールドデータを問い合わせる。
//
static MINT	GetFieldTextOffset(
						MINT		i_mdRvrb,	// モード
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						CPoint*		o_piptFld	// 表示位置
				);

//===========================================================================
//		フィールドに背景色コードを定義
//
//		色コードはサブウィンドウで指定したカラーマップのインデックス
//
static MINT	DefFieldBackColor(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT		i_icdCol	// 色コード
				);

//===========================================================================
//		フィールドの背景色コードを得る
//
//		色コードはサブウィンドウで指定したカラーマップのインデックス
//
static MINT	GetFieldBackColor(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT*		o_picdCol	// 色コード
				);

//===========================================================================
//		アイテムデータの問い合わせ
//
//		定義されているアイテムデータを問い合わせる。
//		座標値はサブウィンドウの左上を原点とした値である。（X,Y共に右下へ向かって＋方向）

//		アイテムモードについては、別紙「アイテムモード一覧」を参照。

//
static MINT	GetItem(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nItem,	// 項目NO
						CPoint		i_iptItemSt,// アイテム始点
						CPoint		i_iptItemSz,// アイテムの大きさ
						MINT		i_mdItem,	// アイテムモード
						MINT		i_nFont		// 文字フォントNO
				);

//===========================================================================
//		セルに初期表示文字列を定義
//
//		セルに初期文字列を定義する。
//
static MINT	DefCellText(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT		i_nLine,	// 行数
						MINT		i_nColm,	// 列数
						CPoint		i_iptEcSt,	// 表示文字列
						MINT		i_nFont		// 色コード
				);

//===========================================================================
//		セルの初期表示文字列を得る
//
//		セルの初期文字列を問い合わせる。
//
static MINT	GetCellText(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT*		o_pnLine,	// 行数
						MINT*		o_pnColm,	// 列数
						CPoint*		o_piptEcSt,	// 表示文字列
						MINT*		o_pnFont	// 色コード
				);

//===========================================================================
//		セルの領域を得る（サブウィンドウ上の位置）
//
//		セルに定義されたデータを問い合わせる。
//
static MINT	GetCellPosInSubWindow(
						MDID		i_idHyo,	// 表NO
						MDID		i_idSWin,	// サブウィンドウNO
						MINT		i_nField,	// フィールドNO
						MINT		i_nLine,	// 行数
						MINT		i_nColm,	// 列数
						MDID*		o_pidSWin,	// サブウィンドウID
						CPoint*		o_piptCelSt,// セル始点
						CPoint*		o_piptCelEn,// セル終点（Y）
						MDID*		o_pidFont	// 文字フォントID
				);

//===========================================================================
//		文字フォントの定義
//
//		文字フォントを定義する。
//
static MINT	DefFont(
						MDID		i_idFont,	// 文字フォントNO
						MCHAR		i_sflFont[]	// フォントファイル名文字列
				);

//===========================================================================
//		文字フォントを得る
//
//		定義されている文字フォントを得る。
//
static MINT	GetFont(
						MDID		i_idFont,	// 文字フォントNO
						MCHAR		i_sflFont[],// フォントファイル名文字列
						MINT		i_szflFont	// フォントファイル名文字列バッファサイズ
				);

//===========================================================================
//		文字フォント定義のクリア
//
static MINT	ClearDefFont(
						MDID		i_idFont	// 文字フォントNO
				);

//===========================================================================
//		イメージの定義
//
//		イメージ名称とイメージファイルのパスを指定してイメージを定義する。
//		定義したイメージはDispSubWindowImageおよびDispCellImageで使用できる。
//
//		イメージファイルとして使用できるファイル形式は下記の通り。
//		*.bmp
//		*.jpg
//		*.tif
//		*.png
//
static MINT	DefImage(
						MCHAR		i_snmImg[],	// イメージ名称
						MCHAR		i_sflImg[]	// イメージファイル名文字列
				);

//===========================================================================
//		未使用の表NOを得る
//
//		新規に定義可能な表NOを得る。
//		取得できない場合は、戻り値=0が返る。
//
static MINT	GetUnUseedWindowNo();					// 表No

//===========================================================================
//		定義済みサブウィンドウの問い合わせ
//
//		表ＮＯ内に存在するサブウィンドウＮＯを検索する。
//
static MINT	GetSubWindowList(
						MDID		i_idHyo,	// 表ＮＯ
						MgGInt*		o_pgidSWin	// サブウィンドウNOリスト 
				);

//===========================================================================
//		定義済みフィールドの問い合わせ
//
//		サブウィンドウＮＯ内に存在するフィールドＮＯを検索する。
//
static MINT	GetFieldList(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_idSWin,	// サブウィンドウNO 
						MDGID*		o_pGidFld	// フィールドNO
				);

//===========================================================================
//		定義済みアイテムの問い合わせ
//
//		サブウィンドウＮＯ内に存在するフィールドＮＯを検索する。
//
static MINT	GetItemList(
						MDID		i_idFont,	// 文字フォントNO
						MCHAR		i_sFontFl[],// フォントファイル名文字列
						MINT		i_szFontFl	// フォントファイル名文字列バッファサイズ
				);

//===========================================================================
//		表のオープン
//
//		指定された表をオープンする。
//		指定された表のサブウィンドウも全てオープンする。
//		表を表示させるためには、Openを呼んだ後にDispを呼ぶ必要がある。
//
//		※表のオープンについて
//		表のオープンには、２つの関数がある。
//			Open:　 表のウィンドウフレームと、その表に属するサブウィンドウ全てをオープンする。
//			OpenWindowFrame:　 表のウィンドウフレームのみオープンする。
//
static MINT	Open(
						MDID		i_idHyo		// 表ＮＯ
				);

//===========================================================================
//		表のクローズ
//
//		指定された表をクローズする。
//		指定された表のサブウィンドウも全てクローズする。
//
static MINT	Close(
						MDID		i_idHyo		// 表ＮＯ
				);

//===========================================================================
//		ウィンドウフレームのオープン
//
//		指定された表のウィンドウフレームのみをオープンする。
//
//		※表のオープンについて
//		表のオープンには、２つの関数がある。
//			Open:　 表のウィンドウフレームと、その表に属するサブウィンドウ全てをオープンする。
//			OpenWindowFrame:　 表のウィンドウフレームのみオープンする。
//
//		この関数では、指定された表のサブウィンドウはオープンしないので、
//		　　　　　　OpenSubWindow
//		を呼んで、必要なサブウィンドウを自分でオープンする必要がある。
//		また、表を表示させるためには、各種オープンを呼んだ後にDispを呼ぶ必要がある。
//
static MINT	OpenWindowFrame(
						MDID		i_idHyo		// 表ＮＯ
				);

//===========================================================================
//		サブウィンドウのオープン
//
//		指定されたサブウィンドウをオープンする。
//
//		※表のオープンについて
//		表のオープンには、２つの関数がある。
//			Open:　 表のウィンドウフレームと、その表に属するサブウィンドウ全てをオープンする。
//			OpenWindowFrame:　 表のウィンドウフレームのみオープンする。
//
//		サブウィンドウのオープンをコントロールしたい場合は、
//		　　　　　　OpenWindowFrame
//		を呼んでから、当関数で必要なサブウィンドウを自分でOpenする。
//		表を表示させるためには、Openを呼んだ後にDispを呼ぶ必要がある。
//
static MINT	OpenSubWindow(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_idSWin	// サブウィンドウNO
				);

//===========================================================================
//		サブウィンドウのクローズ
//
//		指定されたサブウィンドウをクローズする。
//
static MINT	CloseSubWindow(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_idSWin	// サブウィンドウNO
				);

//===========================================================================
//		ウィンドウの表示
//
//		指定された表を表示する。
//
static MINT	Disp(
						MDID		i_idHyo		// 表ＮＯ
				);

//===========================================================================
//		ウィンドウの消去
//
//		指定された表を非表示にする。
//
//		非表示の表を再度表示する場合は、Dispを呼ぶ。
//
static MINT	Hide(
						MDID		i_idHyo		// 表ＮＯ
				);

//===========================================================================
//		ウィンドウの始点位置の設定
//
//		指定された表の始点位置を設定する。
//
//		指定された表がオープンされていれば、表が移動する。
//		指定された表がオープンされていない場合は、その位置が記録され、次にオープンしたら、
//		その位置に表示される。
//
static MINT	SetWindowPosition(
						MDID		i_idHyo,	// 表ＮＯ
						CPoint		i_iptFontSt	// 始点
				);

//===========================================================================
//		ウィンドウのオープン状態の問い合わせ
//
//		指定された表のオープン状態を問い合わせる。
//
static MINT	GetWindowOpenState(
						MDID		i_idHyo,	// 表ＮＯ
						MINT*		o_piCond	// オープン状態
												//	 0:オープンされていない
												//	 1:オープンされている
												//	-1:オープンされているが非表示
				);

//===========================================================================
//		ウィンドウIDの問い合わせ
//
//		指定された表のウィンドウIDを得る。
//
//		ウィンドウIDは、Windowsのウィンドウハンドル。
//
static MINT	GetWindowID(
						MDID		i_idHyo,	// 表ＮＯ
						MDID*		o_pidWin	// ウィンドウID
				);

//===========================================================================
//		サブウィンドウIDの問い合わせ
//
//		指定されたサブウィンドウのサブウィンドウIDを得る。
//
//		サブウィンドウIDは、Windowsのウィンドウハンドル。
//
static MINT	GetSubWindowID(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_nSWin,	// サブウィンドウNO
						MDID*		o_pidWin	// サブウィンドウID
				);

//===========================================================================
//		アイテムIDの問い合わせ
//
//		指定されたアイテムのアイテムIDを得る。
//
//		アイテムIDは、Windowsのコントロールハンドル。
//
static MINT	GetItemID(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_nSWin,	// サブウィンドウNO
						MINT		i_nItem,	// アイテムNO
						MDID*		o_pidItem	// アイテムID
				);

//===========================================================================
//		文字フォントIDの問い合わせ
//
//		指定された文字フォントの文字フォントIDを得る。
//
//		文字フォントIDは、Windowsのフォントハンドル。
//
static MINT	GetFontID(
						MINT		i_nFont,	// 文字フォントNO
						MDID*		o_pidFont	// 文字フォントId
				);

//===========================================================================
//		サブウィンドウの塗りつぶし
//
//		指定されたサブウィンドウの領域を背景色で塗りつぶす。
//
//		サブウィンドウに背景色が設定されていない場合は、０番のカラーで塗りつぶされる。
//
static MINT	FillSubWindow(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_nSWin		// サブウィンドウNO
				);

//===========================================================================
//		サブウィンドウに罫線を表示
//
//		指定されたサブウィンドウに線を描く。
//
//		指定された線がサブウィンドウの領域より大きいかはチェックをしない。
//		サブウィンドウより大きな線を指定したら、サブウィンドウの領域で切られて表示される。
//
//		線種については、別紙「線種一覧」を参照。
//
static MINT	DispSubWindowLine(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_nSWin,	// サブウィンドウNO
						CPoint		i_ilnSt,	// 罫線始点
						CPoint		i_ilnEd,	// 罫線終点
						MINT		i_idWdt,	// 線幅（ピクセル値）
						MINT		i_idTyp,	// 線種
						MINT		i_nLn,		// 本数
						CPoint		i_nSpn,		// 線間隔
						MINT		i_icdCl		// 色コード
				);

//===========================================================================
//		サブウィンドウに文字列を表示
//
//		指定されたサブウィンドウに文字列を表示する。
//
//		指定された文字列がサブウィンドウの領域より大きいかはチェックをしない。
//		サブウィンドウより大きな文字を指定したら、サブウィンドウの領域で切られて表示される。
//
static MINT	DispSubWindowText(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						CPoint		i_iSt,		// 表示始点
						MDID		i_idFont,	// 文字フォントNO
						MCHAR		i_sStr[],		// 表示文字列
						MINT		i_icdCl		// 色コード
				);

//===========================================================================
//		サブウィンドウにイメージを表示
//
//		指定されたサブウィンドウに指定されたイメージを表示する。
//
//		イメージがサブウィンドウ領域より大きいかはチェックをしない。
//		サブウィンドウより大きなイメージを指定したら、サブウィンドウ領域で切られて表示される
//
//		イメージ名称とは、DefImageで登録したイメージ名称を指定する。
//
static MINT	DispSubWindowImage(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						CPoint		i_iSt,		// 始点
						MCHAR		i_sNmImg[]	// イメージ名称
				);

//===========================================================================
//		フィールドの塗りつぶし
//
//		指定されたフィールドの領域を背景色で塗りつぶす。
//
//		フィールドに背景色が設定されていない場合は、そのサブウィンドウの背景色で塗りつぶされる。
//		サブウィンドウにも背景色が設定されていない場合は、０番のカラーで塗りつぶされる。
//
static MINT	FillField(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld		// フィールドNO
				);

//===========================================================================
//		セルに文字列を表示
//
//		指定されたセルに文字列を表示する。
//
//		文字は、文字表示位置が指定されていれば、その位置表示される。
//		文字表示位置が設定されていなければ、エコーバック領域の左上を基点に表示される。
//		指定された文字列がセルの領域より大きいかはチェックをしない。
//		セルより大きな文字を指定したら、セル領域をはみ出して表示される。
//
static MINT	DispCellText(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR		i_sStr[],	// 表示文字列
						MINT		i_icdCl		// 色コード
				);

//===========================================================================
//		セルにイメージを表示
//
//		指定されたセルにイメージを表示する。
//		セルのエコーバック領域の左上の点を指定して表示する。
//		イメージがセルのエコーバック領域より大きいかはチェックをしない。
//		セルより大きなイメージを指定したら、セル領域をはみ出して表示される。
//
//		イメージ名称とは、DefImageで登録したイメージ名称を指定する。
//
static MINT	DispCellImage(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR		i_sStr[],	// 表示文字列
						MINT		i_icdCl,	// 色コード
						MCHAR		i_sNmImg[]	// イメージ名称
				);

//===========================================================================
//		セルの反転表示
//
//		指定されたセルの表示を反転する。
//		反転表示されたセルに対して、再度反転させると、もとの表示に戻る。
//
static MINT	DispCellRevt(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm		// 列
				);

//===========================================================================
//		セルのボタンON表示（表示文字指定）
//
//		指定されたセルに指定された文字を表示し、ボタンONの線を描く。
//
//		文字は、文字表示位置が指定されていれば、その位置表示される。
//		文字表示位置が設定されていなければ、エコーバック領域の左上を基点に表示される。
//		指定された文字列がセルの領域より大きいかはチェックをしない。
//		セルより大きな文字を指定したら、セル領域をはみ出して表示される。
//		ボタンの線は、セルのエコーバック領域の内側に描く。
//
static MINT	DispCellTextButtonOn(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MINT		i_iclFil,	// セル塗りつぶし色
						MCHAR		i_sStr[],		// 表示文字列
						MINT		i_iclStr,	// 文字色
						MINT		i_iclBtL,	// ボタンの明影色
						MINT		i_iclBtD,	// ボタンの暗影色
						MINT		i_iclOLn	// 外枠線の色
				);

//===========================================================================
//		セルのボタンOFF表示（表示文字指定）
//
//		指定されたセルに指定された文字を表示し、ボタンOFFの線を描く。
//
//		文字は、文字表示位置が指定されていれば、その位置表示される。
//		文字表示位置が設定されていなければ、エコーバック領域の左上を基点に表示される。
//		指定された文字列がセルの領域より大きいかはチェックをしない。
//		セルより大きな文字を指定したら、セル領域をはみ出して表示される。
//		ボタンの線は、セルのエコーバック領域の内側に描く。
//
static MINT	DispCellTextButtonOff(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MINT		i_iclFil,	// セル塗りつぶし色
						MCHAR		i_sStr[],	// 表示文字列
						MINT		i_iclStr,	// 文字色
						MINT		i_iclBtL,	// ボタンの明影色
						MINT		i_iclBtD,	// ボタンの暗影色
						MINT		i_iclOLn	// 外枠線の色
				);

//===========================================================================
//		セルのボタンON表示
//
//		指定されたセルにボタンONの線を描く。
//		ボタンの線は、セルのエコーバック領域の内側に描く。
//
static MINT	DispCellButtonOn(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MINT		i_iclBtL,	// ボタンの明影色
						MINT		i_iclBtD,	// ボタンの暗影色
						MINT		i_iclOLn	// 外枠線の色
				);

//===========================================================================
//		セルのボタンOFF表示
//
//		指定されたセルにボタンOFFの線を描く。
//		ボタンの線は、セルのエコーバック領域の内側に描く。
//
static MINT	DispCellButtonOff(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MINT		i_iclBtL,	// ボタンの明影色
						MINT		i_iclBtD,	// ボタンの暗影色
						MINT		i_iclOLn	// 外枠線の色
				);

//===========================================================================
//		アイテムに文字列を表示
//
//		指定されたアイテムに文字列を表示する。
//
static MINT	DispItemText(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iItm,		// アイテムNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR		i_sStr[]	// 表示文字列
				);

//===========================================================================
//		セルの文字列入力
//
//		指定されたセルの表示を反転する。
//		反転表示されたセルに対して、再度反転させると、もとの表示に戻る。
//
static MINT	InpCellText(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR		i_sOStr[],	// 初期表示文字列
						MCHAR		o_sInStr[],	// 入力文字列
						MINT		i_szInStr,	// バッファーサイズ
						MDID*		o_pidWin,	// ウィンドウID
						MINT*		o_piEvent	// イベント
				);

//===========================================================================
//		セルの数値入力
//
//		指定されたセルの数値入力を行う。
//		電卓モードがＯＮになっている場合は、簡易電卓表が表示され、そこから数値を入力する。
//		ＯＦＦの場合はキーボードから数値を入力する。
//
//		ウィンドウIDとイベントについては、Inp::Pointで返されるものと同じ。
//
static MINT	InpCellNumber(
						MDID		i_idHyo,	// 表ＮＯ
						MDID		i_iSWin,	// サブウィンドウNO
						MDID		i_iFld,		// フィールドNO
						MINT		i_iLn,		// 行
						MINT		i_iClm,		// 列
						MCHAR		i_sStr[],	// 初期表示文字列
						MCHAR		o_sStr[],	// 入力文字列
						MINT		i_szStr,	// バッファーサイズ
						MDID*		o_pidWin,	// ウィンドウID
						MINT*		o_piEvent	// イベント
				);

//===========================================================================
//		電卓ウィンドウ有効フラグの設定
//
//		InpCellNumber実行時に電卓ウィンドウの有効／無効を設定する。
//		フラグが無効の場合は、指定セルに直接キーイン入力となる。
//		フラグが有効の場合は、電卓ウィンドウがオープンされ、電卓ウィンドウへの入力となる。
//
static MINT	SetCalcWindowFlg(
						MINT		i_iFlg		// フラグ
												//　0:無効
												//　1:有効
				);

//===========================================================================
//		電卓ウィンドウ有効フラグの問い合わせ
//
//		InpCellNumber実行時に電卓ウィンドウの有効／無効フラグを問い合わせる。
//		フラグが無効の場合は、指定セルに直接キーイン入力となる。
//		フラグが有効の場合は、電卓ウィンドウがオープンされ、電卓ウィンドウへの入力となる。
//
static MINT	GetCalcWindowFlg(
						MINT*		o_piFlg		// フラグ
												//　0:無効
												//　1:有効
				);

//===========================================================================
//		入力セル（アイテム）の問い合わせ
//
//		直前のInp::Point等で入力されたセルの位置値を得る。
//
//		サブウィンドウＮＯがキャンバスタイプの場合は、fno=フィールドNO、
//		パネルタイプの場合は、fno＝アイテムＮＯが返る。
//		fno＝アイテムＮＯの時には、linおよびcolには0が返る。
//
//		直前に入力関数Inp::Point等を実行すること。
//		widおよびeventにはInp::Point等からの返却値を渡す。
//
//		当関数は下記の入力直後に実行されることが前提。これ以外の状態で当関数を実行した場合、値は保障しない。
//		グラフィックウィンドウ以外（wid>0）のウィンドウへの入力時。
//		マウスボタンのUP/DOWN、移動、およびアイテムへの入力時。
//
static MINT	GetInpCell(
						MDID		i_idWin,	// 入力ウィンドウID（Inp::Point等の返却値）
						MINT		i_iEvent,	// 入力イベント 　　（Inp::Point等の返却値）
						MDID*		o_pidHyo,	// 表ＮＯ
						MDID*		o_piSWin,	// サブウィンドウNO
						MDID*		o_piFld,	// フィールドNO
						MINT*		o_piLn,		// 行
						MINT*		o_piClm		// 列
				);

//===========================================================================
//		入力位置の問い合わせ（マウスイベント時）
//
//		直前のInp::Point等で入力された座標値を、その表のサブウィンドウの座標値として得る。
//
//		直前に入力関数Inp::Point等を実行すること。
//		widおよびeventにはInp::Point等からの返却値を渡す。
//
//		当関数は下記の入力直後に実行されることが前提。これ以外の状態で当関数を実行した場合、値は保障しない。
//		グラフィックウィンドウ以外（wid>0）のウィンドウへの入力時。
//		マウスボタンのUP/DOWN、移動の入力時。
//
static MINT	GetInpPosition(
						MDID		i_idWin,	// 入力ウィンドウID（Inp::Point等の返却値）
						MINT		i_iEvent,	// 入力イベント 　　（Inp::Point等の返却値）
						MDID*		o_pidHyo,	// 表ＮＯ
						MDID*		o_piSWin,	// サブウィンドウNO
						CPoint*		o_pptInp	// サブウィンドウ内の座標値
				);
};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DInp.h
//
//		入力
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DINP_DO
	#pragma message( "<<< DInp・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DInp・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DInp
{
public:
//===========================================================================
//		点の入力（ＰＩＣＫ−ＩＤ無し　補正無し）
//
//		マウスまたはキーボードから点を入力する。
//
//		widには入力されたウィンドウの番号が返る。
//		本システムで取り扱うウィンドウには、Windowクラスで生成するグラフィックウィンドウと、
//		Hyoクラスで生成される表（グラフィック以外のウィンドウ）が有り、それぞれでユニークな
//		論理番号が付けられる。
//		wid > 0 の場合は、表への入力が行われた事を示し、入力された表の表番号（hno）を返す。
//		wid < 0 の場合は、グラフィックウィンドウへの入力が行われた事を示し、
//		入力されたグラフィックウィンドウのIDを負の値で返す。
//		注）wid が負の値でその番号をWindowクラスの各関数へ渡すウィンドウIDとして使用する
//		場合は、正の値に修正して渡す必要がある。
//
//		eventは、別紙イベント一覧を参照
//
static MINT	Point(
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MgPoint3*	o_ptInp		// 入力した点の座標値（カレント座標系）
				);

//===========================================================================
//		点の入力（ＰＩＣＫ−ＩＤ無し　補正有り）
//
//		マウスまたはキーボードから点を入力する。
//		補正は各補正（スナップ）タイプのフラグ値に従う。（GetSnapFlg参照）
//
//		wid < 0 の場合はグラフィックウィンドウへの入力が行われた事を示し、
//		入力されたグラフィックウィンドウのIDを負の値で反す。
//		wid > 0 の場合はグラフィック以外のウィンドウ（表）への入力が行われた事を示し、
//		入力された表の表番号を反す。
//
//		eventは、別紙イベント一覧を参照
//
static MINT	PointSnap(
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MgPoint3*	o_ptInp		// 入力した点の座標値（カレント座標系）
				);

//===========================================================================
//		点の入力（ＰＩＣＫ−ＩＤ有り　補正無し）
//
//		マウスまたはキーボードから点を入力する。
//
//		wid < 0 の場合はグラフィックウィンドウへの入力が行われた事を示し、
//		入力されたグラフィックウィンドウのIDを負の値で反す。
//		wid > 0 の場合はグラフィック以外のウィンドウ（表）への入力が行われた事を示し、
//		入力された表の表番号を反す。
//
//		eventは、別紙イベント一覧を参照
//
static MINT	PointPick(
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MgPoint3*	o_ptInp,	// 入力した点の座標値（カレント座標系）
						MDIDSET*	o_pGid		// ピックした図形プリミティブDPRセット
				);

//===========================================================================
//		点の入力（ＰＩＣＫ−ＩＤ有り　補正有り）
//
//		マウスまたはキーボードから点を入力する。
//		補正は各補正（スナップ）タイプのフラグ値に従う。（GetSnapFlg参照）
//
//		wid < 0 の場合はグラフィックウィンドウへの入力が行われた事を示し、
//		入力されたグラフィックウィンドウのIDを負の値で反す。
//		wid > 0 の場合はグラフィック以外のウィンドウ（表）への入力が行われた事を示し、
//		入力された表の表番号を反す。
//
//		eventは、別紙イベント一覧を参照
//
static MINT	PointPickSnap(
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MgPoint3*	o_ptInp,	// 入力した点の座標値（カレント座標系）
						MDIDSET*	o_pGid		// ピックした図形プリミティブDPRセット
				);

//===========================================================================
//		ピックor範囲指定による図形Dprの選択入力
//
//		ピック または、ドラッグによる範囲指定による図形の選択入力を行う。
//		選択図形のエコーバック等は行わない。
//
//		wid、eventについては、点の入力（Point等）を参照
//		eventは、別紙イベント一覧を参照
//
static MINT	Sel(
						MDID*		o_pidWin,	// ウィンドウＩＤ
						MINT*		o_piEvent,	// イベント
						MDIDSET*	o_pGid		// ピックした図形プリミティブDPRセット
				);

//===========================================================================
//		ＫＥＹＩＮウィンドウによる文字入力
//
//		指定された位置にウィンドウをオープンして、文字を入力する。
//
static MINT	KeyBoard(
						CPoint		i_ipt,		// ウィンドウの始点Ｘ,（ = -1 : 画面の中央 ）
												// ウィンドウの始点Y（ = -1 : 画面の中央 ）
						MCHAR		i_sMsg[],	// メッセージ文字列
						MCHAR		i_sPrmpt[],	// プロンプト文字列
						MCHAR		i_sInit[],	// 初期表示文字列
						MCHAR		o_sInp[],	// 入力された文字列
						MINT		i_szInp	// o_sInp バッファサイズ
				);

//===========================================================================
//		コマンド投入
//
//		指定されたコマンドを投入する。
//
static MINT	Command(
						MCHAR		i_sCmd[]	// コマンド
				);

//===========================================================================
//		図形入力（操作）
//
//		指定されたコマンドの各図形の入力操作を行う。
//		図形Dprを生成してそのDpr-IDを返す。
//
static MINT	Operation(
						MCHAR		i_sCmd[],	// 入力する図形のコマンド
						MDIDSET*	o_pGidDpr,	// 図形プリミティブDPR-ID
						MDID*		o_pWin,		// ウィンドウID
						MINT*		o_iEvent	// イベント
				);

//===========================================================================
//		スナップ状態の問い合わせ
//
//		直前にPointSnap、PointPickSnapで入力された点が、どのようなスナップ（補正）状態
//		かを問い合わせる。
//
static MINT	GetSnap(
						MINT*		o_piSnap	// スナップ状態
												//	0:free
												//	1:端点
												//	2:線上点
												//	3:中点
												//	4:交点
												//	5:面上点
												//	6:作業面
												//	7:中心
												//	8:面上（裏）
				);

//===========================================================================
//		ピックされた面分情報を返す
//
//		直前のPointPickSnapでスナップされた面情報を問い合わせる。
//		PointPickSnapで返された、図形プリミティブDPR-IDと点を指定する。
//		面にスナップされていなければ、
//		　　　　　.n = 0
//		となる。
//
static MINT	GetSnapPlane(
						MDID		i_idWin,	// ウィンドウＩＤ
						MDID		i_idDpr,	// 図形プリミティブDPR-ID
						MgPoint3	i_pt,		// 点	
						MDFIG*		o_pFig		// 面図形情報
				);

//===========================================================================
//		スナップされた線分情報を返す
//
//		直前のPointSnap、PointPickSnapでスナップされた線分情報を問い合わせる。
//		線分にスナップされていなければ、
//		　　　　　.n = 0
//		となる。
//		線分図形情報figは、バッファーサイズ７以上が前提。
//
static MINT	GetSnapLine(
						MDID		i_idWin,	// ウィンドウＩＤ
						MDID		i_idDpr,	// 図形プリミティブDPR-ID
						MDFIG*		o_pFig		// 線分図形情報
				);

//===========================================================================
//		押されたキー情報を返す
//
//		直前のPoint、PointSnap、等の入力関数で押されたキー情報を問い合わせる。
//		キーボートが押されていない時に呼んだ場合の値は保証しない。
//
static MINT	GetKey();							// キー情報

//===========================================================================
//		マウス移動イベントの必要フラグの問い合わせ
//
//		マウス移動イベントの必要フラグを問い合わせる。
//		マウス移動イベントが不要に設定されている時は、点の入力関数　PointXX　から
//		マウス移動のイベントが返らない。
//
static MINT	GetMouseMoveEventFlg();				// マウス移動イベントフラグ
												//	0:移動イベント不要
												//	1:移動イベント必要

//===========================================================================
//		マウス移動イベントの必要フラグの設定
//
//		マウス移動イベントの必要フラグを設定する。
//		マウス移動イベントを不要に設定すると、点の入力関数　PointXX　から
//		マウス移動のイベントが返らなくなる。
//
static MINT	SetMouseMoveEventFlg(
						MINT		i_ifMMvEvt	// マウス移動イベントフラグ
												//	0:移動イベント不要
												//	1:移動イベント必要
				);

//===========================================================================
//		マウスアップイベントの必要フラグの問い合わせ
//
//		マウスアップイベントの必要フラグを問い合わせる。
//		マウスアップイベントが不要に設定されている時は、点の入力関数　PointXX　から
//		マウスアップのイベントが返らない。
//
static MINT	GetMouseUpEventFlg();				// マウスアップイベントフラグ
												//	0:アップイベント不要
												//	1:アップイベント必要

//===========================================================================
//		マウスアップイベントの必要フラグの設定
//
//		マウスアップイベントの必要フラグを設定する。
//		マウスアップイベントを不要に設定すると、点の入力関数　PointXX　から
//		マウスアップのイベントが返らなくなる。
//
static MINT	SetMouseUpEventFlg(
						MINT		i_ifMUpEvt	// マウスアップイベントフラグ
												//	0:アップイベント不要
												//	1:アップイベント必要
				);

//===========================================================================
//		３Ｄカーソル表示／非表示の問い合わせ
//
//		グラフィックウィンドウに表示するﾏｳｽｶｰｿﾙの位置（X、Y、Z各３軸の点線）を
//		表示するか／否かの設定値を問い合わせる。
//
static MINT	Get3DCursorDispFlg();				// ３Ｄカーソル表示フラグ
												//	0:描かない
												//	1:描く

//===========================================================================
//		３Ｄカーソル表示／非表示の設定
//
//		グラフィックウィンドウに表示するﾏｳｽｶｰｿﾙの位置（X、Y、Z各３軸の点線）を
//		表示するか／否かを設定する。
//
static MINT	Set3DCursorDispFlg(
						MINT	i_if3DCsrDisp	// ３Ｄカーソル表示フラグ
												//	0:描かない
												//	1:描く
				);

//===========================================================================
//		３Ｄカーソル移動モードの問い合わせ
//
//		点の入力(PointSnap等)時のﾏｳｽｶｰｿﾙの移動ﾓｰﾄﾞを参照する｡
//
//		ｶｰｿﾙ移動ﾓｰﾄﾞが1の時:ﾏｳｽｶｰｿﾙは3次元的に動く｡(高さのある図形に補正可能)
//		ｶｰｿﾙ移動ﾓｰﾄﾞが2の時:ﾏｳｽｶｰｿﾙは平面上を動く｡(設定された平面上にある図形､または
//		                    その平面と交差した図形の交点/交線上に補正可能)
//		ｶｰｿﾙ移動ﾓｰﾄﾞが3の時:ﾏｳｽｶｰｿﾙは線上を動く｡(設定された線上にある図形､または
//		                    その線と交差した図形の交点に補正可能)
//
//		※このﾓｰﾄﾞ２、３の面や線情報は関数GetCursorMoveModeDataで参照する｡
//
static MINT	Get3DCursorMoveMode();				// ｶｰｿﾙ移動ﾓｰﾄﾞ
												//	1:3次元
												//	2:平面上
												//	3:線上

//===========================================================================
//		３Dカーソル移動モードの設定
//
//		点の入力(PointSnap等)時のﾏｳｽｶｰｿﾙの移動ﾓｰﾄﾞを設定する｡
//
//		ｶｰｿﾙ移動ﾓｰﾄﾞが1の時:ﾏｳｽｶｰｿﾙは3次元的に動く｡(高さのある図形に補正可能)
//		ｶｰｿﾙ移動ﾓｰﾄﾞが2の時:ﾏｳｽｶｰｿﾙは平面上を動く｡(設定された平面上にある図形､または
//		                    その平面と交差した図形の交点/交線上に補正可能)
//		ｶｰｿﾙ移動ﾓｰﾄﾞが3の時:ﾏｳｽｶｰｿﾙは線上を動く｡(設定された線上にある図形､または
//		                    その線と交差した図形の交点に補正可能)
//
//		※このﾓｰﾄﾞ２、３の面や線情報は関数SetCursorMoveModeDataで設定する｡
//		※プログラムでこのﾓｰﾄﾞ２または３に設定しても、画面（GUI）で[SHIFT]キーを押すと
//		　モードが解除され、３次元上自由に動かすことが可能になる。
//		　ユーザに必ず指定面or線上点を指定させたい場合は、SetShiftKeyFlgで、
//		「shift」キーフラグを「無効」に設定する必要がある。
//
static MINT	Set3DCursorMoveMode(				
						MINT	i_md3DCsrMv		// ｶｰｿﾙ移動ﾓｰﾄﾞ
												//	1:3次元
												//	2:平面上
												//	3:線上
				);

//===========================================================================
//		カーソル移動面（線）モードとデータの問い合わせ
//
//		点の入力（PointSnap等）時のﾏｳｽｶｰｿﾙの移動面(線)ﾓｰﾄﾞ及びﾃﾞｰﾀを参照する｡
//
//		（注）移動面(線)ﾓｰﾄﾞについて
//		Get3DCursorMoveModeの戻り値が1の時:
//		 図形に補正されなかった時の点の投影面を得る
//		Get3DCursorMoveModeの戻り値が2の時:
//		 ﾏｳｽｶｰｿﾙが移動する平面を得る｡
//		Get3DCursorMoveModeの戻り値が3の時:
//		 ﾏｳｽｶｰｿﾙが移動する線を得る｡
//
//		※	Set3DcursorMoveMode参照
//
static MINT	GetCursorMoveModeData(
						MINT*	o_pmdMvSfc,		// 移動面(線)ﾓｰﾄﾞ（注）
												// Get3DCursorMoveModeの戻り値が1or2の時
												//	1:作業面
												//	2:作業面に平行な面
												//	3:任意の面
												// Get3DCursorMoveModeの戻り値が3の時
												//	2:作業面に垂直な線
												//	3:任意の線
						MREAL	o_prDt[]			// 移動面モード情報	[0〜6]
												// mode=1の時
												//	使用しない
												// mode=2の時
												//	基準点(添字数は3)
												// mode=3の時
												//	面(原点+法線ﾍﾞｸﾄﾙ) または
												//	線(原点+線の方向ﾍﾞｸﾄﾙ)
				);

//===========================================================================
//		カーソル移動面（線）モードとデータの設定
//
//		点の入力（PointSnap等）時のﾏｳｽｶｰｿﾙの移動面(線)ﾓｰﾄﾞ及びﾃﾞｰﾀを設定する｡
//
//		（注）移動面(線)ﾓｰﾄﾞについて
//		Get3DCursorMoveModeの戻り値が1の時:
//		 図形に補正されなかった時の点の投影面を設定する｡
//		Get3DCursorMoveModeの戻り値が2の時:
//		 ﾏｳｽｶｰｿﾙが移動する平面を設定する｡
//		Get3DCursorMoveModeの戻り値が3の時:
//		 ﾏｳｽｶｰｿﾙが移動する線を設定する｡
//
//		※	Get3DcursorMoveMode参照
//
static MINT	SetCursorMoveModeData(
						MINT	i_mdMvSfc,		// 移動面(線)ﾓｰﾄﾞ（注）
												// Get3DCursorMoveModeの戻り値が1or2の時
												//	1:作業面
												//	2:作業面に平行な面
												//	3:任意の面
												// Get3DCursorMoveModeの戻り値が3の時
												//	2:作業面に垂直な線
												//	3:任意の線
						MREAL	i_rDt[]			// mode=1の時
												//	使用しない
												// mode=2の時
												//	基準点(添字数は3)
												// mode=3の時
												//	面(原点+法線ﾍﾞｸﾄﾙ) または
												//	線(原点+線の方向ﾍﾞｸﾄﾙ)
				);

//===========================================================================
//		「shift」キーフラグの問い合わせ
//
//		[SHIFT]キーの有効／無効を問い合わせる。
//
//		※[SHIFT]キーについて
//		点の入力（PointSnap）時、[SHIFT]キーを押すことにより（or画面からクリック）
//		マウスカーソルの高さ移動
//		マウスカーソルの移動モードのキャンセル
//		　　（Get3DCursorMoveModeの戻り値が2 or 3の時に１にする）
//		を行うことができる。
//		この[SHIFT]キーを有効／無効にする　を設定できる。
//		[SHIFT]キーを無効にするということは、ユーザが[SHIFT]キーを押しても無視すること、
//		つまり、ユーザに任意点を入力させたくないような場合に無効にして使用する。
//
//
static MINT	GetShiftKeyFlg();					// [SHIFT]キー有効／無効フラグ
												//　0:無効
												//　1:有効

//===========================================================================
//		「shift」キーフラグの設定
//
//		[SHIFT]キーの有効／無効を設定する。
//
//		※[SHIFT]キーについて
//		点の入力（PointSnap）時、[SHIFT]キーを押すことにより（or画面からクリック）
//		マウスカーソルの高さ移動
//		マウスカーソルの移動モードのキャンセル
//		　　（Get3DCursorMoveModeの戻り値が2 or 3の時に１にする）
//		を行うことができる。
//		この[SHIFT]キーを有効／無効にする　を設定できる。
//		[SHIFT]キーを無効にするということは、ユーザが[SHIFT]キーを押しても無視すること、
//		つまり、ユーザに任意点を入力させたくないような場合に無効にして使用する。
//
//
static MINT	SetShiftKeyFlg(
						MINT	i_ifSftValid	// [SHIFT]キー有効／無効フラグ
												//　0:無効
												//　1:有効
				);

//===========================================================================
//		スナップエコー表示モードの問い合わせ
//
//		スナップエコー表示モードの値の問い合わせ。
//
//		※　スナップエコー表示モード
//		点の入力（PointSnap）時、ﾏｳｽｶｰｿﾙを動かしている時に図形にスナップ（補正）されると、
//		スナップされたことがわかるように画面上に
//		　　　　　　スナップマーク（ 　等）
//		　　　　　　スナップした線のエコー表示（面の場合は境界線）
//		を表示している。
//		これらのマークと図形の表示するウィンドウは、ﾏｳｽｶｰｿﾙのあるウィンドウまたは、
//		全ウィンドウのどちらかに設定できる。このモードのことを言う。
//
static MINT	GetSnapEchoMode(
						MINT*	o_pifSftValid,	// スナップマーク表示モード
												//	1:全ウィンドウに表示
												//　2:：入力ウィンドウのみに表示
						MINT*	o_pmdEcho		// スナップ線エコー表示モード
												//  1:全ウィンドウに表示
												//　2:入力ウィンドウのみに表示

				);

//===========================================================================
//		スナップエコー表示モードの設定
//
//		スナップエコー表示モードの値の設定。
//
//		※　スナップエコー表示モード
//		点の入力（PointSnap）時、ﾏｳｽｶｰｿﾙを動かしている時に図形にスナップ（補正）されると、
//		スナップされたことがわかるように画面上に
//		　　　　　　スナップマーク（ 　等）
//		　　　　　　スナップした線のエコー表示（面の場合は境界線のエコー表示）
//		を表示している。
//		これらのマークと図形の表示するウィンドウは、ﾏｳｽｶｰｿﾙのあるウィンドウまたは、全ウィンドウのどちらかに設定できる。このモードのことを言う。
//
//
static MINT	SetSnapEchoMode(
						MINT	i_ifSftValid,	// スナップマーク表示モード
												//	1:全ウィンドウに表示
												//　2:：入力ウィンドウのみに表示
						MINT	i_mdEcho		// スナップ線エコー表示モード
												//  1:全ウィンドウに表示
												//　2:入力ウィンドウのみに表示

				);

//===========================================================================
//		各スナップフラグの問い合わせ
//
//		各補正（スナップ）タイプのフラグ値を問い合わせる。
//		無効になっていれば、その補正は行わない。
//		システム起動時の値は全て「有効」になっている。
//
static MINT	GetSnapFlg(
						MINT*	o_pitpSnap,		// スｽﾅｯﾌﾟﾀｲﾌﾟ
												//	1:端点    2:線上点    3:中点    4:交点
												//	5:面上点  6:中心線    7:作業面
						MINT*	o_pifSnapValid	// ﾌﾗｸﾞ
												//	0:無効
												//	1:有効
				);

//===========================================================================
//		各スナップフラグの設定
//
//		各補正（スナップ）タイプのフラグ値を設定する。
//		無効になっていれば、その補正は行わない。
//		システム起動時の値は全て「有効」になっている。
//
static MINT	SetSnapFlg(
						MINT	i_itpSnap,		// スｽﾅｯﾌﾟﾀｲﾌﾟ
												//	1:端点    2:線上点    3:中点    4:交点
												//	5:面上点  6:中心線    7:作業面
						MINT	i_ifSnapValid	// ﾌﾗｸﾞ
												//	0:無効
												//	1:有効
				);

//===========================================================================
//		ラバーバンドモードの問い合わせ
//
//		点の入力(PointSnap等)時のラバーバンドモードを問い合わせる｡
//		ラバーバンドの始点はバッファーサイズが不足している場合は、サイズ分だけ返す。
//
//		※ラバーバンド
//		　ラバーバンドは、指定された点から、ﾏｳｽｶｰｿﾙの位置までの線を
//		ﾏｳｽｶｰｿﾙを動かす度に、描きなおされる線のこと。
//
static MINT	GetRubberbandMode(
						MINT*		o_pmdRvrb,	// モード
												//	0:描かない
												//	1:線分
												//	2:box （作業面）
												//	3:box （視平面）
						MgGPoint3*	o_pGpt		// ラバーバンド始点セット
				);

//===========================================================================
//		ラバーバンドモードの設定
//
//		点の入力(PointSnap等)時のラバーバンドモードを設定する。
//
//		※ラバーバンド
//		　ラバーバンドは、指定された点から、ﾏｳｽｶｰｿﾙの位置までの線を
//		ﾏｳｽｶｰｿﾙを動かす度に、描きなおされる線のこと。
//
static MINT	SetRubberbandMode(
						MINT		i_mdRvrb,	// モード
												//	0:描かない
												//	1:線分
												//	2:box （作業面）
												//	3:box （視平面）
						MgGPoint3	i_Gpt		// ラバーバンド始点セット
				);

//===========================================================================
//		２点（ＵＰ、ＤＯＷＮ）を渡し、同一点かどうか判別する
//
//		範囲と点を指定して、その点が同一点とみなせるかどうかをチェックする。
//		範囲rrを負の値で指定すると、システムのドラッグ範囲の値（GetDragSensで参照）で
//		チェックする。
//
//		APPを作成する際、ピックとドラッグで操作を切り分けるような場合に使用する。
//
static MINT	CheckSamePoint(
						MINT		i_mdRvrb,	// ウィンドウＩＤ
						MgPoint3	i_pt[2],	// カレント座標値２点
						MREAL		i_rTol,		// 範囲(画面上でのmmサイズ)
						MINT		i_iCond		// コンディション
												//	0:同一点
												//	1:異なる２点
				);

//===========================================================================
//		入力時ドラッグ範囲の問い合わせ
//
//		ドラッグ範囲の値を問い合わせる。
//
//		APPを作成する際、ピックかドラッグかの判定する距離に使用する。
//
static MINT	GetDragSens();						// ドラッグ範囲(画面上でのmmサイズ)

//===========================================================================
//		入力時ドラッグ範囲の設定
//
//		ドラッグ範囲の値を設定する。
//
//		APPを作成する際、ピックかドラッグかの判定する距離に使用する。
//
static MINT	SetDragSens(
						MINT		i_rJdgDrg	// ドラッグ範囲(画面上でのmmサイズ)
				);

//===========================================================================
//		入力時ピック範囲の問い合わせ
//
//		ピック範囲の値を問い合わせる。
//
//		PICK-ID付き点の入力(PointPick、PointPickSnap)時にこの範囲で図形を検索する。
//
static MINT	GetPickSens();						// ピック範囲(画面上でのmmサイズ)

//===========================================================================
//		入力時ピック範囲の設定
//
//		ピック範囲の値を設定する。
//
//		PICK-ID付き点の入力(PointPick、PointPickSnap)時にこの範囲で図形を検索する。
//
static MINT	SetPickSens(
						MINT		i_rJdgPick	// ピック範囲(画面上でのmmサイズ)
				);

};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DLyr.h
//
//		入力
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DLYR_DO
	#pragma message( "<<< DLyr・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DLyr・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DLyr
{
public:
//===========================================================================
//		レイヤーの生成
//
static MINT	CreateLyr(
						MDID	i_idScm,		// スキーマID
						MDID	i_idGrp,		// グループID
						MDID*	o_pidLyr,		// レイヤーID
						MINT	i_sz =10		// 初期エンティティIdバッファサイズ
				);

//===========================================================================
//		レイヤーの削除
//
static MINT	DeleteLyr(							//
						MDID		i_idLyr		// レイヤーId
				);

//===========================================================================
//		カレントレイヤーIdを得る
//
static MDID	GetCurLyrId();

//===========================================================================
//		カレントレイヤーIdを設定する
//
static MDID	SetCurLyrId(
						MDID		i_idLyr		// レイヤーId
				);

//===========================================================================
//		レイヤー数を得る
//
static MINT	GetLyrCount();

//===========================================================================
//		全レイヤーIdのセットを得る
//
static MINT	GetLyrIdAll(
						MDIDSET*	o_pGidLyr	// レイヤーIdセット
				);

//===========================================================================
//		グループIdとスキーマIdからレイヤーIdを得る
//
static MINT	GetLyrId( 
						MDID		i_idScm,	// スキーマId
						MDID		i_idG,		// グループId
						MDID*		o_pidLyr	// レイヤーId
				);

//===========================================================================
//		レイヤーIdからグループIdを取得
//
static MINT	GetGrpId(
						MDID		i_idLyr,	// レイヤーId
						MDID*		o_idGrp		// グループId
				);

//===========================================================================
//		レイヤーIdからスキーマIdを取得
//
static MINT	GetScm(
						MDID		i_idLyr,	// レイヤーId
						MDID*		o_idScm		// スキーマId
				);

//===========================================================================
//		レイヤーIdからエンティティIdのセットを取得する
//
static MINT	GetEnt(
						MDID		i_idLyr,	// レイヤーId
						MDIDSET*	o_pGidEnt	// エンティティIdセット
				);

//===========================================================================
//		グループの座標変換マトリックスを得る
//
static MINT	GetGrpCoord(
						MDID		i_idGrp,	// グループId
						MgMat3E*		o_mTrans	// 座標変換マトリックス
				);

//===========================================================================
//		基準座標変換マトリックスを得る
//
//		データベースをオープンすると、基準座標系は必ず１つ存在する。
//
static MgMat3E GetBaseCoord( );					// 基準座標変換マトリックス

//===========================================================================
//		カレント座標変換マトリックスを得る
//
//		１つのグループには１つの座標系が存在する。
//		DLyr::SetCurCoordでグループの座標変換マトリックスがカレントに設定されると、
//		そのグループの座標系がカレント座標系になる。
//		Inp:Point等で得られる座標値はカレント座標系上の座標値となる。
//
static MgMat3E	GetCurCoord( );					// カレント座標変換マトリックス

//===========================================================================
//		カレント座標変換マトリックスを設定
//
//		１つのグループには１つの座標系が存在する。
//		DLyr::SetCurCoordでグループの座標変換マトリックスがカレントに設定されると、
//		そのグループの座標系がカレント座標系になる。
//		Inp:Point等で得られる座標値はカレント座標系上の座標値となる。
//
//		カレント座標系を一時的に変更する場合は、処理終了時に元に戻すこと。
//
static MgMat3E SetCurCoord(						// 直前のカレント座標変換マトリックス
						MgMat3E&		i_MTransr	// 座標変換マトリックス
				);

//===========================================================================
//		レイヤーの表示／検知属性を取得
//
static MINT GetLyrDispMode(
						MDID		i_idWin,	// ウィンドウId
						MDID		i_idLyr,	// レイヤーId
						MINT*		o_iaWD		// ウィンドウ表示検地モード
												//		0: 未設定
												//		1: 表示 OFF	検地 OFF			×
												//		2: 表示 ON	検地 OFF			△
												//		3: 表示 ON	検地 ON				○
												//		5: 表示 OFF	検地 OFF	Lock	×p
												//		6: 表示 ON	検地 OFF	Lock	△p
												//		7: 表示 ON	検地 ON		Lock	○p
				);

//===========================================================================
//		レイヤーの表示／検知属性を設定
//
static MINT SetLyrDispMode(
						MINT		i_idWin,	// ウィンドウId
						MINT		i_idLyr,	// レイヤーId
						MINT		i_iaWD		// ウィンドウ表示検地モード
												//		GetLyrDispModeの説明を参照
				);

//===========================================================================
//		レイヤーの表示／検知属性を設定
//
static MINT SetLyrsDispMode(
						MINT		i_idWin,	// ウィンドウId
				const	MDIDSET&	i_GidScm,	// レイヤーIdセット
						MINT		i_iaWD		// ウィンドウ表示検地モード
												//		GetLyrDispModeの説明を参照
				);

//===========================================================================
//		カレントウィンドウに対する表示／検知属性によるレイヤーの検索
//
static MINT	SerachLyrDispMode(
						MINT		i_imdD,		// ウィンドウ表示検地モード選択コード
												//	　1 : ﾚｲﾔｰ表で○のものだけ
												//	　2 :         ○と△
												//	　3 :         ○と△と×
												//	以外:       ○と△と×と−
						MDIDSET*	o_pGidScm,	// レイヤーセット
						MINT*		o_pitpCurWin // カレントウィンドウタイプ( 0:３Ｄ、1：図面）
				);

//===========================================================================
//		レイヤーのカレント表示属性を取得
//
static MINT	GetLyrCurMaterial(
						MINT		i_idLyr,	// レイヤーId
						MDFIG*		o_pFig		// カレントレイヤー表示属性
				);

//===========================================================================
//		レイヤーのカレント表示属性を設定
//
static MINT	SetlyrCurMaterial(
						MINT		i_idLyr,	// レイヤーId
						MDFIG&		i_stFig		// カレントレイヤー表示属性
				);

//===========================================================================
//		レイヤーのデフォルト表示属性を取得
//
static MINT	GetLyrDefaultMaterial(
						MINT		i_idLyr,	// レイヤーId
						MDFIG*		o_pFig		// カレントレイヤー表示属性
				);


//===========================================================================
//		レイヤーのデフォルト表示属性を設定
//
static MINT	SetlyrDefaultMaterial(
						MINT		i_idLyr,	// レイヤーId
						MDFIG&		i_stFig		// カレントレイヤー表示属性
				);
};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DLgt.h
//
//		入力
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DLGT_DO
	#pragma message( "<<< DLgt・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DLgt・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DLgt
{
public:
//===========================================================================
//		光源の図形情報を得る
//
//		指定された光源の図形情報を得る
//		
//		※注意
//		　円柱、面光源は、画面（OpenGL）に対して無効で、POV−RAYに対してのみ有効。
//		　画面（OpenGL）に対して有効な光源は８個まで。
//		８個以上ある場合は、生成順に有効な光源８個がOpenGLに設定される。
//
static MINT	Get(
						MDID		i_idLgt,	// 光源ID
						MDFIG*		o_figLgt	// 光源の図形情報
				);

//===========================================================================
//		光源の生成
//
//		指定された図形情報の光源を生成する。
//
//		光源を生成するだけで、画面の表示は行わない。
//		生成した光源を画面に反映したい場合には、Refreshを呼ぶ必要がある。
//
//		※注意
//		　円柱、面光源は、画面（OpenGL）に対して無効で、POV−RAYに対してのみ有効。
//		　画面（OpenGL）に対して有効な光源は８個まで。
//		８個以上ある場合は、生成順に有効な光源８個がOpenGLに設定される。
//
static MINT	Create(
						MDID*		o_idLgt,	// 光源Id
						MDFIG&		i_stFigLgt	//	光源の図形情報
						);

//===========================================================================
//		光源の変更
//
//		指定された光源を変更する。
//
//		光源の図形情報を変更するだけで、画面の表示は行わない。
//		生成した光源を画面に反映したい場合には、Refreshを呼ぶ必要がある。
//
//		※注意
//		　円柱、面光源は、画面（OpenGL）に対して無効で、POV−RAYに対してのみ有効。
//		　画面（OpenGL）に対して有効な光源は８個まで。
//		８個以上ある場合は、生成順に有効な光源８個がOpenGLに設定される。
//
static MINT	Change(
						MDID		i_idLgt,	// 光源Id
						MDFIG&		i_stFigLgt	// 光源の図形情報
				);

//===========================================================================
//		光源の削除
//
//		指定された光源を削除する。
//
//		光源を削除するだけで、画面の表示は行わない。
//		光源を削除した結果を画面に反映したい場合には、Refreshを呼ぶ必要がある。
//
static MINT	Delete(
						MDID		i_idLgt		// 光源Id
				);

//===========================================================================
//		光源の一覧を得る
//
static MINT	GetList(
						MDGID*		o_GidLgt	// 光源Idリスト
												//	＜入力＞
												//	0:最初から   
												//	0以外:途中から         
												//	＜出力＞
												//	0:	残データなし
//												//	0以外:	残データあり
				);

//===========================================================================
//		光源使用ウィンドウの再表示
//
//		変更された光源の結果を反映するためウィンドウの再表示を行う。
//
static MINT	Refresh( );

//===========================================================================
//		環境光の図形情報を得る
//
//		環境光の図形情報を得る。
//
//		環境光はデータベース毎に１つだけ設定することができる。
//		データベースオープン時に、初期値の値（白で強さ０．３）で設定される。
//
static MINT	GetAmbient(
						MDFIG*		o_pfigKLgt	// 環境光の図形情報
				);

//===========================================================================
//		環境光の設定
//
//		環境光を設定する。
//
//		環境光を設定するだけで、画面の表示は行わない。
//		設定した環境光を画面に反映したい場合には、Refreshを呼ぶ必要がある。
//
static MINT	SetAmbient(
						MDFIG&		i_stFigKLgt	// 環境光の図形情報
				);

//===========================================================================
//		光源のデフォルト図形情報を得る
//
//		指定されたタイプの光源の図形情報を得る
//
//		※注意
//		　円柱、面光源は、画面（OpenGL）に対して無効で、POV−RAYに対してのみ有効。
//		　画面（OpenGL）に対して有効な光源は８個まで。
//		８個以上ある場合は、生成順に有効な光源８個がOpenGLに設定される。
//
static MINT	GetDefaultData(
						MINT		i_ptOrg,	// 光源タイプ
												//	0:平行光源
												//	1:点光源
												//	2:スポット光源
												//	3:円柱光源
												//	4:面光源
						MDFIG*		o_pfigLgt	//	光源の図形情報
				);
};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DMsg.h
//
//		メッセージ
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DMSG_DO
	#pragma message( "<<< DMsg・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DMsg・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DMsg
{
public:
//===========================================================================
//		メッセージ番号を指定したガイダンスメッセージの表示
//
static MINT	DispGuide(
						MINT		i_iGMsg		// ガイダンスメッセージ番号
				);

//===========================================================================
//		文字列を指定したガイダンスメッセージの表示
//
static MINT	DispGuideText(
						MCHAR		i_sGMsg[]	// メッセージ文字列
				);

//===========================================================================
//		ガイダンスメッセージの消去
//
static MINT	ClearGuide( );

//===========================================================================
//		エラーメッセージの表示
//
//		メッセージ番号を指定して、メッセージデータベースに登録されているエラーメッセージを表示する。
//		関数名とエラーコードは、エラーメッセージに付加して表示する。
//		指定されたメッセージ番号が、メッセージデータベースにない場合は、指定されたメッセージ番号を表示する。
//
static MINT	DispError(
						MCHAR		i_sMsg[],	// 関数名
						MINT		i_iEMsg,	// エラーメッセージ番号
						MINT		i_icdEMsg	// エラーコード
				);
};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DMono.h
//
//		物
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DENT_DO
	#pragma message( "<<< DEnt・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DEnt・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT mdmDEnt
{
public:
//===========================================================================
//		物の生成後の標準処理
//
//		与えられたエンティティのレイヤーの意味に従い、生成時の必要処理を行う。
//		処理内容
//		・与えられたエンティティをグラフィックウィンドウに生成表示する。
//		・“壁”の場合は、既存の“窓”、“扉”、“開口”との図形干渉チェックを行い、干渉する
//			場合は付属関係を付ける。
//		・“窓”、“扉”、“開口”の場合は、既存の“壁”との図形干渉チェックを行い、干渉する
//			場合は付属関係を付け、その“壁”の再表示を行う。
//
static MINT	CmdAfterCreate(
						MDIDSET&	i_GidEnt	// エンティティ−ＩＤセット
				);

//===========================================================================
//		物の削除の標準処理
//
//		与えられたエンティティのレイヤーの意味に従い、削除時の必要処理を行う。
//		処理内容
//		・与えられたエンティティを削除し、グラフィックウィンドウの表示を消去する。
//		・“壁”の場合は、付属関係にある“窓”、“扉”、“開口”の再表示を行う。
//		・“窓”、“扉”、“開口”の場合は、付属関係にある“壁”の再表示を行う。
//
static MINT	CmdDelete(
						MDIDSET&	i_GidEnt	// エンティティ−ＩＤセット
				);

//===========================================================================
//		物の複写の標準処理
//
//		与えられたエンティティのレイヤーの意味に従い、複写時の必要処理を行う。
//		処理内容
//		・与えられたエンティティを複写後、複写先の図形を移動し、グラフィックウィンドウに生成表示する。
//		・“壁”の場合は、複写先のエンティティと既存の“窓”、“扉”、“開口”との図形干渉チェックを行い、
//			干渉する場合は付属関係を付ける。
//		・“窓”、“扉”、“開口”の場合は、複写先のエンティティと既存の“壁”との図形干渉チェックを行い、
//			干渉する場合は付属関係を付け、その“壁”の再表示を行う。
//
//			mode=1　の時　datは移動ベクトル[3]
//			mode=2　の時　datは回転マトリックス[12]
//			mode=3　の時　datは面情報（点＋法線ベクトル）[6]
//			mode=4　の時　datは原点＋倍率[4]　※倍率は1.0が原寸
//
static MINT	CmdCopy(
						MDIDSET&	i_GidEnt,	// エンティティ−ＩＤセット
						MINT		i_imdMv,	// 移動モード( 1:平行 2:回転 3:鏡面 4:拡大 )
						void*		i_pv,		// 移動データ
						MDIDSET*	o_pGidEnt	// 複写先　エンティティ-IDリスト
				);

//===========================================================================
//		物の移動の標準処理
//
//		与えられたエンティティのレイヤーの意味に従い、移動時の必要処理を行う。
//		処理内容
//		・与えられたエンティティの図形を移動し、グラフィックウィンドウに再表示する。
//		・“壁”の場合は、付属関係にある“窓”、“扉”、“開口”との図形干渉チェックを行い、
//			干渉しない場合は付属関係を切り、その“窓”、“扉”、“開口”の再表示を行う。
//			既存の“窓”、“扉”、“開口”との図形干渉チェックを行い、干渉する場合は付属関係を
//			付ける。
//		・“窓”、“扉”、“開口”の場合は、付属関係にある“壁”との図形干渉チェックを行い、
//			干渉しない場合は付属関係を切り、その“壁”の再表示を行う。
//			既存の“壁”との図形干渉チェックを行い、干渉する場合は付属関係を付け、その“壁”の
//			再表示を行う。
//			mode=1　の時　datは移動ベクトル[3]
//			mode=2　の時　datは回転マトリックス[12]
//			mode=3　の時　datは面情報（点＋法線ベクトル）[6]
//			mode=4　の時　datは原点＋倍率[4]　※倍率は1.0が原寸
//
static MINT	CmdMove(
						MDIDSET&	i_GidEnt,	// エンティティ−ＩＤセット
						MINT		i_imdMv,	// 移動モード( 1:平行 2:回転 3:鏡面 4:拡大 )
						void*		i_pv		// 移動データ
				);

//===========================================================================
//		物の変形後の標準処理
//
//		与えられたエンティティのレイヤーの意味に従い、図形変形時の必要処理を行う。
//		処理内容
//		・与えられたエンティティをグラフィックウィンドウに再表示する。
//		・“壁”の場合は、付属関係にある“窓”、“扉”、“開口”との図形干渉チェックを行い、
//			干渉しない場合は付属関係を切り、その“窓”、“扉”、“開口”の再表示を行う。
//			既存の“窓”、“扉”、“開口”との図形干渉チェックを行い、干渉する場合は付属関係を
//			付ける。
//		・“窓”、“扉”、“開口”の場合は、付属関係にある“壁”との図形干渉チェックを行い、
//			干渉しない場合は付属関係を切り、その“壁”の再表示を行う。
//			既存の“壁”との図形干渉チェックを行い、干渉する場合は付属関係を付け、その“壁”の
//			再表示を行う。
//
static MINT	CmdAfterModify(
						MDIDSET&	i_GidEnt	// エンティティ−ＩＤセット
				);

//===========================================================================
//		物図形の強調表示（エコーバック）
//
//		指定物の強調表示（エコーバック）を行う。
//		強調表示は、NonHighlighting、NonHighlightingAllで解除されるか、CmdMove等で再表示されるまで
//		継続する。
//		強調表示中にCmdMove等で再表示する場合は、ClearHighlightingListで強調表示を行ったエンティティの
//		リストを開放する必要がある。
//
static MINT	EchoHighlighting(
						MDIDSET&	i_GidEnt	// エンティティ−ＩＤセット
				);

//===========================================================================
//		強調表示（エコーバック）を元に戻す（１つ）
//
//		指定エンティティがEchoHighlightingで強調表示されている場合に表示を戻す。
//		指定エンティティが強調表示されていない場合には何も行わない。（戻り値＝０）
//
static MINT	NonHighlighting(
						MDID		i_idEnt		// エンティティ−ＩＤ
				);

//===========================================================================
//		強調表示（エコーバック）を元に戻す
//
//		EchoHighlightingで強調表示されている物の表示を全て戻す。
//
static MINT	NonHighlightingAll();

//===========================================================================
//		強調表示（エコーバック）セットの強制クリア（再表示なし）
//
//		EchoHighlightingで強調表示したエンティティのリストを開放する。
//		表示は行わない。
//
//		強調表示中にCmdMove等で再表示した場合は、本関数で強調表示を行ったエンティティのリストを
//		開放する必要がある。
//
static MINT	ClearHighlightingSet();

//===========================================================================
//		エンティティの生成
//
//		レイヤーIdを指定して、そのレイヤーIdに付随するエンティティを生成する。
//		指定レイヤーIdが存在しない場合や、エンティティの生成に失敗した場合はo_pidEnt=0で返す。
//
static MINT	CreateEnt(
						MDID		i_idLyr,	// レイヤーID
						MDID*		o_pidEnt,	// エンティティID
						MINT		i_sz=10		// 初期子Idバッファサイズ /*=10*/
				);

//===========================================================================
//		エンティティの削除
//
//		指定したエンティティIdのエンティティを削除する。
//
static MINT	DeleteEnt(
						MDID		i_idEnt		// エンティティID
				);

//===========================================================================
//		エンティティに図形を設定する
//
//		図形情報が部品配置の場合は、エンティティに部品を関係付ける。
//
static MINT	SetFig(
						MDID		i_idEnt,	// エンティティ-ID
						MDFIG&		i_pFig		// 図形情報
				);
static MINT	SetFigPmt(
						MDID		i_idEnt,	// エンティティ-ID
						MDPMT&		i_Pmt		// 図形情報
				);

//===========================================================================
//		エンティテイに部材配置の設定
//
//		エンティテイに指定部品を配置する部材配置プリミティブを設定する。
//		配置壱と方向、大きさは配置座標系マトリックスで指定する。
//
static MINT	SetPartPlc (
						MDID		i_idEnt,	// エンティテイID
						MgMat3E*		i_pmat,		// 配置座標系マトリックス
						MDID		i_idB		// 部品ID
				);

//===========================================================================
//		エンティティの図形情報を得る
//
//		図形情報が無設定の場合は、o_pFig＝０を返す。
//
static MINT	GetFig(
						MDID		i_idEnt,	// エンティティ-ID
						MDFIG*		o_pFig		// 図形情報
				);

//===========================================================================
//		エンティテイの図形情報を変更
//
static MINT	CngZukei(
						MDID		i_idEnt,	// エンティテイID
						MDFIG&		i_Fig		// 図形情報
				);

//===========================================================================
//		属性（ポインタ）をエンティティに設定する
//
static MINT	SetAttr(
						MDID		i_idEnt,	// エンティティ-ID
						MSHORT		i_iTpAtr,	// 属性タイプ
						void*		i_pAtr		// 属性
				);

//===========================================================================
//		エンティティの属性（ポインタ）を得る
//
static void* GetAttr(
						MDID		i_idEnt		// エンティティ-ID
				);

//===========================================================================
//		エンティティからレイヤーIdを得る
//
//		エンティティを指定してそのものIdが付随するレイヤーIdを得る。
//		レイヤーIdが見つからない場合は、o_pidLyr＝０を返す。
//
static MINT	GetLyrId(
						MDID		i_idEnt,	// エンティティID
						MDID*		o_pidLyr	// レイヤーID
				);

//===========================================================================
//		カレントのレイヤーIdに図形を持つエンティティを作る（作成のみ、表示等はしない）
//
//		カレントレイヤーに指定された図形を持つエンティティを生成する。
//		カレントレイヤーIdが未生成の場合は、レイヤーIdの生成も行う。
//		グラフィックウィンドウへの表示は行わない。
//
//		本関数は、CreateId、Zukei:Create、LinkZukeiDprの３つの関数を順次実行するのと
//		ほぼ同等の処理を行う。
//
static MINT	CreateFigEnt(
						MDFIG&		i_stFig,	// 図形情報
						MDID*		o_idEnt		// エンティティ-ID
				);

//===========================================================================
//		エンティティのレイヤー変更（レイヤー間移動）
//
//		指定のエンティティを指定されたレイヤーIdに移動する。
//		元のレイヤーIdと移動先のレイヤーIdでグループが異なっていた場合は、
//		移動するエンティティの図形の親座標系を付け替え、図形データの座標変換を行う。
//		（結果、基準座標系から見た図形の位置は変わらない。）
//
static MINT	CngLyr(
						MDIDSET&	i_GidEnt,	// エンティティIDセット
						MDID		i_idLyr		// レイヤーID
				);

//===========================================================================
//		エンティティのレイヤー間コピー
//
//		指定のエンティティを指定されたレイヤーに複写する。
//		lker=0の場合は、元のレイヤーに複写する。
//		元のレイヤーと複写先のレイヤーでグループが異なっていた場合は、
//		複写後のエンティティの図形の親座標系は複写先のグループの座標系となる。
//		図形データの座標変換も行う。（結果、基準座標系から見た図形の位置は変わらない。）
//
static MINT	CpyEnt(
						MDIDSET&	i_GidEnt,	// エンティティ-IDセット
						MDID		i_idLyr,	// レイヤーID
						MDIDSET*	o_pGidEnt	// コピーエンティティ-IDセット
				);

//===========================================================================
//		ＢＯＸ内の図形Dprを得る
//
//		ウィンドウに表示されている図形の内、box範囲内に完全包含される図形を得る。
//		boxの最小点・最大点はカレント座標系の座標値で返す。
//
static MINT	GetEntInBox(
						MDID		i_idWin,	// ウィンドウID
						MgMinMaxR3&	i_rectArea,	// box座標値（最小・最大点）
						MDIDSET*	o_pGidEnt	// エンティティ-IDセット
				);

//===========================================================================
//		関係付け
//
//		ker1とker2を指定の関係で関係付ける。
//		この関係はSearch関数で検索できる。
//
//		関係IDについては、別紙関係一覧を参照。
//
static MINT	Link(
						MDID		i_idEnt1,	// エンティティID1
						MINT		i_icdRef1,	// エンティティID1からエンティティID2への関係コード
						MDID		i_idEnt2,	// エンティティID2
						MINT		i_icdRef2	// エンティティID2からエンティティID1への関係コード
				);

//===========================================================================
//		関係切り
//
//		ker1とker2の間に付けられている指定の関係を切る。
//
//		関係IDについては、別紙関係一覧を参照。
//
static MINT	DeLink(
						MDID		i_idEnt1,	// エンティティID1
						MINT		i_icdRef1,	// エンティティID1からエンティティID2への関係コード
						MDID		i_idEnt2,	// エンティティID2
						MINT		i_icdRef2	// エンティティID2からエンティティID1への関係コード
				);

//===========================================================================
//		関係検索
//
//		エンティティ1に指定の関係で関係付いているエンティティのリストを得る。
//
//		関係IDについては、別紙関係一覧を参照。
//
static MINT	Srch(
						MDID		i_idEnt,	// エンティティID
						MINT		i_icdRef,	// エンティティIDからの関係コード
						MDIDSET*	o_pGidEnt	// エンティティIDセット
				);

//===========================================================================
//		KCBの生成
//
//		キー検索のためのKCBを生成する。
//
static MINT	KeyInit(
						MDID*		o_pidKCB	// KCB-ID
				);

//===========================================================================
//		KCBの生成
//
//		指定されたキーで関係付ける。
//		この関係はKeySearch関数で検索できる。
//
static MINT	KeyLink(
						MDID		i_idKCB,	// KCB-ID
						MCHAR		i_sKey[],	// キー
						MDID		i_idInf		// Information-ID
				);

//===========================================================================
//		キーでの関係切り
//
//		指定されたキーでの関係を切る。
//
static MINT	KeyDeLink(
						MDID		i_idKCB,	// KCB-ID
						MCHAR		i_sKey[],	// キー
						MDID		i_idInf		// Information-ID
				);

//===========================================================================
//		キーでの検索
//
//		指定されたキーで関係付いているエンティティを得る。
//
static MINT	KeySearch(
						MDID		i_idKCB,	// KCB-ID
						MCHAR		i_sKey[],	// キー
						MDID*		o_pidInf	// Information-ID
				);

//===========================================================================
//		KCBの削除
//
//		キー検索のためのKCBを削除する。
//
static MINT	KeyDelete(
						MDID		i_idKCB		// KCB-ID
				);

//===========================================================================
//		アクセスルートの問い合わせ	
//
//		キーワードを指定してアクセスルートに登録されているInformationを得る。
//
static MINT	GetAccessRoot(
						MCHAR		i_sKey[],	// キー
						MDID*		o_pidInf	// Information-ID
												//	（キーワードが存在しない場合は０）
				);

//===========================================================================
//		アクセスルートの登録	
//
//		キーワードを指定してアクセスルートにInformation-IDを登録する。
//		指定されたキーワードが存在した場合は、上書きする。
//
static MINT	PutAccessRoot(
						MCHAR		i_sKey[],	// キー
						MDID*		i_idInf		// Information-ID
												//	（キーワードが存在しない場合は０）
				);

//===========================================================================
//		アクセスルートの削除	
//
//		指定されたキーワードのアクセスルートの登録を削除する。
//		指定されたキーワードが登録されていない場合はエラー。
//
static MINT	DeleteAccessRoot(
						MCHAR		i_sKey[]	// キー
				);
};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DSys.h
//
//		システム
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DSYS_DO
	#pragma message( "<<< DSys・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DSys・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DSys
{
public:
//===========================================================================
//		データベースオープン
//
//		指定されたモードにより、AUZファイル名をオープンする。
//		既存ファイルの場合は、保存されている環境で画面が表示される。
//		オープンをCALLする前に、カレントDBをクローズしておくこと。
//
//		オープンモードは、指定データベースファイルへのアクセスモード。
//		シェアモードは、指定データベースファイルへの共有モードで、本関数でオープン後、
//		CloseAuzModelでクローズするまでの間のアクセスを制限する。
//
//		＜補足＞
//		・リードオンリーでシェアする場合
//			1つ目のオープン時に
//			オープンモードを”READ”、シェアモードを”READ”を指定し、
//
//			2つ目のオープン時にも同様に
//			オープンモードを”READ”、シェアモードを”READ”を指定するとシェアエラーにならない。
//
//		・リードライトでシェアする場合
//			1つ目のオープン時に
//			オープンモードを”OLD”、シェアモードを”WRITE”を指定し、
//
//			2つ目のオープン時にも同様に
//			オープンモードを”OLD”、シェアモードを”WRITE”を指定するとシェアエラーにならない。
//
static MINT	MdsOpenAuzModel(							// ステータス
												//	0: 正常
												//	2: 引数不正
												//	3: データベースがクローズされていない
												//	4: NEWTOでファイルが存在した
												//	5: OLD、READでファイルが存在しない
												//	6: シェアエラー
												//	7: その他オープンエラー

						MCHAR		i_sFName[],	// データベースファイル名
						MCHAR		i_smdOpen[],// オープンモード
												//	NEWTO     新規（ファイルが存在すればエラー）
												//	NEWOVER  新規（ファイルが存在すれば削除）
												//	OLD　      既存（READ/WRITEでアクセス）
												//	READ       既存（READ-ONLYでアクセス）
						MCHAR		i_smdhare[]	// シェアモード
												//	NON　　　　不可
												//	READ　　　READのみ可
												//	WRITE  　　READ/WRITE可
				);

//===========================================================================
//		データベース上書き保存
//
//		オープン中のデータベースファイルを上書き保存する。
//
static MINT	MdsSaveAuzModel();							// ステータス
												//	0:正常
												//	7:ファイル名未定（テンポラリオープン中）
												//	8:書き込み不可（READ-ONLY）
												//	その他:書き込みエラー

//===========================================================================
//		データベース名前を付けて保存
//
//		オープン中のデータベースファイルに名前を付けて保存する。
//
static MINT	MdsSaveasAuzModel(					// ステータス
												//	0: 正常
												//	2: モード不正
												//	4: TOでファイルが存在した
												//	8: 書き込みエラー
												//	その他:内部エラー
						MCHAR		i_sFName[],	// データベースファイル名
						MCHAR		i_smdSave[]	// モード
												//	TO		ファイルが存在すればエラー
												//	OVER	ファイルが存在すれば削除
				);

//===========================================================================
//		データベースクローズ
//
//		オープン中のデータベースファイルをクローズする。
//
static MINT	MdsCloseAuzModel(					// ステータス
												//　0:正常
												//　2:モード不正
												// その他:内部エラー
						MCHAR		i_smdClose[]// クローズモード
												//	CANCEL   キャンセル
												//	OVER　      保存
				);

//===========================================================================
//		環境設定の識別文字列からパス文字列を得る
//
//		環境設定の識別文字列からパス文字列を得る。
//		初期値は、システムディレクトリーにあるauz.sysファイルに記述してある。
//
static MINT	MdsGetEnvPath(						// ステータス
												//	0: 正常
												//	2: モード不正
												//	4: TOでファイルが存在した
												//	8: 書き込みエラー
												//	その他:内部エラー
						MCHAR		i_sKey[],	// 識別文字列
						MCHAR		o_sPath[],	// パス文字列
						MINT		i_szPath	// パス文字列バッファサイズ
				);

//===========================================================================
//		環境設定に識別文字列とパス文字列を設定する
//
//		環境設定の識別文字列に対するパス文字列を設定する。
//		識別文字列は、１６バイトまでとする。
//		パス文字列は２６０バイトまでとする。
//
static MINT	MdsSetEnvPath(						// ステータス
												//	0: 正常
												//	2: モード不正
												//	4: TOでファイルが存在した
												//	8: 書き込みエラー
												//	その他:内部エラー
						MCHAR		i_sKey[],	// 識別文字列
						MCHAR		i_sPath[]	// パス文字列
				);

//===========================================================================
//		環境設定の識別文字列からパス文字列を得る
//
//		環境設定の識別文字列からパス文字列を得る。
//		初期値は、システムディレクトリーにあるauz.sysファイルに記述してある。
//
static MINT	MdsGetTitle(						// ステータス
												//	0: 正常
												//	2: モード不正
												//	4: TOでファイルが存在した
												//	8: 書き込みエラー
												//	その他:内部エラー
						MCHAR		i_sKey[],	// 識別文字列
						MCHAR		o_sPath[],	// パス文字列
						MINT		i_szPath	// パス文字列バッファサイズ
				);

//===========================================================================
//		タイトル文字列の設定
//
//		ウィンドウタイトルに表示する文字列を設定する。
//		現在のインデックスは
//		　　　　0:モジュール名
//		　　　　1:データベースファイル名
//		　　　　2:カンレトグループ名
//		　　　　3: カンレトレイヤー名
//		で利用している。
//
static MINT	MdsSetTitle(						// ステータス
												//	0:正常
												//　2:tidx不正
												//	その他:内部エラー
						MINT		i_szPath,	// タイトルインデックス
						MCHAR		o_sPath[]	// タイトル文字列
				);

//===========================================================================
//		タイトル文字列の表示
//
//		指定されているタイトル文字を合成して表示する。
//
static MINT	MdsDispTitle();

//===========================================================================
//		データベースファイル名を得る
//
//		現在オープンされているデータベースファイル名を得る。
//
static MINT	MdsGetAuzModelName(					// ステータス
												//	0:正常
												//	1:バッファーオーバフロー-
						MCHAR*		o_sPath[]	// データベースファイル名
				);

//===========================================================================
//		システムディレクトリの問い合わせ
//
//		システムディレクトリを問い合わせる。
//
static MINT	MdsGetExeDir(						// ステータス
												//	0:正常
												//	1:バッファーオーバフロー-
						MCHAR*		o_sPath[]	// システムディレクトリパス
				);

//===========================================================================
//		詳細エラーコードを得る
//
static MINT	MdsGetErr(							// 詳細エラーコード
												//	0:正常
												//	1:バッファーオーバフロー-
						MCHAR*		o_sPath[]	// システムディレクトリパス
				);
};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: DUE.h
//
//		ユーザーEXIT
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DUE_DO
	#pragma message( "<<< DUE・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DUE・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DUE
{
public:
//===========================================================================
//		ユーザーEXIT　システム起動時
//
//		指定された光源の図形情報を得る
//		
//		システム起動時のユーザーEXIT関数。
//
//		ユーザーEXITとは、システムのベース部分に割込み処理をいれる場合にカスタマーが
//		作成するDLL関数である。
//		DLLファイル名は「cgsUE.dll」固定。
//		上記DLLに本関数Ｉ／Ｆを作成し、システム実行フォルダに置く事で動作する。
//
//		本関数は、システム起動時に一度だけ実行される。
//
//
void	MduSystem_Init();

//===========================================================================
//		ユーザーEXIT　システム終了時
//
//		システム終了時のユーザーEXIT関数。
//
//		ユーザーEXITとは、システムのベース部分に割込み処理をいれる場合にカスタマーが
//		作成するDLL関数である。
//		DLLファイル名は「cgsUE.dll」固定。
//		上記DLLに本関数Ｉ／Ｆを作成し、システム実行フォルダに置く事で動作する。
//
//		本関数は、システム終了時に一度だけ実行される。
//
void	MduSystem_Term();

//===========================================================================
//		ユーザーEXIT　データベースOPEN後
//
//		データベースOPEN後のユーザーEXIT関数。
//
//		ユーザーEXITとは、システムのベース部分に割込み処理をいれる場合にカスタマーが
//		作成するDLL関数である。
//		DLLファイル名は「cgsUE.dll」固定。
//		上記DLLに本関数Ｉ／Ｆを作成し、システム実行フォルダに置く事で動作する。
//
//		本関数は、システムの図面データベースのOPEN後に実行される。
//
//		注）データベースID（vid）はオープンされている図面データベース毎に振られるユニークな
//		IDである。
//		現バージョンでは必ずvid=1となる。
//
static MINT	MduDB_Open_After(
						MDID		i_idDB		// データベースID
				);

//===========================================================================
//		ユーザーEXIT　データベースCLOSE後
//
//		データベースOPEN後のユーザーEXIT関数。
//
//		ユーザーEXITとは、システムのベース部分に割込み処理をいれる場合にカスタマーが
//		作成するDLL関数である。
//		DLLファイル名は「cgsUE.dll」固定。
//		上記DLLに本関数Ｉ／Ｆを作成し、システム実行フォルダに置く事で動作する。
//
//		本関数は、システムの図面データベースのCLOSE後に実行される。
//
//		注）データベースID（vid）はオープンされている図面データベース毎に振られるユニークな
//		IDである。
//		現バージョンでは必ずvid=1となる。
//
static MINT	MduDB_Close_After(
						MDID		i_idDB		// データベースID
				);

//===========================================================================
//		ユーザーEXIT　ウィンドウOPEN後
//
//		ウィンドウOPEN後のユーザーEXIT関数。
//
//		ユーザーEXITとは、システムのベース部分に割込み処理をいれる場合にカスタマーが
//		作成するDLL関数である。
//		DLLファイル名は「cgsUE.dll」固定。
//		上記DLLに本関数Ｉ／Ｆを作成し、システム実行フォルダに置く事で動作する。
//
//		本関数は、システムのグラフィックウィンドウのOPEN後に実行される。
//
static MINT	MduWindow_Open_After(
						MDID		i_idWin		// ウィンドウID
				);

//===========================================================================
//		ユーザーEXIT　ウィンドウCLOSE後
//
//		ウィンドウオープン後のユーザーEXIT関数
//
//		ユーザーEXITとは、システムのベース部分に割込み処理をいれる場合にカスタマーが
//		作成するDLL関数である。
//		DLLファイル名は「cgsUE.dll」固定。
//		上記DLLに本関数Ｉ／Ｆを作成し、システム実行フォルダに置く事で動作する。
//
//		本関数は、システムのグラフィックウィンドウのCLOSE後に実行される。
//
static MINT	MduWindow_Close_After(
						MDID		i_idWin		// ウィンドウID
				);
};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: Win.h
//
//		ウィンドウ
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DWIN_DO
	#pragma message( "<<< DWin・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DWin・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DWin
{
public:
//===========================================================================
//		座標変換マトリックスを求める（視点座標 -> DB座標）
//
static MINT	MdwTransMatrixViewToWorld(
						MDID		i_idWin,	// ウィンドウＩＤ
						MDID		i_idDB,		// DB座標系
						MgMat3E*		o_pmatVtD	// 座標変換マトリックス(視点座標 -> DB座標)
				);

//===========================================================================
//		座標変換マトリックスを求める（DB座標 -> 視点座標）
//
static MINT	MdwTransMatrixWorldToView(
						MDID		i_idDB,		// DB座標系
						MDID		i_idWin,	// ウィンドウＩＤ
						MgMat3E*		o_pmatDtV	// 座標変換マトリックス(視点座標 -> DB座標)
				);

//===========================================================================
//		座標変換マトリックスを求める（pixel座標 -> 視点座標）
//
static MINT	MdwTransMatrixPixelToView(
						MDID		i_idWin,	// ウィンドウＩＤ
						MgMat3E*		o_pmatPtV	// 座標変換マトリックス(pixel座標 -> 視点座標)
				);

//===========================================================================
//		座標変換マトリックスを求める（視点座標 -> pixel座標）
//
static MINT	MdwTransMatrixViewToPixel(
						MDID		i_idWin,	// ウィンドウＩＤ
						MgMat3E*		o_pmatVtP	// 座標変換マトリックス(視点座標 -> pixel座標)
				);


//===========================================================================
//		ウィンドウの視点座標変換マトリックスを取得する
//
static MINT	MdwGetEyeCoord(
						MDID		i_idWin,	// ウィンドウＩＤ
						MgMat3E*		o_pmatV		// 視点座標変換マトリックス（基準座標系での値）
				);

//===========================================================================
//		ウィンドウの視点座標変換マトリックスを設定する
//
static MINT	MdwSetEyeCoord(
						MDID		i_idWin,	// ウィンドウＩＤ
						MgMat3E*		i_pmatV		// 視点座標変換マトリックス（基準座標系での値）
				);

//===========================================================================
//		ウィンドウの機能番号に対する視点座標変換マトリックスを取得する
//
static MINT	MdwGetTypeEyeCoord(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgMat3E*		o_pmatV		// 視点座標変換マトリックス（基準座標系での値）
				);

//===========================================================================
//		ウィンドウの機能番号に対する視点座標変換マトリックスを設定する
//
static MINT	MdwSetTypeEyeCoord(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgMat3E*		i_pmatV		// 視点座標変換マトリックス（基準座標系での値）
				);

//===========================================================================
//		注視点を取得する
//
static MINT	MdwGetLookPoint(
						MDID		i_idWin,	// ウィンドウＩＤ
						MgPoint3*	o_pptLook	// 注視点座標（基準座標系での値）
				);

//===========================================================================
//		注視点を設定する
//
static MINT	MdwSetLookPoint(
						MDID		i_idWin,	// ウィンドウＩＤ
						MgPoint3*	i_pptLook	// 注視点座標（基準座標系での値）
				);

//===========================================================================
//		ウィンドウ機能番号に対する注視点を取得する
//
static MINT	MdwGetTypeLookPoint(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgPoint3*	o_pptLook	// 注視点座標（基準座標系での値）
				);

//===========================================================================
//		ウィンドウ機能番号に対する注視点を設定する
//
static MINT	MdwSetTypeLookPoint(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgPoint3*	i_pptLook	// 注視点座標（基準座標系での値）
				);

//===========================================================================
//		ウィンドウのクリッピング座標を取得する
//
static MINT	MdwGetZClipping(
						MDID		i_idWin,	// ウィンドウＩＤ
						MREAL		o_rZClp[2]	// クリッピング前面、後面
				);

//===========================================================================
//		ウィンドウのクリッピング座標を設定する
//
static MINT	MdwSetZClipping(
						MDID		i_idWin,	// ウィンドウＩＤ
						MREAL		i_rZClp[2]	// クリッピング前面、後面
				);

//===========================================================================
//		ウィンドウ機能番号に対するクリッピング座標を取得する
//
static MINT	MdwGetTypeZClipping(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL		o_rZClp[2]	// クリッピング前面、後面
				);

//===========================================================================
//		ウィンドウ機能番号に対するクリッピング座標を設定する
//
static MINT	MdwSetTypeZClipping(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL		i_rZClp[2]	// クリッピング前面、後面
				);

//===========================================================================
//		ウィンドウのウィンドウ表示属性を取得する
//
static MINT	MdwGetDispAtr(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL		o_iDspA[4]	// 表示属性テーブル
												//	[0]: 塗り潰し（0=ﾜｲﾔｰ、1=ｿﾘｯﾄﾞ、2=既定）
												//	[1]:スムーズ（0=OFF、1=ON）
												//	[2]:スポット対応（0=OFF、1=ON）
												//	[3]:図形の取出し（1=奥、2=断面、3=奥と断面）
												//	（断面のみ有効）
				);

//===========================================================================
//		ウィンドウのウィンドウ表示属性を設定する
//
static MINT	MdwSetDispAtr(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL		i_iDspA[4]	// 表示属性テーブル
												//	[0]: 塗り潰し（0=ﾜｲﾔｰ、1=ｿﾘｯﾄﾞ、2=既定）
												//	[1]:スムーズ（0=OFF、1=ON）
												//	[2]:スポット対応（0=OFF、1=ON）
												//	[3]:図形の取出し（1=奥、2=断面、3=奥と断面）
												//	（断面のみ有効）
				);

//===========================================================================
//		ウィンドウ機能番号に対するウィンドウ表示属性を取得する
//
static MINT	MdwGetTypeDispAtr(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL		o_iDspA[4]	// 表示属性テーブル
												//	[0]: 塗り潰し（0=ﾜｲﾔｰ、1=ｿﾘｯﾄﾞ、2=既定）
												//	[1]:スムーズ（0=OFF、1=ON）
												//	[2]:スポット対応（0=OFF、1=ON）
												//	[3]:図形の取出し（1=奥、2=断面、3=奥と断面）
												//	（断面のみ有効）
				);

//===========================================================================
//		ウィンドウ機能番号に対するウィンドウ表示属性を設定する
//
static MINT	MdwSetTypeDispAtr(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL		i_iDspA[4]	// 表示属性テーブル
												//	[0]: 塗り潰し（0=ﾜｲﾔｰ、1=ｿﾘｯﾄﾞ、2=既定）
												//	[1]:スムーズ（0=OFF、1=ON）
												//	[2]:スポット対応（0=OFF、1=ON）
												//	[3]:図形の取出し（1=奥、2=断面、3=奥と断面）
												//	（断面のみ有効）
				);

//===========================================================================
//		ウィンドウのカレント拡大率を取得する
//
static MINT	MdwGetScale(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL*		o_prScale	// 拡大率
				);

//===========================================================================
//		ウィンドウのカレント拡大率を設定する
//
static MINT	MdwSetScale(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL		i_rScale	// 拡大率
				);

//===========================================================================
//		ウィンドウの表示領域の問い合わせを取得する
//
static MINT	MdwGetRange(
						MDID		i_idWin,	// ウィンドウＩＤ
						MgPoint3	o_ptArea[2]	// 表示領域（左下点、右上点）
												//	視点系での座標値
				);

//===========================================================================
//		ウィンドウの表示領域の問い合わせを設定する
//
static MINT	MdwSetRange(
						MDID		i_idWin,	// ウィンドウＩＤ
						MgPoint3	i_ptArea[2]	// 表示領域（左下点、右上点）
												//	視点系での座標値
				);

//===========================================================================
//		ウィンドウの画角を取得する（透視ウィンドウのみ）
//		指定されたウィンドウが透視ウィンドウ以外の場合は無効
//
static MINT	MdwGetAngle(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL*		o_prAgl		// 画角
				);

//===========================================================================
//		ウィンドウの画角を設定する（透視ウィンドウのみ）
//		指定されたウィンドウが透視ウィンドウ以外の場合は無効
//
static MINT	MdwSetAngle(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MREAL		i_rAgl		// 画角
				);

//===========================================================================
//		スクロール
//
static MINT	MdwScroll(
						MDID		i_idWin,	// ウィンドウId
						MgPoint2	i_vMv		// 移動ベクトル（視点座標系でのベクトル）
				);

//===========================================================================
//		パンニング
//
static MINT	MdwPanning(
						MDID		i_idWin,	// ウィンドウId
						MgPoint2	i_ptCnt		// 画面の中心としたい点（視点座標系での座標値）
				);

//===========================================================================
//		フィット表示（表示物が画面上に全て表示されるようにする）
//
static MINT	MdwFit( 
						MDID		i_idWin		// ウィンドウId
				);

//===========================================================================
//		フィット表示（表示物が画面上に全て表示されるようにする）
//
//		指定されたウィンドウの現在の視点情報を、そのウィンドウの初期表示の視点情報として記録する。
//		視点情報とは、視点座標、注視点、クリッピング等視点に関する値全てを含む。
//
static MINT	MdwSaveFirstView(
						MDID		i_idWin		// ウィンドウId
				);

//===========================================================================
//		初期表示を行う
//
//		指定されたウィンドウの視点情報を、記録されている初期表示の視点情報に設定して再描画する。
//		視点情報とは、視点座標、注視点、クリッピング等視点に関する値全てを含む。
//
static MINT	MdwSetFirstView(
						MDID		i_idWin		// ウィンドウId
				);

//===========================================================================
//		直前表示を行う
//
//		渡されたウィンドウの直前表示を行う。
//
//		ウィンドウは、視点座標系の変更やスクロール、拡大／縮小など視点が変更される度に
//		視点情報の履歴を記録する。
//		本関数は、この履歴を遡って１つ前の視点に戻し表示を行う。（アンドゥ）
//		DispViewAfterは、本関数で戻された視点を１つ後に直し表示を行う。（リドゥ）
//
//		視点変更の履歴は、ウィンドウ毎に記録され、ウィンドウをクローズすると破棄される。
//
static MINT	MdwDispViewBefore(
						MDID		i_idWin		// ウィンドウId
				);

//===========================================================================
//		直後表示を行う
//
//		渡されたウィンドウの直後表示を行う。
//
//		ウィンドウは、視点座標系の変更やスクロール、拡大／縮小など視点が変更される度に
//		視点情報の履歴を記録する。
//		DispViewBeforeは、この履歴を遡って１つ前の視点に戻し表示を行う。（アンドゥ）
//		本関数は、DispViewBeforeで戻された視点を１つ後に直し表示を行う。（リドゥ）
//
//		視点変更の履歴は、ウィンドウ毎に記録され、ウィンドウをクローズすると破棄される。
//
static MINT	MdwDispViewAfter(
						MDID		i_idWin		// ウィンドウId
				);

//===========================================================================
//		視点を記録する
//
//		渡されたウィンドウの現在の視点を記録する。
//		記録した視点はDispViewListで戻すことができる。
//
//		視点情報は機能番号毎に記録される。（最大１０個）
//		同じ機能のウィンドウが複数オープンされている場合、記録した情報は共有される。
//		　ウィンドウが全てクローズされた場合でも、記録した情報は保持される。
//
static MINT	MdwSaveViewList(
						MDID		i_idWin,	// ウィンドウId
						MDID		i_idView	// 視点記録インデックス
				);

//===========================================================================
//		記録された視点に変更し表示
//
//		渡されたウィンドウの視点をDispViewListで記録された視点に変更する。
//
//		視点情報は機能番号毎に記録される。（最大１０個）
//		同じ機能のウィンドウが複数オープンされている場合、記録した情報は共有される。
//		　ウィンドウが全てクローズされた場合でも、記録した情報は保持される。
//
static MINT	MdwDispViewList(
						MDID		i_idWin,	// ウィンドウId
						MDID		i_idView	// 視点記録インデックス
				);

//===========================================================================
//		視点記録をクリアする（１つ）
//
//		渡された視点記録インデックスに記録されている視点情報を１つ消去する。
//
static MINT	MdwClearViewList(
						MDID		i_idView	// 視点記録インデックス
				);

//===========================================================================
//		視点記録をクリアする
//
//		渡されたウィンドウの機能番号に記録されている視点情報を全て消去する。
//
static MINT	MdwClearViewListAll(
						MDID		i_idWFn		// ウィンドウ機能番号
				);

//===========================================================================
//		背景イメージを取得
//
//		ウィンドウの背景に貼り付けるイメージの情報を取得する。
//
static MINT	MdwGetBackImage(
						MDID		i_idWin,	// ウィンドウId
						MINT*		o_pmdPst,	// 貼り付けるモード
												//	0:ウィンドウにあわせる
												//　1:縦横比固定　小さいほうにあわせる
												//　2:縦横比固定　大きいほうにあわせる
						MINT*		o_pmdDsp,	// 表示モード　0:なし　1:外部ファイル　2: テクスチャ
						MCHAR		o_snmT[],	// テクスチャorファイル名
						MINT		i_sznmT		// o_snmTバッファーサイズ
				);

//===========================================================================
//		背景イメージを設定
//
//		ウィンドウの背景に貼り付けるイメージを設定する。
//		この関数では、イメージに関する情報を設定するだけで表示は行わない。
//		設定後は、描画関数
//		　　DispBackimage
//		を必ず呼ぶ必要がある。
//
static MINT	MdwSetBackImage(
						MDID		i_idWin,	// ウィンドウId
						MINT		i_mdPst,	// 貼り付けるモード
												//	0:ウィンドウにあわせる
												//　1:縦横比固定　小さいほうにあわせる
												//　2:縦横比固定　大きいほうにあわせる
						MINT		i_mdDsp,	// 表示モード　0:なし　1:外部ファイル　2: テクスチャ
						MCHAR		i_snmT[],	// テクスチャorファイル名
						MINT		i_nnmT		// ファイル名サイズ
				);

//===========================================================================
//		背景イメージの表示
//
//		ウィンドウの背景に設定されたイメージを表示する。
//
static MINT	MdwDispBackImage(
						MDID		i_idWin		// ウィンドウId
				);

//===========================================================================
//		ウィンドウ領域を取得
//
//		ウィンドウ描画領域を取得する。タイトル部分は含めない。
//
//		ウィンドウ描画領域は、MDIクライアントの描画領域の左上を基点（0,0）とした
//		左下点（X,Y）・右上点（X,Y）を返す。
//
static MINT	MdwGetRect(
						MDID		i_idWin,	// ウィンドウId
						CPoint		i_iRect[2]	//	ウィンドウ領域（ピクセル）(左下、右上)
				);

//===========================================================================
//		ウィンドウ領域を設定
//
//		ウィンドウ描画領域を設定する。タイトル部分は含めない。
//
//		ウィンドウ描画領域は、MDIクライアントの描画領域の左上を基点（0,0）とした
//		左下点（X,Y）・右上点（X,Y）で設定する。
//
static MINT	MdwSetRect(
						MDID		i_idWin,	// ウィンドウId
						CPoint		i_iRect[2]	//	ウィンドウ領域（ピクセル）(左下、右上)
				);

//===========================================================================
//		ウィンドウ領域を設定
//
//		ウィンドウ描画領域を設定する。タイトル部分は含めない。
//
//		ウィンドウ描画領域は、MDIクライアントの描画領域の左上を基点（0,0）とした
//		左下点（X,Y）・右上点（X,Y）で設定する。
//
static MINT	MdwSetState(
						MDID		i_idWin,	// ウィンドウId
						INT			i_mdDsp		// モード
												//　1:　最小化（アイコン化）
												//	2:　最大化
												//	0:　縮小（元に戻す）
				);

//===========================================================================
//		ウィンドウの整列
//
//		オープンされているタイトル付きウィンドウの整列を行う。
//		オープンされているウィンドウがカスケードタイプの場合は無効。（戻り値＝０で返す）
//
//		本関数はGUIの「表示」メニュー下の並べ替えメニューと同様の動作を行う。
//
static MINT	MdwAlignment(
						INT			i_mdDsp		// 表示モード
												//	1 : 重ねて表示
												//	2 : 上下に並べて表示
												//	3 : 左右に並べて表示
												//	4 : 予約（未使用）
												//	5 : アイコンの整列
				);

//===========================================================================
//		オープンモード（カスケードタイプ）を取得
//
//		現在オープンされているウィンドウのカスケードタイプを問い合わせる。
//		ウィンドウが１枚もオープンされていない場合や、カスケード以外
//		（タイトル付きウィンドウ）がオープンされている場合は、戻り値＝０を返す。
//
static MINT	MdwGetCascadeMode(
						INT			i_mOpn		// オープンモード
												//	1:　１面
												//	2:　２面（横並び）（左・右）
												//	3:　２面（縦並び）（上・下）
												//	4:　３面（左・右上・右下）
												//	5:　４面（左上・右上・左下・右下）
												//	0:　ウィンドウ無し
												//	　　　またはタイトル付きウィンドウ
				);

//===========================================================================
//		自動スクロール有効フラグの問い合わせ
//
//		GUIの操作で、ウィンドウの端でマウスクリック・ドラッグ時に
//		画面をスクロールする機能を有効にする／しないのフラグを問い合わせる。
//
//		このフラグはシステム全体で共通であり、オープンされている全ウィンドウ、
//		および以後生成する全てのウィンドウに適用される。
//
static MINT	MdwGetAutoScrollFlg();				// 自動スクロール有効フラグ
												//　0:　無効
												//　1:　有効

//===========================================================================
//		自動スクロール有効フラグの設定
//
//		GUIの操作で、ウィンドウの端でマウスクリック・ドラッグ時に
//		画面をスクロールする機能を有効にする／しないのフラグを設定する。
//
//		このフラグはシステム全体で共通であり、オープンされている全ウィンドウ、
//		および以後生成する全てのウィンドウに適用される。
//
static MINT	MdwSetAutoScrollFlg(
						MINT		i_ifAtScl	// 自動スクロール有効フラグ
												//　0:　無効
												//　1:　有効
				);

//===========================================================================
//		拡大ホイール方向の問い合わせ
//
//		マウスホイールの回転によるウィンドウ拡大／縮小の操作における、
//		ホイールの回転方向を問い合わせる。
//
//		フラグ値＝０の場合
//		　手前方向：縮小
//		　奥　方向：拡大
//		フラグ値＝１の場合
//		　手前方向：拡大
//		　奥　方向：縮小
//
static MINT	MdwGetWheelFlg();					// 拡大ホイール方向フラグ
												//　0:　奥方向で拡大
												//　1:　手前方向で拡大

//===========================================================================
//		拡大ホイール方向の問い合わせ
//
//		マウスホイールの回転によるウィンドウ拡大／縮小の操作における、
//		ホイールの回転方向を問い合わせる。
//
//		フラグ値＝０の場合
//		　手前方向：縮小
//		　奥　方向：拡大
//		フラグ値＝１の場合
//		　手前方向：拡大
//		　奥　方向：縮小
//
static MINT	MdwSetWheelFlg(
						MINT		i_ifWheel	// 拡大ホイール方向フラグ
												//　0:　奥方向で拡大
												//　1:　手前方向で拡大
				);

//===========================================================================
//		アイコンメニュー表示フラグの設定
//
//		ウィンドウ下部のアイコンメニューを表示する／しないのフラグを設定する。
//		このフラグはシステム全体で共通であり、オープンされている全ウィンドウ、
//		および以後生成する全てのウィンドウに適用される。
//
static MINT	MdwSetIconMenuFlg(
						MINT		i_ifACDsp	// アイコンメニュー表示フラグ
												//　0:　表示しない
												//　1:　表示する
				);

//===========================================================================
//		ウィンドウオープン時の初期表示のモードを問い合わせる。
//
//		本関数は、GUIの「ウィンドウ」−「設定」メニューで表示されるウィンドウ設定表の
//		“初期表示”の値を問い合わせる。
//
static MINT	MdwGetFirstDispMode();				// 表示モード
												//	0:　カレントレイヤのみ表示
												//	1:　全て表示
												//　2:　何も表示しない

//===========================================================================
//		ウィンドウオープン時の初期表示のモードを設定する。
//
//		本関数は、GUIの「ウィンドウ」−「設定」メニューで表示されるウィンドウ設定表の
//		“初期表示”の値を設定する。
//
static MINT	MdwSetFirstDispMode(
						MINT		i_mdDsp		// 表示モード
												//	0:　カレントレイヤのみ表示
												//	1:　全て表示
												//　2:　何も表示しない
				);

//===========================================================================
//		ウィンドウオープン時の縮尺のモードおよび初期値を問い合わせる。	
//
//		本関数は、GUIの「ウィンドウ」−「設定」メニューで表示されるウィンドウ設定表の
//		“縮尺”の各値を問い合わせる。
//
static MINT	MdwGetDefaultScale(	
						MDID*		i_pidWFn,	// モード
												//　0:　設定された縮尺でオープンする
												//　1:　カレントウィンドウの縮尺でオープンする
												//　2:　フィット表示でオープンする
						MREAL*		o_pScl		// 縮尺の分母（mode=0のときのみ有効）
				);

//===========================================================================
//		ウィンドウオープン時の縮尺のモードおよび初期値を設定する。
//
//		本関数は、GUIの「ウィンドウ」−「設定」メニューで表示されるウィンドウ設定表の
//		“縮尺”の各値を設定する。
//
static MINT	MdwSetDefaultScale(	
						MDID		i_idWFn,	// モード
												//　0:　設定された縮尺でオープンする
												//　1:　カレントウィンドウの縮尺でオープンする
												//　2:　フィット表示でオープンする
						MREAL		i_Scl		// 縮尺の分母（mode=0のときのみ有効）
				);

//===========================================================================
//		ウィンドウオープン時の大きさ問い合わせ	
//
//		ウィンドウオープン時の大きさのモードおよび幅、高さの初期値を問い合わせる。
//
//		本関数は、GUIの「ウィンドウ」−「設定」メニューで表示されるウィンドウ設定表の“大きさ”の
//		各値を問い合わせる。
//
static MINT	MdwGetDefaultSize(	
						MDID		i_idWFn		// モード
												//	0:　フルスクリーン
												//	1:　１／２
												//	2:　１／４
												//	3:　幅×高　指定
												//	幅　（ピクセル値）（mode=3の時のみ有効）
												//	高さ（ピクセル値）（mode=3の時のみ有効）
				);

//===========================================================================
//		ウィンドウオープン	
//
//		指定された機能のウィンドウを新規にオープンする。
//		既にカスケードタイプのウィンドウがオープンされている場合は、全ウィンドウクローズ後に
//		新規オープンされる。
//
//		機能番号は別紙「機能番号一覧」を参照。
//		ウィンドウ枠は、メインフレームのウィンドウ描画領域内のピクセル値で、
//		左上を基点（0,0）とした左下点（X,Y）・右上点（X,Y）を指定する。
//
//		本関数はタイトル付きウィンドウをオープンする。
//		カスケードウィンドウをオープンする場合は、OpenExを使用する。
//
static MINT	MdwSetDefaultSize(	
						MDID		i_idWFn,	// ウィンドウ機能番号
						CPoint		i_iRect[2],	// ウィンドウ領域（ピクセル）(左下、右上)
						MREAL		i_rScl,		// 拡大率（原寸=1.0）
						MINT		i_idWin		// ウィンドウId
				);

//===========================================================================
//		ウィンドウオープン	
//
//		指定された機能のウィンドウを新規にオープンする。
//		既にカスケードタイプのウィンドウがオープンされている場合は、全ウィンドウクローズ後に
//		新規オープンされる。
//
//		機能番号は別紙「機能番号一覧」を参照。
//		ウィンドウ枠は、メインフレームのウィンドウ描画領域内のピクセル値で、
//		左上を基点（0,0）とした左下点（X,Y）・右上点（X,Y）を指定する。
//
//		本関数はタイトル付きウィンドウをオープンする。
//		カスケードウィンドウをオープンする場合は、OpenExを使用する。
//
static MINT	MdwOpen(	
						MDID		i_idWFn,	// ウィンドウ機能番号
						CPoint		i_iRect[2],	// ウィンドウ領域（ピクセル）(左下、右上)
						MREAL		i_rScl,		// 拡大率（原寸=1.0）
						MINT		i_idWin		// ウィンドウId
				);

//===========================================================================
//		オープンするウィンドウの機能設定（OpenExに有効）	
//
//		OpenEXでカスケードタイプのウィンドウをオープンする際の各ウィンドウの機能番号を設定する。
//		オープンモードによりウィンドウの枚数と配置を指定する。
//		機能番号はオープンするウィンドウの枚数分を指定する。
//		（※modeに対応する配列数を保障する事。）
//
//		各モードに対して設定した機能番号は、システム終了時まで保持される。
//		規定値は下記の通り。
//		　1:　１面（透視）
//		　2:　２面（透視・平面）
//		　3:　２面（透視・平面）
//		　4:　３面（透視・平面・南立面）
//		　5:　４面（アクソメ・平面・南立面・東立面）
//
static MINT	MdwSetOpenType(	
						MINT		i_tpScm,	// オープンモード
												//　1:　１面
												//　2:　２面（横並び）（左・右）
												//　3:　２面（縦並び）（上・下）
												//	4:　３面（左・右上・右下）
												//	5:　４面（左上・右上・左下・右下）
						MINT		i_idWFn[4]	// ウィンドウ機能番号セット
												//	（modeの値により配列数が決まる。上記順序で返る。）
				);

//===========================================================================
//		カスケードタイプのウィンドウオープン	
//
//		カスケードタイプのウィンドウを新規にオープンする。
//		既にタイトル付きウィンドウがオープンされている場合は、全ウィンドウクローズ後に新規オープンされる。
//
//		オープンモードによりウィンドウの枚数と配置を指定する。
//		ウィンドウIDはオープンするウィンドウの枚数分を返す。
//		（※modeに対応する配列数を保障する事。）
//		各ウィンドウの機能番号は、事前にSetOpenTypeで指定する。
//
//		本関数はカスケードウィンドウをオープンする。
//		タイトル付きウィンドウをオープンする場合は、Openを使用する。
//
static MINT	MdwOpenEx(	
						MINT		i_tpScm,	// オープンモード
												//　1:　１面
												//　2:　２面（横並び）（左・右）
												//　3:　２面（縦並び）（上・下）
												//	4:　３面（左・右上・右下）
												//	5:　４面（左上・右上・左下・右下）
						MINT		o_idWin[4]	// ウィンドウＩＤセット
												//	（modeの値により配列数が決まる。上記順序で返る。）
				);

//===========================================================================
//		ウィンドウの削除
//
//		渡されたウィンドウを削除（クローズ）する。
//		他のウィンドウが1つ以上存在し、カスケードタイプで表示されている場合は、
//		残ウィンドウの位置・大きさが自動調整される。
//
static MINT	MdwClose(	
						MINT		i_idWin		// ウィンドウId
				);

//===========================================================================
//		オープンされているウィンドウを得る	
//
//		シノニムウィンドウとは、フレームを持たないウィンドウで、他のシノニム以外のウィンドウ上に
//		表示領域を持つウィンドウである。
//		親ウィンドウ（領域を貼り付けたウィンドウ）上に表示を行う以外は、通常のウィンドウと同じように
//		取り扱う。
//		親ウィンドウをクローズすると、シノニムウィンドウもクローズされる。
//
static MINT	MdwGetWindowList(	
						MINT		i_tpScm,	// 検索タイプ
												//　1:シノニムウィンドウを含む
												//　2:シノニムウィンドウを除く
						MINT		o_GidWin	// ウィンドウId | シノニムウィンドウIdセット
				);

//===========================================================================
//		指定ウィンドウを参照しているシノニムウィンドウを得る	
//
//		シノニムウィンドウとは、フレームを持たないウィンドウで、他のシノニム以外のウィンドウ上に
//		表示領域を持つウィンドウである。
//		親ウィンドウ（領域を貼り付けたウィンドウ）上に表示を行う以外は、通常のウィンドウと同じように
//		取り扱う。
//		親ウィンドウをクローズすると、シノニムウィンドウもクローズされる。
//
static MINT	MdwGetSynonymWindowList(	
						MINT		i_idWin,	// ウィンドウId |
						MINT		o_GidSWin	// シノニムウィンドウIdセット
				);

//===========================================================================
//		カレントウィンドウの取得
//
//		カレントウィンドウを問い合わせる。
//		ウィンドウが１つも存在しない場合は、戻り値=0を返す。
//
//		ウィンドウが１つ以上オープンされている場合、何れか１つのウィンドウがカレントウィンドウに
//		設定される。
//		カレントウィンドウは、常に最前面に表示される。
//		GUIで「印刷」や「ＤＸＦ出力」、工程表による視点変更等、１つのウィンドウに限定されるコマンドは
//		カレントウィンドウを対象とする。
//
MDID	MdwGetCur();							// ウィンドウId

//===========================================================================
//		カレントウィンドウの設定
//
//		渡されたウィンドウをカレントウィンドウに設定する。
//
static MINT	MdwSetCur(
						MDID		i_idWin		// ウィンドウId
				);

//===========================================================================
//		遅延モードの問い合わせ
//
//		渡されたウィンドウの遅延モードを問い合わせる。
//		遅延モードとは、ウィンドウの表示（描画）を抑制するモードで、主に各ビュー情報の設定や複数の
//		図形を表示する際に画面のちらつきを押さえ描画速度を向上するために使用する。
//
//		・遅延モードがONに設定されている場合、
//		SetEyeCoord等でビュー情報を変更したり、MEnt::CmdAfterCreate等で図形の表示を行ってもこれらの
//		関数呼び出し時には描画されない。その後、遅延モードOFFで本関数を実行すると描画される。
//		（※Refresh、RefreshAllは呼び出し時に描画される。）
//		・遅延モードがOFFに設定されている場合、
//		　描画は随時行われる。
//		ex)
//		　MdwSetDelayMode( wid , 1 );			// 遅延モード=ON
//		　 MEnt::CmdAfterCreate( mker, siz );	// 図形生成表示（描画は遅延される）
//		　 MEnt::EchoHighlighting( mker, siz );	// 図形強調表示（描画は遅延される）
//		　MdwSetDelayMode( wid , 0 );			// 遅延モード=OFF（生成図形を強調表示で描画）
//
static MINT	MdwGetDelayMode(
						MDID		i_idWin,	// ウィンドウId
						MDID*		o_pmdDly	// 遅延モード 1=on , 0=off
				);

//===========================================================================
//		遅延モードの設定
//
//		渡されたウィンドウの遅延モードを設定する。
//
static MINT	MdwSetDelayMode(
						MDID		i_idWin,	// ウィンドウId
						MDID		i_mdDly		// 遅延モード 1=on , 0=off
				);

//===========================================================================
//		全ウィンドウに対する遅延モードの設定
//
//		オープンされている全ウィンドウに遅延モードを設定する。
//
static MINT	MdwSetDelayModeAll(
						MDID		i_mdDly		// 遅延モード 1=on , 0=off
				);

//===========================================================================
//		ウィンドウの再表示
//
//		指定されたウィンドウの再表示を行う。
//		SetDelayModeでウィンドウに遅延モードが設定されている場合でも再表示を行う。

//
static MINT	MdwRefresh(
						MDID		i_idWin		// ウィンドウId
				);

//===========================================================================
//		全ウィンドウの再表示
//
//		オープンされている全てのウィンドウの再表示を行う。
//		SetDelayModeで遅延モードが設定されているウィンドウも再表示を行う。
//
static MINT	MdwRefreshAll();

//===========================================================================
//		機能番号の問い合わせ
//
//		指定ウィンドウの機能番号を問い合わせる。
//
static MINT	MdwGetType(
						MDID		i_idWin,	// ウィンドウId
						MDID*		o_pidWFn	// ウィンドウ機能番号
				);

//===========================================================================
//		機能番号の設定
//
//		指定ウィンドウの機能番号を設定する。
//
static MINT	MdwChangeType(
						MDID		i_idWin,	// ウィンドウId
						MDID		i_idWFn		// ウィンドウ機能番号
				);

//===========================================================================
//		機能番号に対する機能名の問い合わせ
//
//		機能名は最大１６文字（バイト）
//
static MINT	MdwGetTypeName(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MCHAR		o_snmFn,	// 機能名
						MINT*		o_sznmFn	// 機能名サイズ
				);

//===========================================================================
//		機能番号に対する原点位置の問い合わせ
//
//		渡されたウィンドウの作業面図形のグリッドの間隔を問い合わせる。
//
static MINT	MdwGetTypeOriginPosition(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgPoint2*	o_pptOrg	// ウィンドウ領域内（(0,0)-(1,1)）の原点位置
				);

//===========================================================================
//		機能番号に対する原点位置の設定
//
//		渡されたウィンドウの作業面図形のグリッドの間隔を設定する。
//
static MINT	MdwSetTypeOriginPosition(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgPoint2	i_ptOrg		// ウィンドウ領域内（(0,0)-(1,1)）の原点位置
				);

//===========================================================================
//		グリッド点間隔の問い合わせ
//
//		渡されたウィンドウの作業面図形のグリッドの間隔を問い合わせる。
//
static MINT	MdwGetGridSpan(
						MDID		i_idWin,	// ウィンドウId
						MREAL*		o_prSpn		// 作業面表示スパン
				);

//===========================================================================
//		グリッド点間隔の設定
//
//		渡されたウィンドウの作業面図形のグリッドの間隔を設定する。
//
static MINT	MdwSetGridSpan(
						MDID		i_idWin,	// ウィンドウId
						MREAL		i_rSpn		// 作業面表示スパン
				);

//===========================================================================
//		作業面表示フラグの問い合わせ
//
//		作業面の図形を　表示する／表示しない　のフラグ値を問い合わせる。
//
static MINT	MdwGetBasePlaneDispFlg(				// 表示フラグ
												//　0:表示しない
												//　1:表示する
				);

//===========================================================================
//		作業面ＦＬ連動フラグの設定
//
//		カレントグループ変更時に、平面およびアクソメウィンドウの作業面をグループ座標系の
//		フロアレベルに変更する／しない　のフラグ値を設定する。
//
static MINT	MdwSetBasePlaneDispFlg(
						MINT		i_ifDspF	// 表示フラグ
												//　0:表示しない
												//　1:表示する
				);

//===========================================================================
//		作業面ＦＬ連動フラグの問い合わせ
//
//		カレントグループ変更時に、平面およびアクソメウィンドウの作業面をグループ座標系の
//		フロアレベルに変更する／しない　のフラグ値を問い合わせる。
//
static MINT	MdwGetBasePlaneFLFlg(				// ＦＬ連動フラグ
												//　0:連動しない
												//　1:連動する
				);

//===========================================================================
//		作業面ＦＬ連動フラグの設定
//
//		カレントグループ変更時に、平面およびアクソメウィンドウの作業面をグループ座標系の
//		フロアレベルに変更する／しない　のフラグ値を設定する。
//
static MINT	MdwSetBasePlaneFLFlg(
						MINT		i_ifMvm		// ＦＬ連動フラグ
												//　0:連動しない
												//　1:連動する
				);

//===========================================================================
//		基準線表示フラグの問い合わせ
//
//		基準線の図形を　表示する／表示しない　のフラグ値を問い合わせる。
//
static MINT	MdwGetBaseAxisDispFlg(				// 表示フラグ
												//　0:表示しない
												//　1:表示する
				);

//===========================================================================
//		基準線表示フラグの設定
//
//		基準線の図形を　表示する／表示しない　のフラグ値を設定する。
//
static MINT	MdwSetBaseAxisDispFlg(
						MINT		i_ifDspF	// 表示フラグ
												//　0:表示しない
												//　1:表示する
				);

//===========================================================================
//		作業面表示図形フラグの問い合わせ
//
//		作業面の表示図形を　線で表示する／点で表示する　のフラグ値を問い合わせる。
//
static MINT	MdwGetBasePlaneShapeFlg(			// 表示図形フラグ
												//　1:線
												//　2:点
				);

//===========================================================================
//		作業面表示図形フラグの設定
//
//		作業面の表示図形を　線で表示する／点で表示する　のフラグ値を設定する。
//
static MINT	MdwSetBasePlaneShapeFlg(
						MINT	i_ifWkSDsp		// 表示図形フラグ
												//　1:線
												//　2:点
				);

//===========================================================================
//		作業面表示範囲の問い合わせ
//
//		渡されたウィンドウの作業面の表示範囲を問い合わせる。
//
//		表示範囲は、作業面座標系上での最小値（X、Y）と最大値（X、Y）。
//
static MINT	MdwGetBasePlaneRange(
						MDID		i_idWin,	// ウィンドウId
						MgRect2*	o_prcDsp	//	作業面表示範囲（最小XY、最大XY）
				);

//===========================================================================
//		作業面表示範囲の問い合わせ
//
//		渡されたウィンドウの作業面の表示範囲を問い合わせる。
//
//		表示範囲は、作業面座標系上での最小値（X、Y）と最大値（X、Y）。
//
static MINT	MdwSetBasePlaneRange(
						MDID		i_idWin,	// ウィンドウId
						MgRect2*	o_prcDsp	//	作業面表示範囲（最小XY、最大XY）
				);

//===========================================================================
//		機能番号に対する作業面表示範囲の問い合わせ
//
//		渡された機能番号に対する作業面の表示範囲を問い合わせる。
//		渡された機能番号でオープンするウィンドウの初期値を反す。
//
//		表示範囲は、作業面座標系上での最小値（X、Y）と最大値（X、Y）。
//
static MINT	MdwGetDefaultBasePlaneRange(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgRect2*	o_prcDsp	//	作業面表示範囲（最小XY、最大XY）
				);

//===========================================================================
//		機能番号に対する作業面表示範囲の設定
//
//		渡された機能番号に対する作業面の表示範囲を設定する。
//		以後、渡された機能番号でオープンするウィンドウの初期値はこの値になる。
//		既にオープンされているウィンドウには影響しない。
//
//		表示範囲は、作業面座標系上での最小値（X、Y）と最大値（X、Y）。
//
static MINT	MdwSetDefaultBasePlaneRange(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgRect2*	i_prcDsp	//	作業面表示範囲（最小XY、最大XY）
				);

//===========================================================================
//		作業面の状態問い合わせ
//
//		渡されたウィンドウの作業面の状態を問い合わせる。
//		o_piWkSはウィンドウの作業面を基準／任意のどちらで表示するかの値。
//		o_piCodは作業面座標系のXY／YZ／ZXのどの平面を使用するかの値。
//
static MINT	MdwGetBasePlaneXYZ(
						MDID		i_idWin,	// ウィンドウId
						MINT		o_piWkS,	//	0:基準    1:任意
						MINT		o_piCod		//	1:xy   2:yz   3:zx
				);

//===========================================================================
//		作業面の状態設定（切り替え）
//
//		渡されたウィンドウの作業面の状態を設定する。
//		flg1はウィンドウの作業面を基準／任意のどちらで表示するかの値。
//		flg2は作業面座標系のXY／YZ／ZXのどの平面を使用するかの値。
//
static MINT	MdwSetBasePlaneXYZ(
						MDID		i_idWin,	// ウィンドウId
						MINT		i_iWkS,		//	0:基準    1:任意
						MINT		i_iCod		//	1:xy   2:yz   3:zx
				);

//===========================================================================
//		任意作業面の座標系への座標変換マトリックスを取得する
//
static MINT	MdwGetTempPlaneCoord(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgMat3E*		o_pmatV		// 作業面の座標系の座標変換マトリックス
												// （基準座標系での値）
				);

//===========================================================================
//		任意作業面の座標系への座標変換マトリックスを設定する
//
static MINT	MdwSetTempPlaneCoord(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgMat3E*		i_pmatV		// 作業面の座標系の座標変換マトリックス
												// （基準座標系での値）
				);

//===========================================================================
//		ウィンドウの作業面の座標系への座標変換マトリックスを取得する
//
//		渡されたウィンドウIDの作業面の座標系を得る。
//		渡されたウィンドウの状態（表示）が任意作業面に設定されている場合でも基準作業面の座標系を返す。
//
static MINT	MdwGetBasePlaneCoord(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgMat3E*		o_pmatV		// 作業面の座標系の座標変換マトリックス
												// （基準座標系での値）
				);

//===========================================================================
//		機能番号に対する作業面の座標系への座標変換マトリックスを取得
//
//		渡された機能番号に対する作業面の座標系を得る。
//		渡された機能番号でオープンするウィンドウの初期値を返す。
//
static MINT	MdwGetDefaultBasePlaneCoord(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgMat3E*		o_pmatV		// 作業面の座標系の座標変換マトリックス
												// （基準座標系での値）
				);

//===========================================================================
//		機能番号に対する作業面の座標系への座標変換マトリックスを設定
//
//		渡された機能番号に対する作業面の座標系を設定する。
//		以後、渡された機能番号でオープンするウィンドウの初期値はこの値になる。
//		既にオープンされているウィンドウには影響しない。
//
static MINT	MdwSetDefaultBasePlaneCoord(
						MDID		i_idWFn,	// ウィンドウ機能番号
						MgMat3E*		i_pmatV		// 作業面の座標系の座標変換マトリックス
												// （基準座標系での値）
				);

};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: ZGeo.h
//
//		ウィンドウ
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DZGEO_DO
	#pragma message( "<<< DZGeo・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DZGeo・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DZGeo
{
public:
//===========================================================================
//		プロット点より面を作る
//
//		指定された点を通る面を作成する。
//		作成した面は３角形の面の集まりでできた多面。
//
static MINT	MdzCreateTriangleFromPoint(
						MgPolyg3	i_pgPlt,	// プロット点座標値リスト（３次元の点リスト）
						MDFIG*		o_pfigPln	// 生成された面の図形情報
				);

//===========================================================================
//		プロット点より立体を作る
//
//		上面は、指定された点を通る面、（作成した上面は３角形の面の集まりでできた多面）
//		下面は、上面の境界線からなるXY平面に平行な平面
//		から構成される線形構造立体の図形情報を作成する。
//
static MINT	MdzCreateSolidFromPoint(
						MgPolyg3	i_pgPlt,	// プロット点座標値リスト（３次元の点リスト）
						MDFIG*		o_pfigPln	// 生成された面の図形情報
				);

//===========================================================================
//		線の長さを求める
//
//		線タイプ図形の長さを得る。
//		　図形は、線タイプの図形であれば、２次元、３次元どちらでも可。
//		　（ZUKEI:: ConvPolygonを呼ぶ必要はない。）
//		　線タイプ以外の図形を渡した場合はlen＝0が返る。
//
static MINT	MdzGetLen(
						MDFIG&		i_stFigLn,	// 線タイプの図形情報
						MREAL*		o_prLng		// 線の長さ
				);

//===========================================================================
//		図形の長さ、表面積、体積を求める
//
//		図形の長さ、表面積、体積を得る。
//		　図形は、２次元、３次元どちらでも可。
//		　（ZUKEI:: ConvPolygonを呼ぶ必要はない。）
//		　対象外の図形に対しては、値が０で返る。
//		（例えば、線タイプの図形は、area＝volm＝0が返る。）
//
static MINT	MdzGetLenAreaVol(
						MDFIG&		i_stFigZ,	// 図形情報
						MREAL*		o_prLng,	// 線の長さ
						MREAL*		o_prArea,	// 線の面積
						MREAL*		o_prVolm	// 線の体積
				);

//===========================================================================
//		点と立体の包含を調べる
//
//		指定された点と立体（多面体）との包含関係を調べる。
//
static MINT	MdzCheckPointSolid(
						MgPoint3	i_ptChk,	// 点座標値
						MDFIG&		i_stFigVol,	// 多面体の図形情報
						MINT*		o_iCond		// チェック結果
												//	-1:立体の面上にある
												//	 0: 立体の外側にある
												//	 1: 立体の内側にある
				);

//===========================================================================
//	平面と有意点列の干渉を調べる
//
//		平面と有意点列の干渉を調べる。
//		図形は、２次元、３次元どちらでも可。
//
static MINT	MdzCheckInterPolylinePlane(
						MDFIG&		i_stFigPln,	// 平面の図形情報
						MDFIG&		i_stFigPlg,	// 有意点列の図形情報
						MINT*		o_iCond		// チェック結果
												//	-1:立体の面上にある
												//	0:干渉していない
												//	1:干渉している
				);

//===========================================================================
//		平面と平面の干渉を調べる
//
//		平面と平面の干渉を調べる。
//		図形は、２次元、３次元どちらでも可。
//
static MINT	MdzCheckInterPlanePlane(
						MDFIG&		i_stFigPln1,// 平面の図形情報
						MDFIG&		i_stFigPln2,// 平面の図形情報
						MINT*		o_iCond		// チェック結果
												//	0:干渉していない
												//	1:干渉している
				);

//===========================================================================
//		図形情報１と図形情報２の干渉を調べる
//
//		図形情報１と図形情報２の干渉を調べる。
//		図形は、２次元、３次元どちらでも可。
//
static MINT	MdzCheckInter(
						MDFIG&		i_stFigZk1,	// 図形情報１
						MDFIG&		i_stFigZk2,	// 図形情報２
						MINT*		o_iCond		// チェック結果
												//	0:干渉していない
												//	1:干渉している
												//	2:図形情報１が図形情報２を包含している
												//	3:図形情報２が図形情報１を包含している
				);

//===========================================================================
//		図形の重心を求める
//
//		図形の重心を求める。
//		　図形情報、重心の点座標は、３次元のみとする。
//		　（ZUKEI:: ConvPolygonを呼ぶ必要はない。）
//		　線タイプ等対象外の図形を渡した場合は重心＝（0,0,0）が返る。

//
static MINT	MdzGetGravityPoint(
						MDFIG&		i_stFigZk,	// 図形情報（３次元）
						MgPoint3*	o_pptG		// 重心の点座標値（３次元）
				);

//===========================================================================
//		有意点列と点の最短距離を求める
//
//		有意点列と点の最短距離を求める。
//		図形は、３次元のみが対象。
//
//
static MINT	MdzBeelinePointPlane(
						MDFIG&		i_stFigPg,	// 有意点列の図形情報（３次元）
						MgPoint3	i_pt,		// 点座標値（３次元）
						MREAL*		o_pLng		// 最短距離
				);

//===========================================================================
//		面の集合の境界線を得る
//
//		渡された多面の外縁境界線を得る。
//		図形情報は、３次元のみとする。
//		境界線は有意点列（閉）の図形情報が返る。
//
static MINT	MdzGetBorder(
						MDFIG&		i_stFigGPln,// 多面の図形情報（３次元）
						MDFIG*		o_pfigPg	// 境界線の図形情報（３次元）
				);

//===========================================================================
//		有意点列の不要点を除去する(2D)（同一直線の点を除く）
//
//		有意点列中の直線上にある中間点を除去する。
//		（有意点列内で、隣り合う線分が１直線上にある場合の中間点を除去する。）
//
//		図形は、２次元の有意点列を対象とする。
//
static MINT	MdzGetVertexFromPolyline(
						MDFIG&		i_stFigPg, 	// 有意点列の図形情報
						MDFIG*		o_pfigPg	// 除去後の図形情報
				);

//===========================================================================
//		線の反転
//
//		始終点を入れ替えて線の方向を反転する。
//		有意点列タイプは中間点列の並びも反転する。
//
//		fig1とfig2に同じメモリアドレスを渡しても良い。
//
//		図形は、３次元の線タイプ図形を対象とする。
//		（ZUKEI:: ConvPolygonを呼ぶ必要はない。）

//
static MINT	MdzRevLine(
					 	MDFIG&		i_stFigLn, 	// 線の図形情報
					 	MDFIG*		o_pfigLn 	// 反転後の図形情報

				);

//===========================================================================
//		面の反転
//
//		面の表裏を反転する。
//		fig1とfig2に同じメモリアドレスを渡しても良い。
//
//		図形は３次元の面タイプ図形を対象とする。
//
static MINT	MdzRevPlane(
						MDFIG&		i_stFigPln,	// 面の図形情報
						MDFIG*		o_pfigPln	// 反転後の図形情報

				);

//===========================================================================
//		論理演算
//
//		図形情報１と図形情報２の論理演算を行う。
//
//		処理モード=1の時は、２つの図形情報の結合を行う。
//		処理モード=2の時は、図形情報１から図形情報２の干渉部分を削除する。
//		処理モード=3の時は、図形情報１と図形情報２の干渉部分だけを残す。
//		処理モード=4の時は、図形情報１を図形情報２の干渉部分で切断する。
//		（切断後は２つ以上の図形情報になる。）
//
//		図形は、面および立体の図形を対象とする。
//		２次元、３次元どちらでも可。
//		（ZUKEI:: ConvPolygonを呼ぶ必要はない。）
//
//		演算後の図形情報は、平面、多面、多面体などの基本図形になる。
//
static MINT	MdzBoolean(
						MINT		i_mdPrc,	// 処理モード（1:和 2:差 3:積 4:切断）
						MDFIG&		i_stFigZ1,	//	図形情報1
						MDFIG&		i_stFigZ2,	//	図形情報2
						MDFIG*		o_pfigZ3	//	演算後の図形情報
				);

};

} // namespace MC

//==========================================================================================
//  Copyright(C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: Zukei.h
//
//		ウィンドウ
//
//  K.Matsu           11/03/09    Created.
//==========================================================================================
namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_DZUKEI_DO
	#pragma message( "<<< DZukei・dll_EXport >>>")
	#define DLL_EXPORT								__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MD_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== DZukei・dll_IMport ===")
			#define DLL_EXPORT						__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

class DLL_EXPORT DZukei
{
public:
//===========================================================================
//		図形DPRの生成
//
//		渡された図形情報により図形プリミティブDprを新規生成する。
//
static MINT	MdzCreate(
						MDID*		o_pidDpr,	// 図形プリミティブDpr-ID
						MDFIG&		i_pFig		// 図形情報
				);

//===========================================================================
//		点部材DPRの生成
//
//		渡された部品を参照する点部材プリミティブDprを新規生成する。
//		tmは部品の配置座標系（12）とX軸／Y軸／Z軸それぞれの拡大率（3）のバッファー。
//		拡大率は1.0が原寸。
//
static MINT	MdzCreatePartPlc(
						MgMat3E*		i_pmat,		// 配置座標系マトリックス
						MDID		i_idB,		// 部品ID
						MDID*		o_pidDpr	// 点部材プリミティブDpr-ID
				);

//===========================================================================
//		図形DPRより図形情報を取り出す
//
static MINT	MdzGet(
						MDID		i_idDpr,	// 点部材プリミティブDpr-ID
						MDFIG*		o_pFig		// 図形情報
				);

//===========================================================================
//		図形DPRの図形情報を変更
//
static MINT	MdzChange(
						MDID		i_idDpr,	// 点部材プリミティブDpr-ID
						MDFIG&		i_pFig		// 図形情報
				);

//===========================================================================
//		図形情報の座標変換
//
static MINT	MdzTrans(
						MgMat3E&		i_Mat,		// 配置座標系マトリックス
						MDFIG&		i_stFig,	// 図形情報
						MDFIG*		o_pFig		// 座標変換後図形情報
				);

////===========================================================================
////		図形情報の回転
////
//static MINT	MdzRotate(
//						MgMat3E*		i_pmat,		// 配置座標系マトリックス
//						MDFIG&		i_pFig,		// 図形情報
//						MDFIG*		o_pFig		// 座標変換後図形情報
//				);

//===========================================================================
//		図形情報の移動
//
static MINT	MdzMove(
						MgVect3&	i_vMv,		// 移動ベクトル
						MDFIG&		i_pFig,		// 図形情報
						MDFIG*		o_pFig		// 座標変換後図形情報
				);

//===========================================================================
//		図形情報の座標変換
//
static MINT	MdzMirror(
						MREAL		i_pln[4],	// 面情報（ax+by+cz+d=0）
						MDFIG&		i_pFig,		// 図形情報
						MDFIG*		o_pFig		// 座標変換後図形情報
				);

//===========================================================================
//		図形情報の拡大
//
//		指定された原点を基点に指定の拡大率で図形を拡大／縮小する。
//
static MINT	MdzExpansion(
						MgPoint3&	i_ptOrg,	// 原点
						MREAL		i_rScl,		// 拡大率（原寸=1.0）
						MDFIG&		i_pFig,		// 図形情報
						MDFIG*		o_pFig		// 座標変換後図形情報
				);

//===========================================================================
//		図形情報の取り出し時の座標系の問い合わせ
//
//		図形情報の取り出し時の座標系Dpr-IDを得る。
//		Getで取り出した図形情報や、Create、Changeで指定する図形情報は、
//		この座標系で記述されたものとみなされる。
//		通常、この座標系はカレントグループの座標系が設定されている。
//
static MINT	MdzGetCoord();						// 座標系Dpr-ID

//===========================================================================
//		図形情報の取り出し時の座標系を設定
//
//		図形情報の取り出し時の座標系Dpr-IDを設定する。
//		Getで取り出した図形情報や、Create、Changeで指定する図形情報は、
//		この座標系で記述されたものとみなされる。
//		通常、この座標系はカレントグループの座標系が設定されている。
//
static MINT	MdzSetCoord(
					 	MDID		i_idCodDpr	// 座標系Dpr-ID
				);

//===========================================================================
//		図形情報の取り出し時の表示属性出力モードの問い合わせ
//
//		Getで図形情報を取り出す時の表示属性取り出しモードの値を参照する。
//
//		Getで指定されたプリミティブDprに、表示属性が記録されていた場合、
//		表示属性取り出しモードが0の時は、表示属性の無い図形情報を取り出す。
//		表示属性取り出しモードが1の時は、表示属性の有る図形情報を取り出す。
//
static MINT	MdzGetAtrMode();					// 表示属性取り出しモード
												//	0 : 出力 無
												//　1 : 出力 有

//===========================================================================
//		図形情報の取り出し時の表示属性出力モードの設定
//
//		Getで図形情報を取り出す時の表示属性取り出しモードの値を設定する。
//
//		Getで指定されたプリミティブDprに、表示属性が記録されていた場合、
//		表示属性取り出しモードが0の時は、表示属性の無い図形情報を取り出す。
//		表示属性取り出しモードが1の時は、表示属性の有る図形情報を取り出す。
//
static MINT	MdzSetAtrMode(
					 	MINT		i_mdAtr		// 表示属性取り出しモード
												//	0 : 出力 無
												//　1 : 出力 有
				);

//===========================================================================
//		表示図形のＢＯＸを得る
//
//		指定された図形情報を包含する３次元のBOX情報を得る。
//
static MINT	MdzGetBox(
						MDFIG&		i_pFig,		//	図形情報バッファ
						MgRect3*	o_prect		//  BOX図形情報バッファ
												//	(最小点から最大点までの線分の図形情報)
				);

//===========================================================================
//		図形情報のポリゴン展開
//
//		与えられた図形情報をポリゴン展開する。
//		展開後の図形情報は、線分、有意点列、平面、多面、多面体などの基本プリミティブになる。
//		展開後の図形情報プリミティブは、本関数に与えられる図形情報およびMszSetConvValueLong、
//		MszSetConvValueDoubleで設定されるポリゴン展開処理モードにより決定する。
//
static MINT	MdzConvPolygon(
						MDFIG&		i_pFig,		//	図形情報バッファ
						MDFIG*		o_pFig		//	図形情報バッファ
				);

//===========================================================================
//		ポリゴン展開処理モード値（ｌｏｎｇ）の問い合わせ
//
//		ConvPolygonで図形情報をポリゴン展開する際の各処理モードを問い合わせる。
//		指定されたタイプのポリゴン展開処理モード値を返す。
//
static MINT	MdzGetConvValueInt(
						MINT		i_mdTenkai,	//	ポリゴン展開処理モードタイプ
						MINT*		o_piValue	//	値
				);

//===========================================================================
//		ポリゴン展開処理モード値（ｌｏｎｇ）の問い合わせ
//
//		ConvPolygonで図形情報をポリゴン展開する際の各処理モードを設定する。
//		指定したタイプのポリゴン展開処理モードに値を設定する。
//
static MINT	MdzSetConvValueInt(
						MINT		i_mdTenkai,	//	ポリゴン展開処理モードタイプ
						MINT		i_iValue	//	値
				);

//===========================================================================
//		ポリゴン展開処理モード値（ｆ ｌ ｏ ａ ｔ）の問い合わせ
//
//		ConvPolygonで図形情報をポリゴン展開する際の各処理モードを問い合わせる。
//		指定されたタイプのポリゴン展開処理モード値を返す。
//
static MINT	MdzGetConvValueDouble(
						MINT		i_mdTenkai,	//	ポリゴン展開処理モードタイプ
						MREAL*		o_prValue	//	値
				);

//===========================================================================
//		ポリゴン展開処理モード値（ｆ ｌ ｏ ａ ｔ）の設定
//
//		ConvPolygonで図形情報をポリゴン展開する際の各処理モードを設定する。
//		指定したタイプのポリゴン展開処理モードに値を設定する。
//
static MINT	MdzSetConvValueDouble(
						MINT		i_mdTenkai,	//	ポリゴン展開処理モードタイプ
						MREAL		i_rValue	//	値
				);

//===========================================================================
//		図形情報から属性情報をとる
//
//		指定した図形情報から属性情報をとった図形情報を返す。
//
static MINT	MdzRemoveAtr(
						MDFIG&		i_pFig,		//	図形情報バッファ
						MDFIG*		o_pFig		//	図形情報バッファ
				);
};

} // namespace MC
