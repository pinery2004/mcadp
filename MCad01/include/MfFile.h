#pragma once
//==========================================================================================
//  Copyright ( C) 2006-2008. K.Matsu. All rights reserved.
//
//  MODULE: MfFile.h
//
//		
//
//
//  K.Matsu           08/01/04    Created.
//==========================================================================================

/////////////////////////////////////////////////////////////////
//		ファイル処理
//

#define		MBREAD				1
#define		MBWRITE				2
#define		MBREADWRITE			3

#define		CTRL_TRACE_LEVEL	0
#define		CTRL_TRACE_OPEN		1
#define		CTRL_TRACE_CLOSE	2
#define		CTRL_COMMENT_PRINT	3
#define		CTRL_HEADER_PRINT	4
#define		CTRL_DATA_PRINT		5
#define		CTRL_RECORD_PRINT	6

#define		STS_NORMAL			0
#define		STS_FOUND			1
#define		STS_EOF				1
#define		STS_MODIFIED		1
#define		STS_NOTFOUND		0
#define		STS_WRITTEN			1
#define		STS_CLOSED			-1
#define		STS_NOTINITIALIZED	-2
#define		STS_OPENED			-2
#define		STS_NODATA			-2
#define		STS_OVERFLOW		-3
#define		STS_UNDEFITM		-4
#define		STS_NOATTRIBUTE		-5

#define		STS_FLOPNERR		-201
#define		STS_FLCLSERR		-202
#define		STS_ACSMDERR		-203

#define		MBCBSLINE			1000			// 最大1行文字数
#define 	MBCBSDBUF			1000			// 読み込みバッファサイズ
#define 	MBEOF				-1				// EOF フラグ
#define 	MBEOL				-2				// EOL フラグ


namespace MC
{

#ifdef DLL_EXPORT
	#undef DLL_EXPORT
#endif

#ifdef DLL_EXPORT_FILE_DO
	#pragma message( "<<< File・dll_EXport >>>")
	#define DLL_EXPORT							__declspec( dllexport)
#else
	#ifdef _DEBUG								// Release Mode で inline関数がundefになる不具合対応
		#ifdef DLL_NO_IMPORT_MBASIC_DO
			#define DLL_EXPORT
		#else
//			#pragma message( "=== File・dll_IMport ===")
			#define DLL_EXPORT					__declspec( dllimport)
		#endif
	#else
		#define DLL_EXPORT
	#endif
#endif

/*******************************************************************************

【機能】ファイル読み書き処理

*******************************************************************************/

//
class DLL_EXPORT MBFILE
{
public:
	HANDLE  m_fileHandle;						// ファイル読み書きハンドル
	int		m_stat;								// ファイルオープン状況
												//		0:　未オープン
												//      1: MBREAD オープン
												//      2: MBWRITE オープン
public:

	/*******************************************************************************
	【機能】ファイル読み書き処理クラスの作成( コンストラクタ)
	【返値】なし
	【注意】なし
	*******************************************************************************/

	MBFILE( void)
	{
		m_stat	= 0;							//	ファイルクローズ状況
	};

	/*******************************************************************************
	【機能】ファイル読み書き処理開始宣言
	【返値】==  0 : 正常終了
			== -2 : 既にオープンされている
			≦ -3 : その他エラー
	【注意】なし
	*******************************************************************************/

	int		Open( 
						MCHAR*	i_cFileName,	// ファイル名
						DWORD	i_ulMode		// 使用開始モード
												//		== MBREAD:	読み込み専用
												//		== MBWRITE:	書き込み専用
			);

	/*******************************************************************************
	【機能】ファイル読み書き処理終了宣言
	【返値】==  0 : 正常終了
			≠  0 : その他エラー
	【注意】なし
	*******************************************************************************/

	int		Close( void);


	//===========================================================================
	//【機能】		:ファイルの更新日を取得する
	//【返値】==  0 : 正常終了
	//		  ≠  0 : その他エラー
	//===========================================================================
	static MINT	GetFileDate(
						MCHAR*	i_cFileName,	// ファイル名
						MCHAR*	o_cDate			// ファイルの作成日
						);

};

/*******************************************************************************

【機能】項目データ読み込み処理

*******************************************************************************/

#define MBCBSLINE 1000

class DLL_EXPORT MBHZDT : public MBFILE
{
public:
	int		m_fopen;							//	項目データ読み込み処理状況
												// 		    0: ファイル処理中
												//		MBEOL: 行終了
												//		MBEOF: ファイル終了
	int		m_fback;							//	読み込み文字１文字戻しフラグ
												// 			0: 次文字
												//			1: １文字戻し（最後に読み込んだ文字を再度読み込み)
	int		m_icsDbuf;							// 文字読み込み処理バッファ内文字数
	char	m_sDbuf[MBCBSDBUF];					// 文字読み込み処理バッファ
	int		m_icsLine;							// 次文字処理位置
	int		m_fhead;							// 行の先頭フラグ
												//			0: 途中
												//			1: 先頭
public:

/*******************************************************************************
【機能】ファイルレコード項目処理クラスの作成( コンストラクタ)
【返値】なし
【注意】なし
*******************************************************************************/

	MBHZDT( ) {
		MBFILE::MBFILE( );						
		m_fopen=0;
		m_fback=0;
		m_icsDbuf = -1;							// 文字読み込み処理バッファが空( -1)
		m_icsLine = 0;							// 文字読み込み処理バッファの先頭
	};

/*******************************************************************************
【機能】ファイル項目読み込み処理開始宣言
【返値】==  0 : 正常終了
		== -2 : 既にオープンされている
		≦ -3 : その他エラー
【注意】なし
*******************************************************************************/

	int		Open( 
			MCHAR* filename						// ( I ) ファイル名
			);

/*******************************************************************************
【機能】ファイル項目読み込み処理終了宣言
【返値】==  0 : 正常終了
		≠  0 : その他エラー
【注意】なし
*******************************************************************************/

	int		Close( );

/*******************************************************************************
【機能】次行読み込み
【返値】 >  0 : 読み込み個数
		== -1 : ファイルの終わり	( MBEOF)
		== -2 : 行の終わり			( MBEOL)
		≦ -3 : その他エラー
【注意】なし
*******************************************************************************/

	int		NextLine( 
			void
			);

/*******************************************************************************
【機能】次行の先頭文字列項目を読み込む
【返値】 >  0 : 読み込み個数
		== -1 : ファイルの終わり	( MBEOF)
		== -2 : 行の終わり			( MBEOL)
		≦ -3 : その他エラー
【注意】なし
*******************************************************************************/

	int		Head( 
			MCHAR*	str,
			int		cbstr
			);

/*******************************************************************************
【機能】次の項目群を飛び越す
【返値】 >  0 : 正常
		== -1 : ファイルの終わり	( MBEOF)
		== -2 : 行の終わり			( MBEOL)
		≦ -3 : その他エラー
【注意】なし
*******************************************************************************/

	int 	Skip( 
			int		ns							// ( I ) ns ＞ 0	スキップする項目数
												//         ＝ 0 １行スキップ
			);

/*******************************************************************************
【機能】実数項目の読み込み
【返値】 >  0 : 読み込み個数
		== -1 : ファイルの終わり	( MBEOF)
		== -2 : 行の終わり			( MBEOL)
		≦ -3 : その他エラー
【注意】なし
*******************************************************************************/

	int		GetReal( 
			MREAL	*rb,						// ( O) 読み込み先実数バッファ
			int		icrb						// ( I ) 読み込み項目数
			);

/*******************************************************************************
【機能】ファイルより指定数の整数項目を読み込む
【返値】 >  0 : 読み込み項目数
		== -1 : ファイルの終わり	( MBEOF)
		== -2 : 行の終わり			( MBEOL)
		≦ -3 : その他エラー
【注意】なし
*******************************************************************************/

	int		GetInt( 
			int		*ib,
			int		icib
			);

/*******************************************************************************
【機能】ファイルより文字列項目を１項目読み込む
【返値】 >  0 : 読み込み文字数
		== -1 : ファイルの終わり	( MBEOF)
		== -2 : 行の終わり			( MBEOL)
		≦ -3 : その他エラー
【注意】なし
*******************************************************************************/

	int		GetStr( 
			MCHAR* str,
			int cbstr
			);

	int		GetStrC( 
			char *str,
			int cbstr
			);

protected:
/*******************************************************************************
【機能】ファイルより１文字読み込む
【返値】>=  0 : 文字コード
		== -1 : ファイルの終わり	( MBEOF)
		== -2 : 行の終わり			( MBEOL)
 【注意】なし
*******************************************************************************/

	int		GetCh( );

/*******************************************************************************
【機能】文字処理ポインタを一文字戻す
        ( 一文字戻すことを表わすフラグを立てる)
【返値】なし
【注意】なし
*******************************************************************************/

	void	BackCh( );
};

} // namespace MC
